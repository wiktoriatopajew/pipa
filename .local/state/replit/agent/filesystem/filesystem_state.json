{"file_contents":{"design_guidelines.md":{"content":"# Design Guidelines: ChatWithMechanic.com\n\n## Design Approach\n**Reference-Based Approach** inspired by modern tech platforms like Discord, gaming interfaces, and fintech apps (Stripe, Coinbase) to achieve the requested futuristic aesthetic while maintaining chat functionality usability.\n\n**Key Design Principles:**\n- Futuristic tech aesthetic with functional clarity\n- Dark-first design with neon accent touches\n- Clean, minimal interfaces that don't overwhelm users\n- Professional credibility balanced with modern appeal\n\n## Core Design Elements\n\n### Color Palette\n**Primary Colors:**\n- Background: 220 15% 8% (deep dark blue-gray)\n- Surface: 220 15% 12% (elevated dark surfaces)\n- Text Primary: 220 10% 95% (near white)\n- Text Secondary: 220 8% 70% (muted light gray)\n\n**Brand/Accent Colors:**\n- Primary Brand: 200 95% 55% (electric cyan blue)\n- Success/Online: 120 85% 50% (bright green for online mechanics)\n- Warning/Payment: 280 90% 65% (electric purple for premium features)\n\n**Gradients:**\n- Hero background: Subtle gradient from 220 20% 6% to 220 15% 10%\n- Button accents: Linear gradient using primary brand color variations\n- Card overlays: Subtle gradients with 220 15% 8% to 220 15% 14%\n\n### Typography\n- **Primary Font:** Inter or Outfit (Google Fonts) - modern, clean, tech-forward\n- **Secondary Font:** JetBrains Mono (for chat timestamps, technical specs)\n- **Sizes:** Scale using 0.875rem, 1rem, 1.125rem, 1.25rem, 1.5rem, 2rem, 3rem\n\n### Layout System\n**Tailwind Spacing Units:** Primarily use 2, 4, 6, 8, 12, 16, 24 units for consistent rhythm\n- Component padding: p-4, p-6, p-8\n- Section spacing: mb-8, mb-12, mb-16\n- Container margins: mx-4, mx-6, mx-8\n\n### Component Library\n\n**Navigation:**\n- Dark header with glowing brand logo\n- Transparent background with blur effect\n- Minimal navigation items with hover states\n\n**Hero Section:**\n- Full viewport height with gradient background\n- Central focus on value proposition and $9.99 pricing\n- Prominent CTA button with electric accent color\n- Fake \"mechanics online\" counter with pulsing indicators\n\n**Chat Interface:**\n- Discord-inspired layout with sidebar and main chat area\n- Bubble chat design with distinct user/mechanic styling\n- Online mechanics list with rotating fake names and status indicators\n- Payment gate overlay with futuristic card design\n\n**Forms:**\n- Dark input fields with subtle borders\n- Glowing focus states using brand colors\n- Modern button designs with gradient backgrounds\n- Registration/login modals with backdrop blur\n\n**Admin Panel:**\n- Clean dashboard with card-based metrics\n- Data tables with dark styling\n- Content management interface for headers/footers\n\n### Animations\n**Minimal Usage:**\n- Subtle fade-ins for page transitions\n- Gentle pulse animation for online indicators\n- Smooth hover states on interactive elements\n- Loading states for chat responses (typing indicators)\n\n## Images\n**Hero Section:** \nLarge background image or video of modern automotive garage/workspace with futuristic lighting. Apply dark overlay (60-70% opacity) to ensure text readability.\n\n**Mechanic Avatars:**\nGeneric technical/automotive themed icons or abstract geometric shapes as placeholders for fake mechanic profiles.\n\n**Equipment Icons:**\nSimple line icons representing different vehicle types (car, motorcycle, boat, construction equipment) for categorization.\n\nThe website should achieve a balance between impressive visual appeal (futuristic aesthetic) and practical functionality (efficient chat experience), with the landing page emphasizing conversion and the chat interface prioritizing usability.","size_bytes":3601},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n        success: \"hsl(120 85% 50%)\",\n        warning: \"hsl(280 90% 65%)\",\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4124},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/index.ts":{"content":"import dotenv from \"dotenv\";\ndotenv.config();\n\nimport express, { type Request, Response, NextFunction } from \"express\";\nimport session from \"express-session\";\nimport MemoryStore from \"memorystore\";\nimport helmet from \"helmet\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { storage } from \"./storage\";\nimport fs from \"fs\";\n\nconst app = express();\n\n// Initialize admin user after environment variables are loaded\nstorage.initAdminUser();\n\n// Cleanup expired files function\nconst cleanupExpiredFiles = async () => {\n  try {\n    console.log(\"Starting cleanup of expired files...\");\n    const expiredAttachments = await storage.getExpiredAttachments();\n    \n    for (const attachment of expiredAttachments) {\n      try {\n        // Delete physical file\n        if (fs.existsSync(attachment.filePath)) {\n          fs.unlinkSync(attachment.filePath);\n          console.log(`Deleted expired file: ${attachment.filePath}`);\n        }\n        \n        // Delete attachment record\n        await storage.deleteAttachment(attachment.id);\n        console.log(`Deleted expired attachment record: ${attachment.id}`);\n      } catch (error) {\n        console.error(`Error deleting attachment ${attachment.id}:`, error);\n      }\n    }\n    \n    console.log(`Cleanup completed. Removed ${expiredAttachments.length} expired files.`);\n  } catch (error) {\n    console.error(\"Error during file cleanup:\", error);\n  }\n};\n\n// Run cleanup on startup\ncleanupExpiredFiles();\n\n// Schedule cleanup to run every 24 hours (86400000 ms)\nsetInterval(cleanupExpiredFiles, 86400000);\n\n// Security headers with Helmet\napp.use(helmet({\n  contentSecurityPolicy: {\n    directives: {\n      defaultSrc: [\"'self'\"],\n      scriptSrc: process.env.NODE_ENV === 'production' \n        ? [\"'self'\"] \n        : [\"'self'\", \"'unsafe-inline'\", \"'unsafe-eval'\"],\n      styleSrc: process.env.NODE_ENV === 'production'\n        ? [\"'self'\"]\n        : [\"'self'\", \"'unsafe-inline'\"],\n      imgSrc: [\"'self'\", \"data:\", \"https:\"],\n      connectSrc: [\"'self'\"],\n      fontSrc: [\"'self'\"],\n      objectSrc: [\"'none'\"],\n      mediaSrc: [\"'self'\"],\n      frameSrc: [\"'none'\"],\n      frameAncestors: [\"'none'\"]\n    }\n  },\n  hsts: {\n    maxAge: 31536000,\n    includeSubDomains: true,\n    preload: true\n  }\n}));\n\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\n// Validate SESSION_SECRET for production security\nif (process.env.NODE_ENV === 'production' && !process.env.SESSION_SECRET) {\n  throw new Error('SESSION_SECRET environment variable is required in production');\n}\n\n// Configure secure session management with memory store for development\n// WARNING: MemoryStore is not suitable for production - use Redis or similar persistent store\nif (process.env.NODE_ENV === 'production') {\n  console.warn('WARNING: Using MemoryStore in production is not recommended. Switch to Redis or persistent session store.');\n}\n\nconst MemoryStoreSession = MemoryStore(session);\n\napp.use(session({\n  store: new MemoryStoreSession({\n    checkPeriod: 86400000, // prune expired entries every 24h\n  }),\n  secret: process.env.SESSION_SECRET || 'dev-secret-please-change-in-production',\n  resave: false,\n  saveUninitialized: false,\n  cookie: {\n    secure: process.env.NODE_ENV === 'production',\n    httpOnly: true,\n    maxAge: 24 * 60 * 60 * 1000, // 24 hours\n    sameSite: 'strict',\n  },\n  name: 'chatwithmechanic.sid',\n}));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      \n      // Only log response body in development to avoid logging sensitive data\n      if (capturedJsonResponse && process.env.NODE_ENV !== 'production') {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":5349},"server/routes.ts":{"content":"import type { Express, Request, Response } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertSubscriptionSchema, insertChatSessionSchema, insertMessageSchema, insertUserSchema, insertAttachmentSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport rateLimit from \"express-rate-limit\";\nimport multer from \"multer\";\nimport path from \"path\";\nimport fs from \"fs\";\nimport { sendUserLoginNotification, sendFirstMessageNotification, sendSubsequentMessageNotification } from \"./email\";\nimport { createPaypalOrder, capturePaypalOrder, loadPaypalDefault } from \"./paypal-wrapper\";\n\n// Validation schemas\nconst loginSchema = z.object({\n  email: z.string().email(\"Invalid email format\"),\n  password: z.string().min(1, \"Password required\")\n});\n\nconst subscriptionRequestSchema = z.object({\n  amount: z.string().regex(/^\\d+(\\.\\d{1,2})?$/, \"Invalid amount format\")\n});\n\n// File upload configuration\nconst storage_multer = multer.diskStorage({\n  destination: (req, file, cb) => {\n    const uploadDir = 'uploads/';\n    if (!fs.existsSync(uploadDir)) {\n      fs.mkdirSync(uploadDir, { recursive: true });\n    }\n    cb(null, uploadDir);\n  },\n  filename: (req, file, cb) => {\n    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);\n    const ext = path.extname(file.originalname);\n    cb(null, file.fieldname + '-' + uniqueSuffix + ext);\n  }\n});\n\nconst fileFilter = (req: any, file: any, cb: any) => {\n  const allowedMimeTypes = [\n    // Images\n    'image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/webp',\n    // Videos\n    'video/mp4', 'video/webm', 'video/quicktime', 'video/x-msvideo', 'video/avi'\n  ];\n  \n  if (allowedMimeTypes.includes(file.mimetype)) {\n    cb(null, true);\n  } else {\n    cb(new Error('Invalid file type. Only images and videos are allowed.'), false);\n  }\n};\n\nconst upload = multer({\n  storage: storage_multer,\n  fileFilter,\n  limits: {\n    fileSize: 150 * 1024 * 1024, // 150MB max\n  },\n});\n\n// Utility function to sanitize user objects\nconst toPublicUser = (user: any) => {\n  if (!user) return null;\n  const { password, ...publicUser } = user;\n  return publicUser;\n};\n\n// Rate limiting configurations\nconst authRateLimit = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 5, // limit each IP to 5 requests per windowMs\n  message: { error: \"Too many authentication attempts, please try again later\" },\n  standardHeaders: true,\n  legacyHeaders: false,\n});\n\nconst generalRateLimit = rateLimit({\n  windowMs: 1 * 60 * 1000, // 1 minute\n  max: 30, // limit each IP to 30 requests per minute\n  message: { error: \"Too many requests, please try again later\" },\n  standardHeaders: true,\n  legacyHeaders: false,\n});\n\n// Extend Express Request type to include session and user data\ndeclare module 'express-serve-static-core' {\n  interface Request {\n    session: any;\n    user?: any;\n    subscription?: any;\n  }\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // PayPal routes - reference: blueprint:javascript_paypal\n  app.get(\"/paypal/setup\", async (req, res) => {\n    await loadPaypalDefault(req, res);\n  });\n\n  app.post(\"/paypal/order\", async (req, res) => {\n    await createPaypalOrder(req, res);\n  });\n\n  app.post(\"/paypal/order/:orderID/capture\", async (req, res) => {\n    await capturePaypalOrder(req, res);\n  });\n\n  // Admin Authentication\n  app.post(\"/api/admin/login\", authRateLimit, async (req, res) => {\n    try {\n      // Validate request body\n      const result = loginSchema.safeParse(req.body);\n      if (!result.success) {\n        return res.status(400).json({ \n          error: \"Invalid login data\", \n          details: result.error.issues \n        });\n      }\n      \n      const { email, password } = result.data;\n\n      const user = await storage.verifyPassword(email, password);\n      \n      if (!user || !user.isAdmin) {\n        return res.status(401).json({ error: \"Invalid admin credentials\" });\n      }\n\n      // Update online status\n      await storage.updateUser(user.id, { isOnline: true, lastSeen: new Date() });\n\n      // Regenerate session to prevent session fixation\n      req.session.regenerate((err: any) => {\n        if (err) {\n          return res.status(500).json({ error: \"Session regeneration failed\" });\n        }\n        \n        // Store admin session\n        req.session.adminId = user.id;\n        req.session.isAdmin = true;\n\n        res.json({ \n          success: true, \n          admin: { \n            id: user.id, \n            email: user.email, \n            username: user.username \n          } \n        });\n      });\n    } catch (error) {\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/admin/logout\", async (req, res) => {\n    if (req.session.adminId) {\n      await storage.updateUser(req.session.adminId, { isOnline: false });\n    }\n    req.session.destroy((err: any) => {\n      if (err) {\n        return res.status(500).json({ error: \"Failed to logout\" });\n      }\n      res.json({ success: true });\n    });\n  });\n\n  // Admin middleware\n  const requireAdmin = (req: Request, res: Response, next: any) => {\n    if (!req.session?.isAdmin) {\n      return res.status(403).json({ error: \"Admin access required\" });\n    }\n    next();\n  };\n\n  // Admin Dashboard Data\n  app.get(\"/api/admin/dashboard\", requireAdmin, async (req, res) => {\n    try {\n      const users = await storage.getAllUsers();\n      const subscriptions = await storage.getAllActiveSubscriptions();\n      const activeSessions = await storage.getAllActiveChatSessions();\n      const unreadMessages = await storage.getAllUnreadMessages();\n      const recentMessages = await storage.getRecentMessages(20);\n\n      const stats = {\n        totalUsers: users.length,\n        subscribedUsers: users.filter(u => u.hasSubscription).length,\n        onlineUsers: users.filter(u => u.isOnline).length,\n        activeChats: activeSessions.length,\n        unreadMessages: unreadMessages.length,\n        totalRevenue: subscriptions.reduce((sum, sub) => sum + parseFloat(sub.amount || \"0\"), 0)\n      };\n\n      res.json({\n        stats,\n        users: users.filter(u => !u.isAdmin).map(toPublicUser), // Sanitize user data\n        subscriptions,\n        activeSessions,\n        unreadMessages,\n        recentMessages\n      });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch dashboard data\" });\n    }\n  });\n\n  // User Management\n  app.get(\"/api/admin/users\", requireAdmin, async (req, res) => {\n    try {\n      const users = await storage.getAllUsers();\n      const sanitizedUsers = users.filter(u => !u.isAdmin).map(toPublicUser);\n      res.json(sanitizedUsers);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch users\" });\n    }\n  });\n\n  app.patch(\"/api/admin/users/:id\", requireAdmin, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const updates = req.body;\n      const user = await storage.updateUser(id, updates);\n      res.json(toPublicUser(user));\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to update user\" });\n    }\n  });\n\n  // Subscription Management\n  app.post(\"/api/admin/subscriptions\", requireAdmin, async (req, res) => {\n    try {\n      const result = insertSubscriptionSchema.safeParse(req.body);\n      if (!result.success) {\n        return res.status(400).json({ error: \"Invalid subscription data\" });\n      }\n      \n      const subscription = await storage.createSubscription(result.data);\n      res.json(subscription);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to create subscription\" });\n    }\n  });\n\n  // Chat Management\n  app.get(\"/api/admin/chats\", requireAdmin, async (req, res) => {\n    try {\n      const sessions = await storage.getAllActiveChatSessions();\n      \n      // Enrich with user data and recent messages\n      const enrichedSessions = await Promise.all(\n        sessions.map(async (session) => {\n          const user = session.userId ? await storage.getUser(session.userId) : null;\n          const messages = await storage.getSessionMessages(session.id);\n          const lastMessage = messages[messages.length - 1];\n          const unreadCount = messages.filter(m => !m.isRead && m.senderType === 'user').length;\n          \n          return {\n            ...session,\n            user: toPublicUser(user),\n            lastMessage,\n            unreadCount,\n            messageCount: messages.length\n          };\n        })\n      );\n\n      res.json(enrichedSessions);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch chat sessions\" });\n    }\n  });\n\n  app.get(\"/api/admin/chats/:sessionId/messages\", requireAdmin, async (req, res) => {\n    try {\n      const { sessionId } = req.params;\n      const messages = await storage.getSessionMessages(sessionId);\n      \n      // Enrich with sender data and attachments (sanitized)\n      const enrichedMessages = await Promise.all(\n        messages.map(async (message) => {\n          const sender = message.senderId ? await storage.getUser(message.senderId) : null;\n          const attachments = await storage.getMessageAttachments(message.id);\n          \n          return {\n            ...message,\n            sender: toPublicUser(sender),\n            attachments: attachments\n          };\n        })\n      );\n\n      res.json(enrichedMessages);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch messages\" });\n    }\n  });\n\n  app.post(\"/api/admin/chats/:sessionId/messages\", requireAdmin, async (req, res) => {\n    try {\n      const { sessionId } = req.params;\n      const { content } = req.body;\n      \n      if (!content) {\n        return res.status(400).json({ error: \"Message content required\" });\n      }\n\n      const messageData = {\n        sessionId,\n        senderId: req.session.adminId,\n        senderType: \"admin\",\n        content,\n        isRead: true\n      };\n\n      const result = insertMessageSchema.safeParse(messageData);\n      if (!result.success) {\n        return res.status(400).json({ error: \"Invalid message data\" });\n      }\n\n      const message = await storage.createMessage(result.data);\n      const sender = await storage.getUser(req.session.adminId);\n\n      res.json({\n        ...message,\n        sender\n      });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to send message\" });\n    }\n  });\n\n  app.patch(\"/api/admin/messages/:messageId/read\", requireAdmin, async (req, res) => {\n    try {\n      const { messageId } = req.params;\n      await storage.markMessageAsRead(messageId);\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to mark message as read\" });\n    }\n  });\n\n  // Real-time data endpoint\n  app.get(\"/api/admin/live-data\", requireAdmin, async (req, res) => {\n    try {\n      const unreadMessages = await storage.getAllUnreadMessages();\n      const activeSessions = await storage.getAllActiveChatSessions();\n      const onlineUsers = (await storage.getAllUsers()).filter(u => u.isOnline && !u.isAdmin);\n\n      res.json({\n        unreadCount: unreadMessages.length,\n        activeChatsCount: activeSessions.length,\n        onlineUsersCount: onlineUsers.length,\n        lastUpdate: new Date().toISOString()\n      });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch live data\" });\n    }\n  });\n\n  // Auth middleware to check authentication only (for subscription creation)\n  const requireAuth = async (req: Request, res: Response, next: any) => {\n    if (!req.session?.userId) {\n      return res.status(401).json({ error: \"Authentication required\" });\n    }\n    \n    const user = await storage.getUser(req.session.userId);\n    if (!user) {\n      return res.status(401).json({ error: \"User not found\" });\n    }\n    \n    req.user = user;\n    next();\n  };\n\n  // User middleware to check authentication and subscription\n  const requireUser = async (req: Request, res: Response, next: any) => {\n    if (!req.session?.userId) {\n      return res.status(401).json({ error: \"Authentication required\" });\n    }\n    \n    const user = await storage.getUser(req.session.userId);\n    if (!user) {\n      return res.status(401).json({ error: \"User not found\" });\n    }\n    \n    // Check if user has active subscription\n    const subscriptions = await storage.getUserSubscriptions(user.id);\n    const activeSubscription = subscriptions.find(sub => \n      sub.status === \"active\" && \n      sub.expiresAt && \n      new Date(sub.expiresAt) > new Date()\n    );\n    \n    if (!activeSubscription) {\n      return res.status(403).json({ error: \"Active subscription required\" });\n    }\n    \n    req.user = user;\n    req.subscription = activeSubscription;\n    next();\n  };\n\n  // User Authentication endpoints\n  app.post(\"/api/users/register\", authRateLimit, async (req, res) => {\n    try {\n      // Validate request body\n      const result = insertUserSchema.safeParse(req.body);\n      if (!result.success) {\n        return res.status(400).json({ \n          error: \"Invalid user data\", \n          details: result.error.issues \n        });\n      }\n      \n      const { username, email, password } = result.data;\n      \n      // Check if user exists\n      const existingUser = await storage.getUserByEmail(email || \"\");\n      if (existingUser) {\n        return res.status(400).json({ error: \"User already exists\" });\n      }\n\n      const user = await storage.createUser({ username, email, password });\n      \n      // Regenerate session to prevent session fixation and auto-login\n      req.session.regenerate((err: any) => {\n        if (err) {\n          return res.status(500).json({ error: \"Session regeneration failed\" });\n        }\n        \n        req.session.userId = user.id;\n        req.session.isUser = true;\n        \n        res.json({ \n          id: user.id, \n          username: user.username, \n          email: user.email,\n          hasSubscription: user.hasSubscription \n        });\n      });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to create user\" });\n    }\n  });\n\n  app.post(\"/api/users/login\", authRateLimit, async (req, res) => {\n    try {\n      // Validate request body\n      const result = loginSchema.safeParse(req.body);\n      if (!result.success) {\n        return res.status(400).json({ \n          error: \"Invalid login data\", \n          details: result.error.issues \n        });\n      }\n      \n      const { email, password } = result.data;\n\n      const user = await storage.verifyPassword(email, password);\n      \n      if (!user || user.isAdmin) {\n        return res.status(401).json({ error: \"Invalid credentials\" });\n      }\n\n      // Update online status\n      await storage.updateUser(user.id, { isOnline: true, lastSeen: new Date() });\n\n      // Send login notification email\n      try {\n        await sendUserLoginNotification(user.username, user.email || 'unknown@email.com');\n        console.log('Login notification sent for user:', user.username);\n      } catch (emailError) {\n        console.error('Failed to send login notification:', emailError);\n      }\n\n      // Regenerate session to prevent session fixation\n      req.session.regenerate((err: any) => {\n        if (err) {\n          return res.status(500).json({ error: \"Session regeneration failed\" });\n        }\n        \n        // Store user session\n        req.session.userId = user.id;\n        req.session.isUser = true;\n\n        res.json({ \n          success: true, \n          user: { \n            id: user.id, \n            email: user.email, \n            username: user.username,\n            hasSubscription: user.hasSubscription\n          } \n        });\n      });\n    } catch (error) {\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/users/logout\", async (req, res) => {\n    if (req.session.userId) {\n      await storage.updateUser(req.session.userId, { isOnline: false });\n    }\n    req.session.destroy((err: any) => {\n      if (err) {\n        return res.status(500).json({ error: \"Failed to logout\" });\n      }\n      res.json({ success: true });\n    });\n  });\n\n  app.get(\"/api/users/me\", async (req, res) => {\n    try {\n      if (!req.session?.userId) {\n        return res.status(401).json({ error: \"Not authenticated\" });\n      }\n\n      const user = await storage.getUser(req.session.userId);\n      if (!user) {\n        return res.status(401).json({ error: \"User not found\" });\n      }\n\n      // Check subscription status\n      const subscriptions = await storage.getUserSubscriptions(user.id);\n      const now = new Date();\n      const activeSubscription = subscriptions.find(sub => \n        sub.status === \"active\" && \n        sub.expiresAt && \n        new Date(sub.expiresAt) > now\n      );\n\n      // Calculate days remaining\n      let subscriptionDaysLeft = 0;\n      if (activeSubscription?.expiresAt) {\n        const expiresAt = new Date(activeSubscription.expiresAt);\n        const diffMs = expiresAt.getTime() - now.getTime();\n        subscriptionDaysLeft = Math.max(0, Math.ceil(diffMs / (1000 * 60 * 60 * 24)));\n      }\n\n      res.json({\n        id: user.id,\n        username: user.username,\n        email: user.email,\n        isAdmin: user.isAdmin || false,\n        hasSubscription: !!activeSubscription,\n        subscription: activeSubscription || null,\n        subscriptionDaysLeft\n      });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch user data\" });\n    }\n  });\n\n  app.post(\"/api/subscriptions\", requireAuth, async (req, res) => {\n    try {\n      if (!req.session?.userId) {\n        return res.status(401).json({ error: \"Authentication required\" });\n      }\n      \n      // Validate request body\n      const result = subscriptionRequestSchema.safeParse(req.body);\n      if (!result.success) {\n        return res.status(400).json({ \n          error: \"Invalid subscription data\", \n          details: result.error.issues \n        });\n      }\n      \n      const { amount } = result.data;\n      \n      // Set expiry date to 30 days from now\n      const expiresAt = new Date();\n      expiresAt.setDate(expiresAt.getDate() + 30);\n      \n      const subscription = await storage.createSubscription({\n        userId: req.session.userId, // Use userId from session, not client input\n        amount: amount.toString(),\n        status: \"active\",\n        expiresAt\n      });\n      \n      // Update user hasSubscription flag\n      await storage.updateUser(req.session.userId, { hasSubscription: true });\n      \n      res.json(subscription);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to create subscription\" });\n    }\n  });\n\n  // Protected Chat Endpoints for Users (require authentication and subscription)\n  app.post(\"/api/chat/sessions\", requireUser, async (req, res) => {\n    try {\n      const { vehicleInfo } = req.body;\n      \n      const session = await storage.createChatSession({\n        userId: req.user.id, // Use authenticated user ID from session\n        vehicleInfo: JSON.stringify(vehicleInfo || {}),\n        status: \"active\"\n      });\n      \n      res.json(session);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to create chat session\" });\n    }\n  });\n\n  // Get user's chat sessions\n  app.get(\"/api/chat/sessions\", requireUser, async (req, res) => {\n    try {\n      const sessions = await storage.getUserChatSessions(req.user.id);\n\n      // Get preview message and computed data for each session\n      const sessionsWithPreviews = await Promise.all(\n        sessions.map(async (session) => {\n          const messages = await storage.getSessionMessages(session.id);\n          const lastMessage = messages[messages.length - 1];\n          \n          // Compute the actual last activity time with safe timestamp conversions\n          const sessionLastActivity = session.lastActivity ? new Date(session.lastActivity).getTime() : 0;\n          const sessionCreated = session.createdAt ? new Date(session.createdAt).getTime() : 0;\n          const messageCreated = lastMessage?.createdAt ? new Date(lastMessage.createdAt).getTime() : 0;\n          \n          const computedLastActivity = new Date(Math.max(sessionLastActivity, messageCreated, sessionCreated) || Date.now());\n\n          // Count unread messages from non-user senders\n          const unreadCount = messages.filter(msg => \n            !msg.isRead && msg.senderType !== 'user'\n          ).length;\n          \n          return {\n            ...session,\n            lastActivity: computedLastActivity,\n            lastMessage: lastMessage ? {\n              content: lastMessage.content,\n              createdAt: lastMessage.createdAt,\n              senderType: lastMessage.senderType\n            } : null,\n            messageCount: messages.length,\n            unreadCount\n          };\n        })\n      );\n\n      // Sort by computed last activity (most recent first)\n      const sortedSessions = sessionsWithPreviews.sort((a, b) => {\n        return new Date(b.lastActivity).getTime() - new Date(a.lastActivity).getTime();\n      });\n      \n      res.json(sortedSessions);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch chat sessions\" });\n    }\n  });\n\n  app.get(\"/api/chat/sessions/:sessionId/messages\", requireUser, async (req, res) => {\n    try {\n      const { sessionId } = req.params;\n      \n      // Verify user owns this session\n      const session = await storage.getChatSession(sessionId);\n      if (!session || session.userId !== req.user.id) {\n        return res.status(403).json({ error: \"Access denied to this chat session\" });\n      }\n      \n      const messages = await storage.getSessionMessages(sessionId);\n      \n      // Enrich with sender data (sanitized)\n      const enrichedMessages = await Promise.all(\n        messages.map(async (message) => {\n          const sender = message.senderId ? await storage.getUser(message.senderId) : null;\n          return {\n            ...message,\n            sender: toPublicUser(sender)\n          };\n        })\n      );\n      \n      res.json(enrichedMessages);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch messages\" });\n    }\n  });\n\n  app.post(\"/api/chat/sessions/:sessionId/messages\", requireUser, async (req, res) => {\n    try {\n      const { sessionId } = req.params;\n      const { content } = req.body;\n      \n      if (!content) {\n        return res.status(400).json({ error: \"Content required\" });\n      }\n      \n      // Verify user owns this session\n      const session = await storage.getChatSession(sessionId);\n      if (!session || session.userId !== req.user.id) {\n        return res.status(403).json({ error: \"Access denied to this chat session\" });\n      }\n      \n      // Check if this is the first user message in this session\n      const existingMessages = await storage.getSessionMessages(sessionId);\n      const userMessages = existingMessages.filter(msg => msg.senderType === \"user\");\n      const isFirstMessage = userMessages.length === 0;\n      \n      const message = await storage.createMessage({\n        sessionId,\n        senderId: req.user.id, // Use authenticated user ID from session\n        senderType: \"user\", // Always \"user\" for authenticated user messages\n        content,\n        isRead: false\n      });\n      \n      // Send email notifications if this is the first message\n      if (isFirstMessage) {\n        try {\n          await sendFirstMessageNotification(\n            req.user.username,\n            req.user.email || 'unknown@email.com',\n            content,\n            sessionId\n          );\n          console.log('Email notification sent for first message from user:', req.user.username);\n        } catch (emailError) {\n          // Log error but don't fail the message creation\n          console.error('Failed to send email notification:', emailError);\n        }\n      } else {\n        // Send subsequent message notification\n        try {\n          const messageCount = userMessages.length + 1;\n          await sendSubsequentMessageNotification(\n            req.user.username,\n            req.user.email || 'unknown@email.com',\n            content,\n            sessionId,\n            messageCount\n          );\n          console.log(`Email notification sent for message #${messageCount} from user:`, req.user.username);\n        } catch (emailError) {\n          console.error('Failed to send email notification:', emailError);\n        }\n      }\n      \n      res.json(message);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to send message\" });\n    }\n  });\n\n  // Get messages for chat session (user endpoint)\n  app.get(\"/api/chat/sessions/:sessionId/messages\", requireUser, async (req, res) => {\n    try {\n      const { sessionId } = req.params;\n      \n      // Verify user owns this session\n      const session = await storage.getChatSession(sessionId);\n      if (!session || session.userId !== req.user.id) {\n        return res.status(403).json({ error: \"Access denied to this chat session\" });\n      }\n      \n      const messages = await storage.getSessionMessages(sessionId);\n      \n      // Enrich with sender data and attachments\n      const enrichedMessages = await Promise.all(\n        messages.map(async (message) => {\n          const sender = message.senderId ? await storage.getUser(message.senderId) : null;\n          const attachments = await storage.getMessageAttachments(message.id);\n          \n          return {\n            ...message,\n            sender: toPublicUser(sender),\n            attachments: attachments\n          };\n        })\n      );\n\n      res.json(enrichedMessages);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch messages\" });\n    }\n  });\n\n  // Upload file for chat message\n  app.post(\"/api/chat/sessions/:sessionId/upload\", requireUser, upload.single('file'), async (req, res) => {\n    try {\n      const { sessionId } = req.params;\n      \n      if (!req.file) {\n        return res.status(400).json({ error: \"No file uploaded\" });\n      }\n      \n      // Verify user owns this session\n      const session = await storage.getChatSession(sessionId);\n      if (!session || session.userId !== req.user.id) {\n        return res.status(403).json({ error: \"Access denied to this chat session\" });\n      }\n      \n      // Check file size limits based on type\n      const isImage = req.file.mimetype.startsWith('image/');\n      const isVideo = req.file.mimetype.startsWith('video/');\n      const maxSize = isImage ? 30 * 1024 * 1024 : 150 * 1024 * 1024; // 30MB for images, 150MB for videos\n      \n      if (req.file.size > maxSize) {\n        // Delete uploaded file if size exceeded\n        fs.unlinkSync(req.file.path);\n        return res.status(400).json({ \n          error: `File too large. Maximum size is ${isImage ? '30MB' : '150MB'} for ${isImage ? 'images' : 'videos'}` \n        });\n      }\n      \n      // Create message with file content indicator\n      const message = await storage.createMessage({\n        sessionId,\n        senderId: req.user.id,\n        senderType: \"user\",\n        content: `[File: ${req.file.originalname}]`,\n        isRead: false\n      });\n      \n      // Create attachment record\n      const attachment = await storage.createAttachment({\n        messageId: message.id,\n        fileName: req.file.filename,\n        originalName: req.file.originalname,\n        fileSize: req.file.size,\n        mimeType: req.file.mimetype,\n        filePath: req.file.path,\n      });\n      \n      res.json({ message, attachment });\n    } catch (error) {\n      // Clean up uploaded file on error\n      if (req.file && fs.existsSync(req.file.path)) {\n        fs.unlinkSync(req.file.path);\n      }\n      res.status(500).json({ error: \"Failed to upload file\" });\n    }\n  });\n\n  // Serve uploaded files\n  app.get(\"/api/uploads/:filename\", async (req, res) => {\n    try {\n      const { filename } = req.params;\n      const filePath = path.join('uploads', filename);\n      \n      // Check if file exists\n      if (!fs.existsSync(filePath)) {\n        return res.status(404).json({ error: \"File not found\" });\n      }\n      \n      // Get attachment info to verify access\n      const attachment = await storage.getAttachmentByFilename(filename);\n      if (!attachment) {\n        return res.status(404).json({ error: \"File not found\" });\n      }\n      \n      // Check if file has expired\n      if (attachment.expiresAt && new Date() > attachment.expiresAt) {\n        // Delete expired file\n        fs.unlinkSync(filePath);\n        await storage.deleteAttachment(attachment.id);\n        return res.status(404).json({ error: \"File has expired\" });\n      }\n      \n      res.sendFile(path.resolve(filePath));\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to serve file\" });\n    }\n  });\n\n  // User heartbeat for online status (protected)\n  app.post(\"/api/users/heartbeat\", requireUser, async (req, res) => {\n    try {\n      const updatedUser = await storage.updateUser(req.user.id, { \n        isOnline: true, \n        lastSeen: new Date() \n      });\n      \n      if (!updatedUser) {\n        return res.status(404).json({ error: \"User not found\" });\n      }\n      \n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to update heartbeat\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":29254},"server/storage.ts":{"content":"import { \n  type User, type InsertUser,\n  type Subscription, type InsertSubscription,\n  type ChatSession, type InsertChatSession,\n  type Message, type InsertMessage,\n  type Attachment, type InsertAttachment,\n  users, subscriptions, chatSessions, messages, attachments\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\nimport bcrypt from \"bcryptjs\";\nimport { db } from \"./db\";\nimport { eq, and, desc, lt } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User methods\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, updates: Partial<User>): Promise<User | undefined>;\n  getAllUsers(): Promise<User[]>;\n  verifyPassword(email: string, password: string): Promise<User | null>;\n  \n  // Subscription methods\n  createSubscription(subscription: InsertSubscription): Promise<Subscription>;\n  getUserSubscriptions(userId: string): Promise<Subscription[]>;\n  getAllActiveSubscriptions(): Promise<Subscription[]>;\n  \n  // Chat session methods\n  createChatSession(session: InsertChatSession): Promise<ChatSession>;\n  getChatSession(id: string): Promise<ChatSession | undefined>;\n  getUserChatSessions(userId: string): Promise<ChatSession[]>;\n  getAllActiveChatSessions(): Promise<ChatSession[]>;\n  updateChatSession(id: string, updates: Partial<ChatSession>): Promise<ChatSession | undefined>;\n  \n  // Message methods\n  createMessage(message: InsertMessage): Promise<Message>;\n  getSessionMessages(sessionId: string): Promise<Message[]>;\n  getAllUnreadMessages(): Promise<Message[]>;\n  markMessageAsRead(messageId: string): Promise<void>;\n  getRecentMessages(limit?: number): Promise<Message[]>;\n  \n  // Attachment methods\n  createAttachment(attachment: InsertAttachment): Promise<Attachment>;\n  getMessageAttachments(messageId: string): Promise<Attachment[]>;\n  getAttachment(id: string): Promise<Attachment | undefined>;\n  getAttachmentByFilename(filename: string): Promise<Attachment | undefined>;\n  deleteAttachment(id: string): Promise<void>;\n  getExpiredAttachments(): Promise<Attachment[]>;\n  deleteExpiredAttachments(): Promise<void>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private subscriptions: Map<string, Subscription>;\n  private chatSessions: Map<string, ChatSession>;\n  private messages: Map<string, Message>;\n  private attachments: Map<string, Attachment>;\n\n  constructor() {\n    this.users = new Map();\n    this.subscriptions = new Map();\n    this.chatSessions = new Map();\n    this.messages = new Map();\n    this.attachments = new Map();\n  }\n\n  async initAdminUser() {\n    const adminEmail = process.env.ADMIN_EMAIL;\n    const adminPassword = process.env.ADMIN_PASSWORD;\n    \n    if (adminEmail && adminPassword) {\n      const hashedPassword = await bcrypt.hash(adminPassword, 12);\n      const adminUser: User = {\n        id: randomUUID(),\n        username: \"admin\",\n        password: hashedPassword,\n        email: adminEmail,\n        isAdmin: true,\n        hasSubscription: true,\n        isOnline: false,\n        lastSeen: new Date(),\n        createdAt: new Date(),\n      };\n      this.users.set(adminUser.id, adminUser);\n      console.log(`Admin user created with email: ${adminEmail}`);\n    } else {\n      console.log(\"No admin credentials provided - admin user not created\");\n    }\n  }\n\n  // User methods\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.email === email,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    \n    // Hash the password before storing\n    const hashedPassword = await bcrypt.hash(insertUser.password, 12);\n    \n    const user: User = { \n      ...insertUser,\n      password: hashedPassword,\n      email: insertUser.email || null,\n      id,\n      isAdmin: false,\n      hasSubscription: false,\n      isOnline: false,\n      lastSeen: new Date(),\n      createdAt: new Date(),\n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async updateUser(id: string, updates: Partial<User>): Promise<User | undefined> {\n    const user = this.users.get(id);\n    if (!user) return undefined;\n    \n    const updatedUser = { ...user, ...updates };\n    this.users.set(id, updatedUser);\n    return updatedUser;\n  }\n\n  async getAllUsers(): Promise<User[]> {\n    return Array.from(this.users.values());\n  }\n\n  async verifyPassword(email: string, password: string): Promise<User | null> {\n    const user = await this.getUserByEmail(email);\n    if (!user) return null;\n    \n    const isValid = await bcrypt.compare(password, user.password);\n    return isValid ? user : null;\n  }\n\n  // Subscription methods\n  async createSubscription(insertSubscription: InsertSubscription): Promise<Subscription> {\n    const id = randomUUID();\n    const subscription: Subscription = {\n      ...insertSubscription,\n      id,\n      status: insertSubscription.status || \"active\",\n      userId: insertSubscription.userId || null,\n      amount: insertSubscription.amount || null,\n      purchasedAt: new Date(),\n      expiresAt: insertSubscription.expiresAt || new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 days\n    };\n    this.subscriptions.set(id, subscription);\n    \n    // Update user subscription status\n    if (insertSubscription.userId) {\n      await this.updateUser(insertSubscription.userId, { hasSubscription: true });\n    }\n    \n    return subscription;\n  }\n\n  async getUserSubscriptions(userId: string): Promise<Subscription[]> {\n    return Array.from(this.subscriptions.values()).filter(\n      (sub) => sub.userId === userId,\n    );\n  }\n\n  async getAllActiveSubscriptions(): Promise<Subscription[]> {\n    return Array.from(this.subscriptions.values()).filter(\n      (sub) => sub.status === \"active\",\n    );\n  }\n\n  // Chat session methods\n  async createChatSession(insertSession: InsertChatSession): Promise<ChatSession> {\n    const id = randomUUID();\n    const session: ChatSession = {\n      ...insertSession,\n      id,\n      status: insertSession.status || \"active\",\n      userId: insertSession.userId || null,\n      vehicleInfo: insertSession.vehicleInfo || null,\n      createdAt: new Date(),\n      lastActivity: new Date(),\n    };\n    this.chatSessions.set(id, session);\n    return session;\n  }\n\n  async getChatSession(id: string): Promise<ChatSession | undefined> {\n    return this.chatSessions.get(id);\n  }\n\n  async getUserChatSessions(userId: string): Promise<ChatSession[]> {\n    return Array.from(this.chatSessions.values()).filter(\n      (session) => session.userId === userId,\n    );\n  }\n\n  async getAllActiveChatSessions(): Promise<ChatSession[]> {\n    return Array.from(this.chatSessions.values()).filter(\n      (session) => session.status === \"active\",\n    );\n  }\n\n  async updateChatSession(id: string, updates: Partial<ChatSession>): Promise<ChatSession | undefined> {\n    const session = this.chatSessions.get(id);\n    if (!session) return undefined;\n    \n    const updatedSession = { ...session, ...updates, lastActivity: new Date() };\n    this.chatSessions.set(id, updatedSession);\n    return updatedSession;\n  }\n\n  // Message methods\n  async createMessage(insertMessage: InsertMessage): Promise<Message> {\n    const id = randomUUID();\n    const message: Message = {\n      ...insertMessage,\n      id,\n      sessionId: insertMessage.sessionId || null,\n      senderId: insertMessage.senderId || null,\n      senderType: insertMessage.senderType || null,\n      isRead: insertMessage.isRead || false,\n      createdAt: new Date(),\n    };\n    this.messages.set(id, message);\n    \n    // Update session last activity\n    if (insertMessage.sessionId) {\n      await this.updateChatSession(insertMessage.sessionId, {});\n    }\n    \n    return message;\n  }\n\n  async getSessionMessages(sessionId: string): Promise<Message[]> {\n    return Array.from(this.messages.values())\n      .filter((msg) => msg.sessionId === sessionId)\n      .sort((a, b) => a.createdAt!.getTime() - b.createdAt!.getTime());\n  }\n\n  async getAllUnreadMessages(): Promise<Message[]> {\n    return Array.from(this.messages.values()).filter(\n      (msg) => !msg.isRead && msg.senderType === \"user\",\n    );\n  }\n\n  async markMessageAsRead(messageId: string): Promise<void> {\n    const message = this.messages.get(messageId);\n    if (message) {\n      this.messages.set(messageId, { ...message, isRead: true });\n    }\n  }\n\n  async getRecentMessages(limit: number = 50): Promise<Message[]> {\n    return Array.from(this.messages.values())\n      .sort((a, b) => b.createdAt!.getTime() - a.createdAt!.getTime())\n      .slice(0, limit);\n  }\n\n  // Attachment methods\n  async createAttachment(insertAttachment: InsertAttachment): Promise<Attachment> {\n    const id = randomUUID();\n    const expiresAt = new Date();\n    expiresAt.setDate(expiresAt.getDate() + 30); // 30 days from now\n    \n    const attachment: Attachment = {\n      ...insertAttachment,\n      id,\n      messageId: insertAttachment.messageId || null,\n      uploadedAt: new Date(),\n      expiresAt,\n    };\n    this.attachments.set(id, attachment);\n    return attachment;\n  }\n\n  async getMessageAttachments(messageId: string): Promise<Attachment[]> {\n    return Array.from(this.attachments.values()).filter(\n      (attachment) => attachment.messageId === messageId\n    );\n  }\n\n  async getAttachment(id: string): Promise<Attachment | undefined> {\n    return this.attachments.get(id);\n  }\n\n  async getAttachmentByFilename(filename: string): Promise<Attachment | undefined> {\n    return Array.from(this.attachments.values()).find(\n      (attachment) => attachment.fileName === filename\n    );\n  }\n\n  async deleteAttachment(id: string): Promise<void> {\n    this.attachments.delete(id);\n  }\n\n  async getExpiredAttachments(): Promise<Attachment[]> {\n    const now = new Date();\n    return Array.from(this.attachments.values()).filter(\n      (attachment) => attachment.expiresAt! < now\n    );\n  }\n\n  async deleteExpiredAttachments(): Promise<void> {\n    const expiredAttachments = await this.getExpiredAttachments();\n    expiredAttachments.forEach(attachment => {\n      this.attachments.delete(attachment.id);\n    });\n  }\n}\n\n// PostgreSQL Storage implementation using Drizzle ORM\nexport class PostgresStorage implements IStorage {\n  async initAdminUser() {\n    const adminEmail = process.env.ADMIN_EMAIL;\n    const adminPassword = process.env.ADMIN_PASSWORD;\n    \n    if (adminEmail && adminPassword) {\n      const existingAdmin = await this.getUserByEmail(adminEmail);\n      if (!existingAdmin) {\n        const hashedPassword = await bcrypt.hash(adminPassword, 12);\n        await db.insert(users).values({\n          username: \"admin\",\n          password: hashedPassword,\n          email: adminEmail,\n          isAdmin: true,\n          hasSubscription: true,\n          isOnline: false,\n        });\n        console.log(`Admin user created with email: ${adminEmail}`);\n      }\n    }\n  }\n\n  // User methods\n  async getUser(id: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.username, username)).limit(1);\n    return result[0];\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.email, email)).limit(1);\n    return result[0];\n  }\n\n  async createUser(user: InsertUser): Promise<User> {\n    const hashedPassword = await bcrypt.hash(user.password, 12);\n    const result = await db.insert(users).values({\n      ...user,\n      password: hashedPassword,\n    }).returning();\n    return result[0];\n  }\n\n  async updateUser(id: string, updates: Partial<User>): Promise<User | undefined> {\n    const result = await db.update(users)\n      .set(updates)\n      .where(eq(users.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async getAllUsers(): Promise<User[]> {\n    return await db.select().from(users);\n  }\n\n  async verifyPassword(email: string, password: string): Promise<User | null> {\n    const user = await this.getUserByEmail(email);\n    if (!user) return null;\n    \n    const isValid = await bcrypt.compare(password, user.password);\n    return isValid ? user : null;\n  }\n\n  // Subscription methods\n  async createSubscription(subscription: InsertSubscription): Promise<Subscription> {\n    const result = await db.insert(subscriptions).values(subscription).returning();\n    \n    // Update user hasSubscription flag\n    if (subscription.userId) {\n      await db.update(users)\n        .set({ hasSubscription: true })\n        .where(eq(users.id, subscription.userId));\n    }\n    \n    return result[0];\n  }\n\n  async getUserSubscriptions(userId: string): Promise<Subscription[]> {\n    return await db.select().from(subscriptions)\n      .where(eq(subscriptions.userId, userId))\n      .orderBy(desc(subscriptions.purchasedAt));\n  }\n\n  async getAllActiveSubscriptions(): Promise<Subscription[]> {\n    return await db.select().from(subscriptions)\n      .where(eq(subscriptions.status, \"active\"));\n  }\n\n  // Chat session methods\n  async createChatSession(session: InsertChatSession): Promise<ChatSession> {\n    const result = await db.insert(chatSessions).values(session).returning();\n    return result[0];\n  }\n\n  async getChatSession(id: string): Promise<ChatSession | undefined> {\n    const result = await db.select().from(chatSessions)\n      .where(eq(chatSessions.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getUserChatSessions(userId: string): Promise<ChatSession[]> {\n    return await db.select().from(chatSessions)\n      .where(eq(chatSessions.userId, userId))\n      .orderBy(desc(chatSessions.lastActivity));\n  }\n\n  async getAllActiveChatSessions(): Promise<ChatSession[]> {\n    return await db.select().from(chatSessions)\n      .where(eq(chatSessions.status, \"active\"));\n  }\n\n  async updateChatSession(id: string, updates: Partial<ChatSession>): Promise<ChatSession | undefined> {\n    const result = await db.update(chatSessions)\n      .set(updates)\n      .where(eq(chatSessions.id, id))\n      .returning();\n    return result[0];\n  }\n\n  // Message methods\n  async createMessage(message: InsertMessage): Promise<Message> {\n    const result = await db.insert(messages).values(message).returning();\n    \n    // Update chat session lastActivity\n    if (message.sessionId) {\n      await db.update(chatSessions)\n        .set({ lastActivity: new Date() })\n        .where(eq(chatSessions.id, message.sessionId));\n    }\n    \n    return result[0];\n  }\n\n  async getSessionMessages(sessionId: string): Promise<Message[]> {\n    return await db.select().from(messages)\n      .where(eq(messages.sessionId, sessionId))\n      .orderBy(messages.createdAt);\n  }\n\n  async getAllUnreadMessages(): Promise<Message[]> {\n    return await db.select().from(messages)\n      .where(\n        and(\n          eq(messages.isRead, false),\n          eq(messages.senderType, \"user\")\n        )\n      );\n  }\n\n  async markMessageAsRead(messageId: string): Promise<void> {\n    await db.update(messages)\n      .set({ isRead: true })\n      .where(eq(messages.id, messageId));\n  }\n\n  async getRecentMessages(limit: number = 50): Promise<Message[]> {\n    return await db.select().from(messages)\n      .orderBy(desc(messages.createdAt))\n      .limit(limit);\n  }\n\n  // Attachment methods\n  async createAttachment(attachment: InsertAttachment): Promise<Attachment> {\n    const expiresAt = new Date();\n    expiresAt.setDate(expiresAt.getDate() + 30);\n    \n    const result = await db.insert(attachments).values({\n      ...attachment,\n      expiresAt,\n    }).returning();\n    return result[0];\n  }\n\n  async getMessageAttachments(messageId: string): Promise<Attachment[]> {\n    return await db.select().from(attachments)\n      .where(eq(attachments.messageId, messageId));\n  }\n\n  async getAttachment(id: string): Promise<Attachment | undefined> {\n    const result = await db.select().from(attachments)\n      .where(eq(attachments.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getAttachmentByFilename(filename: string): Promise<Attachment | undefined> {\n    const result = await db.select().from(attachments)\n      .where(eq(attachments.fileName, filename)).limit(1);\n    return result[0];\n  }\n\n  async deleteAttachment(id: string): Promise<void> {\n    await db.delete(attachments).where(eq(attachments.id, id));\n  }\n\n  async getExpiredAttachments(): Promise<Attachment[]> {\n    const now = new Date();\n    return await db.select().from(attachments)\n      .where(lt(attachments.expiresAt, now));\n  }\n\n  async deleteExpiredAttachments(): Promise<void> {\n    const now = new Date();\n    await db.delete(attachments).where(lt(attachments.expiresAt, now));\n  }\n}\n\n// Use PostgresStorage for production, MemStorage for testing\nexport const storage = process.env.NODE_ENV === 'test' \n  ? new MemStorage() \n  : new PostgresStorage();\n","size_bytes":17329},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, boolean, decimal, integer } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  email: text(\"email\"),\n  isAdmin: boolean(\"is_admin\").default(false),\n  hasSubscription: boolean(\"has_subscription\").default(false),\n  isOnline: boolean(\"is_online\").default(false),\n  lastSeen: timestamp(\"last_seen\").default(sql`now()`),\n  createdAt: timestamp(\"created_at\").default(sql`now()`),\n});\n\nexport const subscriptions = pgTable(\"subscriptions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id),\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }),\n  status: text(\"status\").default(\"active\"), // active, cancelled, expired\n  purchasedAt: timestamp(\"purchased_at\").default(sql`now()`),\n  expiresAt: timestamp(\"expires_at\"),\n});\n\nexport const chatSessions = pgTable(\"chat_sessions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id),\n  vehicleInfo: text(\"vehicle_info\"), // JSON string with vehicle details\n  status: text(\"status\").default(\"active\"), // active, closed, waiting\n  createdAt: timestamp(\"created_at\").default(sql`now()`),\n  lastActivity: timestamp(\"last_activity\").default(sql`now()`),\n});\n\nexport const messages = pgTable(\"messages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  sessionId: varchar(\"session_id\").references(() => chatSessions.id),\n  senderId: varchar(\"sender_id\").references(() => users.id),\n  senderType: text(\"sender_type\"), // user, admin, bot\n  content: text(\"content\").notNull(),\n  isRead: boolean(\"is_read\").default(false),\n  createdAt: timestamp(\"created_at\").default(sql`now()`),\n});\n\nexport const attachments = pgTable(\"attachments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  messageId: varchar(\"message_id\").references(() => messages.id),\n  fileName: text(\"file_name\").notNull(), // unique filename on server\n  originalName: text(\"original_name\").notNull(), // original filename from user\n  fileSize: integer(\"file_size\").notNull(), // size in bytes\n  mimeType: text(\"mime_type\").notNull(), // MIME type\n  filePath: text(\"file_path\").notNull(), // path on server\n  uploadedAt: timestamp(\"uploaded_at\").default(sql`now()`),\n  expiresAt: timestamp(\"expires_at\").notNull(), // auto-delete date (30 days)\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n  email: true,\n}).extend({\n  password: z.string()\n    .min(8, \"Password must be at least 8 characters long\")\n    .regex(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)/, \"Password must contain at least one lowercase letter, one uppercase letter, and one number\"),\n  email: z.string().email(\"Invalid email address\").toLowerCase(),\n  username: z.string()\n    .min(3, \"Username must be at least 3 characters long\")\n    .max(20, \"Username must be no more than 20 characters long\")\n    .regex(/^[a-zA-Z0-9_-]+$/, \"Username can only contain letters, numbers, underscores, and hyphens\")\n});\n\nexport const insertSubscriptionSchema = createInsertSchema(subscriptions).omit({\n  id: true,\n  purchasedAt: true,\n});\n\nexport const insertChatSessionSchema = createInsertSchema(chatSessions).omit({\n  id: true,\n  createdAt: true,\n  lastActivity: true,\n});\n\nexport const insertMessageSchema = createInsertSchema(messages).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertAttachmentSchema = createInsertSchema(attachments).omit({\n  id: true,\n  uploadedAt: true,\n  expiresAt: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertSubscription = z.infer<typeof insertSubscriptionSchema>;\nexport type Subscription = typeof subscriptions.$inferSelect;\nexport type InsertChatSession = z.infer<typeof insertChatSessionSchema>;\nexport type ChatSession = typeof chatSessions.$inferSelect;\nexport type InsertMessage = z.infer<typeof insertMessageSchema>;\nexport type Message = typeof messages.$inferSelect;\nexport type InsertAttachment = z.infer<typeof insertAttachmentSchema>;\nexport type Attachment = typeof attachments.$inferSelect;\n","size_bytes":4456},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { HelmetProvider } from \"react-helmet-async\";\nimport Home from \"@/pages/Home\";\nimport AdminPanel from \"@/pages/AdminPanel\";\nimport Contact from \"@/pages/Contact\";\nimport FAQ from \"@/pages/FAQ\";\nimport HowItWorks from \"@/pages/HowItWorks\";\nimport MechanicVerification from \"@/pages/MechanicVerification\";\nimport CarsAndTrucks from \"@/pages/vehicles/CarsAndTrucks\";\nimport Motorcycles from \"@/pages/vehicles/Motorcycles\";\nimport BoatsAndWatercraft from \"@/pages/vehicles/BoatsAndWatercraft\";\nimport Buses from \"@/pages/vehicles/Buses\";\nimport ConstructionEquipment from \"@/pages/vehicles/ConstructionEquipment\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/admin\" component={AdminPanel} />\n      \n      {/* Support Pages */}\n      <Route path=\"/contact\" component={Contact} />\n      <Route path=\"/faq\" component={FAQ} />\n      <Route path=\"/how-it-works\" component={HowItWorks} />\n      <Route path=\"/mechanic-verification\" component={MechanicVerification} />\n      \n      {/* Vehicle Type Pages */}\n      <Route path=\"/vehicles/cars-trucks\" component={CarsAndTrucks} />\n      <Route path=\"/vehicles/motorcycles\" component={Motorcycles} />\n      <Route path=\"/vehicles/boats-watercraft\" component={BoatsAndWatercraft} />\n      <Route path=\"/vehicles/buses\" component={Buses} />\n      <Route path=\"/vehicles/construction-equipment\" component={ConstructionEquipment} />\n      \n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <HelmetProvider>\n        <TooltipProvider>\n          <div className=\"min-h-screen bg-background text-foreground\">\n            <Router />\n          </div>\n          <Toaster />\n        </TooltipProvider>\n      </HelmetProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2166},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 220 2% 97%;\n\n  --foreground: 220 8% 15%;\n\n  --border: 220 4% 88%;\n\n  --card: 220 3% 95%;\n\n  --card-foreground: 220 8% 15%;\n\n  --card-border: 220 5% 90%;\n\n  --sidebar: 220 4% 92%;\n\n  --sidebar-foreground: 220 8% 15%;\n\n  --sidebar-border: 220 6% 87%;\n\n  --sidebar-primary: 200 95% 55%;\n\n  --sidebar-primary-foreground: 220 10% 98%;\n\n  --sidebar-accent: 220 6% 88%;\n\n  --sidebar-accent-foreground: 220 8% 15%;\n\n  --sidebar-ring: 200 95% 55%;\n\n  --popover: 220 5% 90%;\n\n  --popover-foreground: 220 8% 15%;\n\n  --popover-border: 220 7% 85%;\n\n  --primary: 200 95% 55%;\n\n  --primary-foreground: 220 10% 98%;\n\n  --secondary: 220 7% 85%;\n\n  --secondary-foreground: 220 8% 15%;\n\n  --muted: 220 6% 88%;\n\n  --muted-foreground: 220 6% 45%;\n\n  --accent: 220 8% 84%;\n\n  --accent-foreground: 220 8% 15%;\n\n  --destructive: 0 85% 55%;\n\n  --destructive-foreground: 0 10% 98%;\n\n  --input: 220 8% 78%;\n  --ring: 200 95% 55%;\n  --chart-1: 200 95% 45%;\n  --chart-2: 280 90% 55%;\n  --chart-3: 120 85% 40%;\n  --chart-4: 30 90% 50%;\n  --chart-5: 260 85% 50%;\n\n  --font-sans: Inter, Outfit, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: JetBrains Mono, Menlo, monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 2px 0px 0px hsl(220 15% 8% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(220 15% 8% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(220 15% 8% / 0.00), 0px 1px 2px -1px hsl(220 15% 8% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(220 15% 8% / 0.00), 0px 1px 2px -1px hsl(220 15% 8% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(220 15% 8% / 0.00), 0px 2px 4px -1px hsl(220 15% 8% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(220 15% 8% / 0.00), 0px 4px 6px -1px hsl(220 15% 8% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(220 15% 8% / 0.00), 0px 8px 10px -1px hsl(220 15% 8% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(220 15% 8% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 220 15% 8%;\n\n  --foreground: 220 10% 95%;\n\n  --border: 220 12% 16%;\n\n  --card: 220 15% 12%;\n\n  --card-foreground: 220 10% 95%;\n\n  --card-border: 220 12% 18%;\n\n  --sidebar: 220 15% 10%;\n\n  --sidebar-foreground: 220 10% 95%;\n\n  --sidebar-border: 220 12% 15%;\n\n  --sidebar-primary: 200 95% 55%;\n\n  --sidebar-primary-foreground: 220 10% 98%;\n\n  --sidebar-accent: 220 12% 16%;\n\n  --sidebar-accent-foreground: 220 10% 95%;\n\n  --sidebar-ring: 200 95% 55%;\n\n  --popover: 220 12% 14%;\n\n  --popover-foreground: 220 10% 95%;\n\n  --popover-border: 220 12% 20%;\n\n  --primary: 200 95% 55%;\n\n  --primary-foreground: 220 10% 98%;\n\n  --secondary: 220 12% 18%;\n\n  --secondary-foreground: 220 10% 95%;\n\n  --muted: 220 12% 16%;\n\n  --muted-foreground: 220 8% 70%;\n\n  --accent: 220 12% 14%;\n\n  --accent-foreground: 220 10% 95%;\n\n  --destructive: 0 85% 55%;\n\n  --destructive-foreground: 0 10% 98%;\n\n  --input: 220 12% 22%;\n  --ring: 200 95% 55%;\n  --chart-1: 200 95% 65%;\n  --chart-2: 280 90% 75%;\n  --chart-3: 120 85% 60%;\n  --chart-4: 30 90% 70%;\n  --chart-5: 260 85% 70%;\n\n  --shadow-2xs: 0px 2px 0px 0px hsl(220 15% 8% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(220 15% 8% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(220 15% 8% / 0.00), 0px 1px 2px -1px hsl(220 15% 8% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(220 15% 8% / 0.00), 0px 1px 2px -1px hsl(220 15% 8% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(220 15% 8% / 0.00), 0px 2px 4px -1px hsl(220 15% 8% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(220 15% 8% / 0.00), 0px 4px 6px -1px hsl(220 15% 8% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(220 15% 8% / 0.00), 0px 8px 10px -1px hsl(220 15% 8% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(220 15% 8% / 0.00);\n\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":9844},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/ChatInterface.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Send, Clock, Shield, Paperclip, Image, Video, FileText } from \"lucide-react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { cn } from \"@/lib/utils\";\n\ninterface Attachment {\n  id: string;\n  fileName: string;\n  originalName: string;\n  fileSize: number;\n  mimeType: string;\n}\n\ninterface Message {\n  id: string;\n  content: string;\n  senderType: \"user\" | \"admin\";\n  createdAt: string;\n  attachments?: Attachment[];\n}\n\ninterface ChatInterfaceProps {\n  hasAccess: boolean;\n  vehicleInfo?: any;\n  sessionId: string;\n  userId: string;\n  username?: string;\n  className?: string;\n}\n\nexport default function ChatInterface({ \n  hasAccess, \n  vehicleInfo, \n  sessionId,\n  userId,\n  username,\n  className \n}: ChatInterfaceProps) {\n  const [inputValue, setInputValue] = useState(\"\");\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const inputRef = useRef<HTMLInputElement>(null);\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  // Get messages for this chat session\n  const { data: messages = [], refetch: refetchMessages } = useQuery<Message[]>({\n    queryKey: [\"/api/chat/sessions\", sessionId, \"messages\"],\n    enabled: !!sessionId && hasAccess,\n    refetchInterval: 2000, // Poll every 2 seconds for new messages\n  });\n\n  // Send message mutation\n  const sendMessageMutation = useMutation({\n    mutationFn: async (content: string) => {\n      const response = await apiRequest(\"POST\", `/api/chat/sessions/${sessionId}/messages`, {\n        content\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      setInputValue(\"\");\n      refetchMessages();\n      // Keep focus on input after sending\n      setTimeout(() => inputRef.current?.focus(), 100);\n    },\n    onError: () => {\n      toast({\n        title: \"Error sending message\",\n        description: \"Please try again later\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // File upload mutation\n  const uploadFileMutation = useMutation({\n    mutationFn: async (file: File) => {\n      const formData = new FormData();\n      formData.append('file', file);\n      \n      const response = await fetch(`/api/chat/sessions/${sessionId}/upload`, {\n        method: 'POST',\n        body: formData,\n        credentials: 'include'\n      });\n      \n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || 'Upload failed');\n      }\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      setSelectedFile(null);\n      if (fileInputRef.current) {\n        fileInputRef.current.value = '';\n      }\n      refetchMessages();\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"File upload failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Play notification sound for new admin messages\n  const prevMessagesCount = useRef(messages.length);\n  useEffect(() => {\n    if (messages.length > prevMessagesCount.current) {\n      const newMessages = messages.slice(prevMessagesCount.current);\n      const hasAdminMessage = newMessages.some(msg => msg.senderType === \"admin\");\n      \n      if (hasAdminMessage) {\n        // Play notification sound\n        const audio = new Audio('data:audio/wav;base64,UklGRnoGAABXQVZFZm10IBAAAAABAAEAQB8AAEAfAAABAAgAZGF0YQoGAACBhYqFbF1fdJivrJBhNjVgodDbq2EcBj+a2/LDciUFLIHO8tiJNwgZaLvt559NEAxQp+PwtmMcBjiR1/LMeSwFJHfH8N2QQAoUXrTp66hVFApGn+DyvmwhBSuBzvLZiTYIGmm98OScTgwOUKfk77RgGgU7k9r0yHMpBSh+zPLaizsKGGS56+mmUBELTKXh8bllHAU2jdXz0n0uBSqAzvLajDkIGGe88eyeUQ0PUqjl8LJeGQQ8lNv0yHUpBSh+zPDciz0KF2S56+mjUhEKS6Xg8bllHAU3jtb00oA');\n        audio.volume = 0.3;\n        audio.play().catch(err => console.log('Audio play failed:', err));\n      }\n    }\n    prevMessagesCount.current = messages.length;\n  }, [messages]);\n\n  // Auto-scroll to bottom when new messages arrive\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  }, [messages]);\n\n  const sendMessage = async () => {\n    if (!inputValue.trim() || !hasAccess) return;\n    sendMessageMutation.mutate(inputValue.trim());\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === \"Enter\" && !e.shiftKey) {\n      e.preventDefault();\n      sendMessage();\n    }\n  };\n\n  // Focus input on mount\n  useEffect(() => {\n    if (hasAccess) {\n      inputRef.current?.focus();\n    }\n  }, [hasAccess]);\n\n  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    // Check file type\n    const allowedTypes = [\n      'image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/webp',\n      'video/mp4', 'video/webm', 'video/quicktime', 'video/x-msvideo'\n    ];\n    \n    if (!allowedTypes.includes(file.type)) {\n      toast({\n        title: \"Invalid file type\",\n        description: \"Only images and videos are allowed\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Check file size\n    const isImage = file.type.startsWith('image/');\n    const maxSize = isImage ? 30 * 1024 * 1024 : 150 * 1024 * 1024; // 30MB for images, 150MB for videos\n    \n    if (file.size > maxSize) {\n      toast({\n        title: \"File too large\",\n        description: `Maximum size is ${isImage ? '30MB' : '150MB'} for ${isImage ? 'images' : 'videos'}`,\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setSelectedFile(file);\n    uploadFileMutation.mutate(file);\n  };\n\n  const formatFileSize = (bytes: number) => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  const getFileIcon = (mimeType: string) => {\n    if (mimeType.startsWith('image/')) return <Image className=\"w-4 h-4\" />;\n    if (mimeType.startsWith('video/')) return <Video className=\"w-4 h-4\" />;\n    return <FileText className=\"w-4 h-4\" />;\n  };\n\n  const renderAttachment = (attachment: Attachment) => {\n    const isImage = attachment.mimeType.startsWith('image/');\n    const isVideo = attachment.mimeType.startsWith('video/');\n\n    if (isImage) {\n      return (\n        <div className=\"mt-2\">\n          <img \n            src={`/api/uploads/${attachment.fileName}`}\n            alt={attachment.originalName}\n            className=\"max-w-xs rounded-lg border\"\n            style={{ maxHeight: '200px' }}\n          />\n          <p className=\"text-xs text-muted-foreground mt-1\">\n            {attachment.originalName} ({formatFileSize(attachment.fileSize)})\n          </p>\n        </div>\n      );\n    }\n\n    if (isVideo) {\n      return (\n        <div className=\"mt-2\">\n          <video \n            src={`/api/uploads/${attachment.fileName}`}\n            controls\n            className=\"max-w-xs rounded-lg border\"\n            style={{ maxHeight: '200px' }}\n          />\n          <p className=\"text-xs text-muted-foreground mt-1\">\n            {attachment.originalName} ({formatFileSize(attachment.fileSize)})\n          </p>\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"mt-2 p-2 border rounded-lg flex items-center space-x-2\">\n        {getFileIcon(attachment.mimeType)}\n        <div className=\"flex-1\">\n          <p className=\"text-sm font-medium\">{attachment.originalName}</p>\n          <p className=\"text-xs text-muted-foreground\">{formatFileSize(attachment.fileSize)}</p>\n        </div>\n      </div>\n    );\n  };\n\n  const formatTimestamp = (createdAt: string) => {\n    return new Date(createdAt).toLocaleTimeString(\"en-US\", { \n      hour: '2-digit', \n      minute: '2-digit' \n    });\n  };\n\n  if (!hasAccess) {\n    return (\n      <Card className={cn(\"h-full\", className)}>\n        <CardHeader>\n          <CardTitle className=\"flex items-center justify-between\">\n            <span>Chat with Mechanic</span>\n            <Badge variant=\"outline\">Access Required</Badge>\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"h-full flex flex-col items-center justify-center\">\n          <div className=\"text-center space-y-4\">\n            <Shield className=\"w-12 h-12 mx-auto text-muted-foreground\" />\n            <div>\n              <h3 className=\"font-semibold mb-2\">Get Chat Access</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                For just $9.99 get 30-day access to direct chat with an experienced mechanic.\n              </p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className={cn(\"h-full flex flex-col\", className)}>\n      <CardContent className=\"flex-1 flex flex-col p-0 overflow-hidden\">\n        {/* Vehicle Info Header */}\n        {vehicleInfo && (\n          <div className=\"border-b p-4 bg-muted/30 flex-shrink-0\">\n            <div className=\"text-sm\">\n              <span className=\"font-medium\">Vehicle:</span> {vehicleInfo.year} {vehicleInfo.make} {vehicleInfo.model}\n              {vehicleInfo.type && <span className=\"ml-2 text-muted-foreground\">({vehicleInfo.type})</span>}\n            </div>\n            {vehicleInfo.problem && (\n              <div className=\"text-sm mt-1\">\n                <span className=\"font-medium\">Issue:</span> {vehicleInfo.problem}\n              </div>\n            )}\n          </div>\n        )}\n        <div className=\"flex-1 overflow-y-auto px-4 py-4 space-y-4 min-h-0\">\n          {messages.length === 0 ? (\n            <div className=\"text-center text-muted-foreground py-8\">\n              <div className=\"space-y-2\">\n                <p>Hello! I'm ready to help with your vehicle.</p>\n                <p className=\"text-sm\">Describe your problem and I'll try to respond as quickly as possible.</p>\n              </div>\n            </div>\n          ) : (\n            messages.map((message) => (\n              <div\n                key={message.id}\n                className={cn(\n                  \"flex\",\n                  message.senderType === \"user\" ? \"justify-end\" : \"justify-start\"\n                )}\n              >\n                <div\n                  className={cn(\n                    \"max-w-[80%] rounded-lg px-4 py-2 space-y-1\",\n                    message.senderType === \"user\"\n                      ? \"bg-gradient-to-r from-purple-600 to-purple-700 text-white\"\n                      : \"bg-gradient-to-r from-blue-600 to-blue-700 text-white\"\n                  )}\n                >\n                  <div className=\"flex items-center space-x-2\">\n                    <Avatar className=\"w-6 h-6\">\n                      <AvatarFallback className=\"text-xs bg-white/20 text-white\">\n                        {message.senderType === \"user\" ? (username?.charAt(0).toUpperCase() || \"U\") : \"M\"}\n                      </AvatarFallback>\n                    </Avatar>\n                    <span className=\"text-xs font-medium\">\n                      {message.senderType === \"user\" ? (username || \"User\") : \"Mechanic\"}\n                    </span>\n                    <span className=\"text-xs opacity-70 flex items-center ml-auto\">\n                      <Clock className=\"w-3 h-3 mr-1\" />\n                      {formatTimestamp(message.createdAt)}\n                    </span>\n                  </div>\n                  <p className=\"text-sm\">{message.content}</p>\n                  {message.attachments && message.attachments.map((attachment) => (\n                    <div key={attachment.id}>\n                      {renderAttachment(attachment)}\n                    </div>\n                  ))}\n                </div>\n              </div>\n            ))\n          )}\n          <div ref={messagesEndRef} />\n        </div>\n        \n        <div className=\"border-t bg-background p-4 flex-shrink-0\">\n          <input\n            ref={fileInputRef}\n            type=\"file\"\n            accept=\"image/*,video/*\"\n            onChange={handleFileSelect}\n            className=\"hidden\"\n            data-testid=\"input-file-upload\"\n          />\n          <div className=\"flex space-x-2\">\n            <Button\n              type=\"button\"\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={() => fileInputRef.current?.click()}\n              disabled={uploadFileMutation.isPending}\n              data-testid=\"button-file-upload\"\n            >\n              <Paperclip className=\"w-4 h-4\" />\n            </Button>\n            <Input\n              ref={inputRef}\n              value={inputValue}\n              onChange={(e) => setInputValue(e.target.value)}\n              onKeyPress={handleKeyPress}\n              placeholder=\"Type your message...\"\n              disabled={sendMessageMutation.isPending}\n              className=\"flex-1\"\n              data-testid=\"input-chat-message\"\n            />\n            <Button \n              onClick={sendMessage}\n              disabled={!inputValue.trim() || sendMessageMutation.isPending}\n              size=\"icon\"\n              data-testid=\"button-send-message\"\n            >\n              <Send className=\"w-4 h-4\" />\n            </Button>\n          </div>\n          {uploadFileMutation.isPending && (\n            <div className=\"mt-2 text-sm text-muted-foreground\">\n              Uploading file...\n            </div>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":13840},"client/src/components/Footer.tsx":{"content":"import { Link } from \"wouter\";\nimport { MessageCircle, Mail, Shield, Clock } from \"lucide-react\";\n\nexport default function Footer() {\n  return (\n    <footer className=\"bg-muted/30 border-t\">\n      <div className=\"container mx-auto px-4 py-12\">\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8\">\n          {/* Brand */}\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"flex items-center justify-center w-8 h-8 rounded-lg bg-gradient-to-br from-primary to-warning\">\n                <MessageCircle className=\"w-4 h-4 text-primary-foreground\" />\n              </div>\n              <span className=\"text-lg font-bold bg-gradient-to-r from-primary to-warning bg-clip-text text-transparent\">\n                ChatWithMechanic\n              </span>\n            </div>\n            <p className=\"text-sm text-muted-foreground\">\n              Professional automotive advice for all vehicles. Get expert help from certified mechanics online.\n            </p>\n            <div className=\"flex items-center space-x-2 text-sm\">\n              <Mail className=\"w-4 h-4 text-primary\" />\n              <a href=\"mailto:support@chatwithmechanic.com\" className=\"text-muted-foreground hover:text-primary\" data-testid=\"link-footer-email\">\n                support@chatwithmechanic.com\n              </a>\n            </div>\n          </div>\n\n          {/* Services */}\n          <div>\n            <h3 className=\"font-semibold mb-4\">Vehicle Types</h3>\n            <ul className=\"space-y-2 text-sm text-muted-foreground\">\n              <li><Link href=\"/vehicles/cars-trucks\" className=\"hover:text-primary\" data-testid=\"link-footer-cars-trucks\">Cars & Trucks</Link></li>\n              <li><Link href=\"/vehicles/motorcycles\" className=\"hover:text-primary\" data-testid=\"link-footer-motorcycles\">Motorcycles</Link></li>\n              <li><Link href=\"/vehicles/boats-watercraft\" className=\"hover:text-primary\" data-testid=\"link-footer-boats\">Boats & Watercraft</Link></li>\n              <li><Link href=\"/vehicles/buses\" className=\"hover:text-primary\" data-testid=\"link-footer-buses\">Buses</Link></li>\n              <li><Link href=\"/vehicles/construction-equipment\" className=\"hover:text-primary\" data-testid=\"link-footer-construction\">Construction Equipment</Link></li>\n            </ul>\n          </div>\n\n          {/* Support */}\n          <div>\n            <h3 className=\"font-semibold mb-4\">Support</h3>\n            <ul className=\"space-y-2 text-sm text-muted-foreground\">\n              <li><Link href=\"/contact\" className=\"hover:text-primary\" data-testid=\"link-footer-contact\">Contact Us</Link></li>\n              <li><Link href=\"/faq\" className=\"hover:text-primary\" data-testid=\"link-footer-faq\">FAQ</Link></li>\n              <li><Link href=\"/how-it-works\" className=\"hover:text-primary\" data-testid=\"link-footer-how-it-works\">How It Works</Link></li>\n              <li><Link href=\"/mechanic-verification\" className=\"hover:text-primary\" data-testid=\"link-footer-verification\">Mechanic Verification</Link></li>\n            </ul>\n          </div>\n\n          {/* Features */}\n          <div>\n            <h3 className=\"font-semibold mb-4\">Features</h3>\n            <div className=\"space-y-3\">\n              <div className=\"flex items-center space-x-2 text-sm\">\n                <Clock className=\"w-4 h-4 text-success\" />\n                <span className=\"text-muted-foreground\">24/7 Available</span>\n              </div>\n              <div className=\"flex items-center space-x-2 text-sm\">\n                <Shield className=\"w-4 h-4 text-primary\" />\n                <span className=\"text-muted-foreground\">Certified Mechanics</span>\n              </div>\n              <div className=\"flex items-center space-x-2 text-sm\">\n                <MessageCircle className=\"w-4 h-4 text-warning\" />\n                <span className=\"text-muted-foreground\">Instant Responses</span>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"border-t mt-8 pt-8 flex flex-col md:flex-row justify-between items-center text-sm text-muted-foreground\">\n          <div>\n            © 2024 ChatWithMechanic.com. All rights reserved.\n          </div>\n          <div className=\"flex space-x-6 mt-4 md:mt-0\">\n            <Link href=\"/\" className=\"hover:text-primary\">Privacy Policy</Link>\n            <Link href=\"/\" className=\"hover:text-primary\">Terms of Service</Link>\n            <Link href=\"/\" className=\"hover:text-primary\">Refund Policy</Link>\n          </div>\n        </div>\n      </div>\n    </footer>\n  );\n}","size_bytes":4587},"client/src/components/Header.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Settings, LogOut, User, MessageCircle } from \"lucide-react\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\n\ninterface HeaderProps {\n  user?: { username: string; email: string; avatar?: string; isAdmin?: boolean; subscriptionDaysLeft?: number } | null;\n  onLogin?: () => void;\n  onLogout?: () => void;\n  onOpenAdmin?: () => void;\n}\n\nexport default function Header({ user, onLogin, onLogout, onOpenAdmin }: HeaderProps) {\n  const [location, navigate] = useLocation();\n\n  const handleHomeClick = () => {\n    if (location === '/') {\n      // If already on homepage, scroll to top\n      window.scrollTo({ top: 0, behavior: 'smooth' });\n    } else {\n      // Navigate to homepage\n      navigate('/');\n    }\n  };\n\n  const handleChatClick = () => {\n    if (location === '/') {\n      // If on homepage, scroll to vehicle selector section\n      const vehicleSection = document.getElementById('vehicle-selector-section');\n      if (vehicleSection) {\n        vehicleSection.scrollIntoView({ behavior: 'smooth' });\n      }\n    } else {\n      // Navigate to homepage first, then scroll to vehicle selector\n      navigate('/');\n      setTimeout(() => {\n        const vehicleSection = document.getElementById('vehicle-selector-section');\n        if (vehicleSection) {\n          vehicleSection.scrollIntoView({ behavior: 'smooth' });\n        }\n      }, 100);\n    }\n  };\n\n  return (\n    <header className=\"sticky top-0 z-50 w-full border-b bg-background/80 backdrop-blur-md\">\n      <div className=\"container mx-auto flex h-16 items-center justify-between px-4\">\n        <button \n          onClick={handleHomeClick}\n          className=\"flex items-center space-x-2 hover-elevate rounded-lg px-2 py-1 cursor-pointer\"\n          data-testid=\"button-logo\"\n        >\n          <div className=\"flex items-center justify-center w-8 h-8 rounded-lg bg-gradient-to-br from-primary to-warning\">\n            <MessageCircle className=\"w-4 h-4 text-primary-foreground\" />\n          </div>\n          <span className=\"text-xl font-bold bg-gradient-to-r from-primary to-warning bg-clip-text text-transparent\">\n            ChatWithMechanic\n          </span>\n        </button>\n\n        <nav className=\"hidden md:flex items-center space-x-6\">\n          <button \n            onClick={handleHomeClick} \n            className=\"text-sm font-medium transition-colors hover:text-primary cursor-pointer\"\n            data-testid=\"nav-home\"\n          >\n            Home\n          </button>\n          <button \n            onClick={handleChatClick} \n            className=\"text-sm font-medium transition-colors hover:text-primary cursor-pointer\"\n            data-testid=\"nav-chat\"\n          >\n            Chat\n          </button>\n          <Link href=\"/contact\" className=\"text-sm font-medium transition-colors hover:text-primary\">\n            Contact\n          </Link>\n        </nav>\n\n        <div className=\"flex items-center space-x-2\">\n          {user ? (\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button variant=\"ghost\" className=\"relative h-9 w-9 rounded-full\" data-testid=\"button-user-menu\">\n                  <Avatar className=\"h-9 w-9\">\n                    <AvatarImage src={user.avatar} alt={user.username} />\n                    <AvatarFallback>{user.username?.charAt(0).toUpperCase() || 'U'}</AvatarFallback>\n                  </Avatar>\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent className=\"w-56\" align=\"end\">\n                <DropdownMenuItem className=\"flex items-center\" data-testid=\"text-user-email\">\n                  <User className=\"mr-2 h-4 w-4\" />\n                  {user.email}\n                </DropdownMenuItem>\n                {user.subscriptionDaysLeft !== undefined && (\n                  <DropdownMenuItem className=\"flex items-center justify-between\" data-testid=\"text-subscription-days\">\n                    <span className=\"text-sm text-muted-foreground\">Subscription</span>\n                    <span className={`text-sm font-medium ${user.subscriptionDaysLeft > 7 ? 'text-success' : user.subscriptionDaysLeft > 0 ? 'text-warning' : 'text-destructive'}`}>\n                      {user.subscriptionDaysLeft > 0 ? `${user.subscriptionDaysLeft} days left` : 'Expired'}\n                    </span>\n                  </DropdownMenuItem>\n                )}\n                {user.isAdmin && (\n                  <>\n                    <DropdownMenuSeparator />\n                    <DropdownMenuItem asChild data-testid=\"button-admin\">\n                      <Link href=\"/admin\" className=\"flex items-center\">\n                        <Settings className=\"mr-2 h-4 w-4\" />\n                        Admin Panel\n                      </Link>\n                    </DropdownMenuItem>\n                  </>\n                )}\n                <DropdownMenuSeparator />\n                <DropdownMenuItem onClick={onLogout} data-testid=\"button-logout\">\n                  <LogOut className=\"mr-2 h-4 w-4\" />\n                  Sign out\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          ) : (\n            <Button onClick={onLogin} data-testid=\"button-login\">\n              Sign In\n            </Button>\n          )}\n        </div>\n      </div>\n    </header>\n  );\n}","size_bytes":5573},"client/src/components/HeroSection.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { MessageCircle, Wrench, Clock, Shield, Star } from \"lucide-react\";\nimport heroImage from \"@assets/stock_images/mechanic_garage_work_4757d5e8.jpg\";\nimport { useMechanicsCount } from \"@/hooks/useMechanicsCount\";\n\ninterface HeroSectionProps {\n  onStartChat?: () => void;\n  onGetStarted?: () => void;\n}\n\nexport default function HeroSection({ onStartChat, onGetStarted }: HeroSectionProps) {\n  const onlineMechanicsCount = useMechanicsCount();\n  return (\n    <section className=\"relative min-h-screen flex items-center justify-center overflow-hidden\">\n      {/* Background with gradient overlay */}\n      <div className=\"absolute inset-0 z-0\">\n        <img \n          src={heroImage} \n          alt=\"Traditional automotive garage workshop\" \n          className=\"w-full h-full object-cover\"\n        />\n        <div className=\"absolute inset-0 bg-gradient-to-br from-background/90 via-background/80 to-background/70\" />\n        <div className=\"absolute inset-0 bg-gradient-to-t from-background via-transparent to-transparent\" />\n      </div>\n\n      <div className=\"relative z-10 container mx-auto px-4 text-center\">\n        <div className=\"max-w-4xl mx-auto space-y-8\">\n          {/* Main Headline */}\n          <div className=\"space-y-4\">\n            <Badge className=\"bg-primary/20 text-primary border-primary/30 mb-4\" data-testid=\"badge-featured\">\n              <Star className=\"w-3 h-3 mr-1\" />\n              24/7 Professional Support\n            </Badge>\n            <h1 className=\"text-4xl md:text-6xl font-bold leading-tight\">\n              Chat With Professional\n              <span className=\"block bg-gradient-to-r from-primary via-warning to-primary bg-clip-text text-transparent\">\n                Mechanics Online\n              </span>\n            </h1>\n            <p className=\"text-xl md:text-2xl text-muted-foreground max-w-2xl mx-auto\">\n              Get instant expert advice for cars, motorcycles, boats, buses, and construction equipment. \n              Available 24/7 from certified professionals.\n            </p>\n          </div>\n\n          {/* Value Proposition Cards */}\n          <div className=\"grid md:grid-cols-3 gap-6 my-12\">\n            <Card className=\"bg-card/50 backdrop-blur border-border/50 hover-elevate\">\n              <CardContent className=\"p-6 text-center\">\n                <MessageCircle className=\"w-8 h-8 text-primary mx-auto mb-3\" />\n                <h3 className=\"font-semibold mb-2\">Instant Responses</h3>\n                <p className=\"text-sm text-muted-foreground\">Real-time chat with expert mechanics</p>\n              </CardContent>\n            </Card>\n            <Card className=\"bg-card/50 backdrop-blur border-border/50 hover-elevate\">\n              <CardContent className=\"p-6 text-center\">\n                <Wrench className=\"w-8 h-8 text-success mx-auto mb-3\" />\n                <h3 className=\"font-semibold mb-2\">All Vehicles</h3>\n                <p className=\"text-sm text-muted-foreground\">Cars, bikes, boats, construction equipment</p>\n              </CardContent>\n            </Card>\n            <Card className=\"bg-card/50 backdrop-blur border-border/50 hover-elevate\">\n              <CardContent className=\"p-6 text-center\">\n                <Shield className=\"w-8 h-8 text-warning mx-auto mb-3\" />\n                <h3 className=\"font-semibold mb-2\">Certified Experts</h3>\n                <p className=\"text-sm text-muted-foreground\">Licensed professional mechanics</p>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Main CTA */}\n          <div className=\"space-y-6\">\n            <div className=\"bg-gradient-to-r from-primary/20 to-warning/20 backdrop-blur rounded-2xl p-8 border border-primary/30\">\n              <div className=\"flex items-center justify-center space-x-2 mb-4\">\n                <Clock className=\"w-5 h-5 text-success\" />\n                <span className=\"text-success font-medium\" data-testid=\"text-mechanics-online-count\">{onlineMechanicsCount} mechanics online now</span>\n              </div>\n              <div className=\"space-y-4\">\n                <div className=\"text-3xl font-bold\">\n                  Only <span className=\"text-primary\">$9.99</span>\n                  <span className=\"text-lg font-normal text-muted-foreground ml-2\">for unlimited chat access</span>\n                </div>\n                <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n                  <Button \n                    size=\"lg\" \n                    className=\"bg-gradient-to-r from-primary to-warning hover:from-primary/90 hover:to-warning/90 text-primary-foreground font-semibold px-8 py-3\"\n                    onClick={onStartChat}\n                    data-testid=\"button-start-chat\"\n                  >\n                    Start Chatting Now\n                  </Button>\n                  <Button \n                    size=\"lg\" \n                    variant=\"outline\" \n                    className=\"backdrop-blur border-primary/30 hover:bg-primary/10\"\n                    onClick={onGetStarted}\n                    data-testid=\"button-learn-more\"\n                  >\n                    Learn More\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Trust Indicators */}\n          <div className=\"flex items-center justify-center space-x-8 text-sm text-muted-foreground\">\n            <div className=\"flex items-center space-x-1\">\n              <Shield className=\"w-4 h-4\" />\n              <span>Secure Payment</span>\n            </div>\n            <div className=\"flex items-center space-x-1\">\n              <Clock className=\"w-4 h-4\" />\n              <span>24/7 Available</span>\n            </div>\n            <div className=\"flex items-center space-x-1\">\n              <Star className=\"w-4 h-4\" />\n              <span>Expert Verified</span>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":6076},"client/src/components/OnlineMechanics.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Circle } from \"lucide-react\";\nimport { useMechanicsCount } from \"@/hooks/useMechanicsCount\";\n\n// Pool of realistic usernames that people actually use\nconst MECHANIC_POOL = [\n  \"alex2023\", \"mikesmith\", \"sarah_j\", \"johnnyboy\", \"lisa94\", \"davidk\",\n  \"jennifer88\", \"tomcat\", \"jessicab\", \"matty\", \"samantha\", \"robertj\",\n  \"emily22\", \"chrisw\", \"amanda99\", \"nickm\", \"stephh\", \"tylerg\",\n  \"ashley77\", \"brandonp\", \"nicole_c\", \"zachary\", \"kayla23\", \"anthonym\",\n  \"brittany\", \"joshd\", \"megan89\", \"kevins\", \"lindsey\", \"andrewt\",\n  \"rachael\", \"kyle94\", \"courtney\", \"ryanb\", \"ericka\", \"justinp\",\n  \"danielle\", \"adamw\", \"heather91\", \"seanm\", \"kristen\", \"coryj\",\n  \"shadowhunter\", \"nightwolf\", \"stormking\", \"dragonfly\", \"moonlight\", \"firestorm\",\n  \"thunderbolt\", \"wildcats\", \"steelwolf\", \"ironman77\", \"spidey\", \"batman2\",\n  \"superman94\", \"wonder_woman\", \"flash23\", \"greenlight\", \"aqua88\", \"cyber1\",\n  \"wolverine\", \"deadpool23\", \"captain99\", \"ironmaiden\", \"blackwidow\", \"hawkeye1\",\n  \"daredevil\", \"punisher\", \"ghostrider\", \"blade88\", \"gambit2\", \"rogue23\"\n];\n\n\ninterface Mechanic {\n  id: string;\n  username: string;\n  responseTime: string;\n  isOnline: boolean;\n}\n\ninterface OnlineMechanicsProps {\n  className?: string;\n}\n\nexport default function OnlineMechanics({ className }: OnlineMechanicsProps) {\n  const [mechanics, setMechanics] = useState<Mechanic[]>([]);\n  const onlineCount = useMechanicsCount();\n\n  // Generate random mechanics list that matches the global online count\n  useEffect(() => {\n    const generateMechanics = () => {\n      const totalMechanics = Math.max(onlineCount + 2, 10); // Always show a few more than online count\n      const shuffled = [...MECHANIC_POOL].sort(() => Math.random() - 0.5);\n      const selected = shuffled.slice(0, totalMechanics);\n      \n      const newMechanics = selected.map((username, index) => ({\n        id: `mech-${index}`,\n        username,\n        responseTime: `${Math.floor(Math.random() * 3) + 1}-${Math.floor(Math.random() * 5) + 3} min`,\n        isOnline: index < onlineCount // First N mechanics are online to match global count\n      }));\n      \n      setMechanics(newMechanics);\n    };\n\n    generateMechanics();\n    \n    // Update mechanics every 2-4 minutes\n    const interval = setInterval(generateMechanics, (Math.random() * 120 + 120) * 1000);\n    \n    return () => clearInterval(interval);\n  }, [onlineCount]); // Regenerate when online count changes\n\n  return (\n    <Card className={className}>\n      <CardHeader>\n        <CardTitle className=\"flex items-center justify-between\">\n          <span>Available Mechanics</span>\n          <Badge className=\"bg-success/20 text-success border-success/30\" data-testid=\"badge-online-count\">\n            <Circle className=\"w-2 h-2 mr-1 fill-current\" />\n            {onlineCount} Online\n          </Badge>\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-3 max-h-96 overflow-y-auto\">\n          {mechanics.map((mechanic) => (\n            <div \n              key={mechanic.id} \n              className=\"flex items-center justify-between p-3 rounded-lg bg-muted/30 hover-elevate\"\n              data-testid={`mechanic-${mechanic.id}`}\n            >\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"relative\">\n                  <Avatar className=\"h-8 w-8\">\n                    <AvatarFallback className=\"text-xs\">\n                      {mechanic.username.substring(0, 2).toUpperCase()}\n                    </AvatarFallback>\n                  </Avatar>\n                  {mechanic.isOnline && (\n                    <div className=\"absolute -bottom-0.5 -right-0.5 w-3 h-3 bg-success rounded-full border-2 border-background\" />\n                  )}\n                </div>\n                <div>\n                  <div className=\"font-medium text-sm\" data-testid={`text-username-${mechanic.id}`}>\n                    {mechanic.username}\n                  </div>\n                </div>\n              </div>\n              <div className=\"text-right\">\n                <div className=\"text-xs text-muted-foreground\">\n                  Response: {mechanic.responseTime}\n                </div>\n                <Badge \n                  variant={mechanic.isOnline ? \"default\" : \"secondary\"}\n                  className={mechanic.isOnline ? \"bg-success/20 text-success border-success/30\" : \"\"}\n                >\n                  {mechanic.isOnline ? \"Online\" : \"Busy\"}\n                </Badge>\n              </div>\n            </div>\n          ))}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":4806},"client/src/components/PaymentModal.tsx":{"content":"import React, { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { CreditCard, Shield, Clock, CheckCircle, Star, User, Key } from \"lucide-react\";\nimport { SiPaypal } from \"react-icons/si\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport PayPalButton from \"@/components/PayPalButton\";\n\ninterface PaymentModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  onPaymentSuccess?: (user: { id: string; name: string; email: string; sessionId: string }) => void;\n}\n\nexport default function PaymentModal({ open, onOpenChange, onPaymentSuccess }: PaymentModalProps) {\n  const [step, setStep] = useState(\"payment\");\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [paymentMethod, setPaymentMethod] = useState<\"card\" | \"paypal\">(\"card\");\n  \n  // Payment form fields\n  const [cardNumber, setCardNumber] = useState(\"\");\n  const [expiryDate, setExpiryDate] = useState(\"\");\n  const [cvv, setCvv] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  \n  // Account setup fields\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  \n  const { toast } = useToast();\n\n  // Create user and subscription mutation\n  const createAccountMutation = useMutation({\n    mutationFn: async (accountData: { username: string; email: string; password: string }) => {\n      try {\n        // Create user account\n        const userResponse = await apiRequest(\"POST\", \"/api/users/register\", accountData);\n        const user = await userResponse.json();\n        \n        // Create subscription (30 days) - backend uses session.userId\n        const subscriptionResponse = await apiRequest(\"POST\", \"/api/subscriptions\", {\n          amount: \"9.99\"\n        });\n        await subscriptionResponse.json();\n        \n        // Create chat session - backend uses session.userId  \n        const sessionResponse = await apiRequest(\"POST\", \"/api/chat/sessions\", {\n          vehicleInfo: {}\n        });\n        const session = await sessionResponse.json();\n        \n        return { user: user, sessionId: session.id };\n      } catch (error) {\n        console.error('Mutation error:', error);\n        throw error;\n      }\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Account created successfully!\",\n        description: \"You now have 30-day access to chat with a mechanic.\",\n      });\n      \n      if (onPaymentSuccess && data) {\n        onPaymentSuccess({\n          id: data.user.id,\n          name: data.user.username,\n          email: data.user.email,\n          sessionId: data.sessionId\n        });\n      }\n      \n      // Reset modal\n      resetModal();\n      onOpenChange(false);\n    },\n    onError: (error: any) => {\n      console.error('Account creation error:', error);\n      toast({\n        title: \"Account creation error\",\n        description: error.message || \"Please try again later\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handlePayment = async () => {\n    if (!email || !cardNumber || !expiryDate || !cvv) {\n      toast({\n        title: \"Fill all fields\",\n        description: \"All fields are required\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsProcessing(true);\n    \n    // Simulate payment processing\n    await new Promise(resolve => setTimeout(resolve, 2000));\n    \n    setIsProcessing(false);\n    setStep(\"account\");\n    \n    toast({\n      title: \"Payment successful!\",\n      description: \"Now create your account\",\n    });\n  };\n\n  const handlePayPalSuccess = (data: any) => {\n    console.log(\"PayPal payment successful:\", data);\n    \n    toast({\n      title: \"Payment successful!\",\n      description: \"Now create your account\",\n    });\n    \n    setStep(\"account\");\n  };\n\n  const handlePayPalError = (error: any) => {\n    console.error(\"PayPal payment error:\", error);\n    \n    toast({\n      title: \"Payment failed\",\n      description: \"Please try again or use a different payment method\",\n      variant: \"destructive\",\n    });\n  };\n\n  const handleAccountSetup = () => {\n    if (!username || !password || !confirmPassword) {\n      toast({\n        title: \"Fill all fields\",\n        description: \"All fields are required\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (password !== confirmPassword) {\n      toast({\n        title: \"Passwords don't match\",\n        description: \"Check password accuracy\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (password.length < 6) {\n      toast({\n        title: \"Password too short\",\n        description: \"Password must be at least 6 characters\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    createAccountMutation.mutate({\n      username,\n      email,\n      password\n    });\n  };\n\n  const resetModal = () => {\n    setStep(\"payment\");\n    setPaymentMethod(\"card\");\n    setCardNumber(\"\");\n    setExpiryDate(\"\");\n    setCvv(\"\");\n    setEmail(\"\");\n    setUsername(\"\");\n    setPassword(\"\");\n    setConfirmPassword(\"\");\n  };\n\n  const formatCardNumber = (value: string) => {\n    const v = value.replace(/\\s+/g, '').replace(/[^0-9]/gi, '');\n    const matches = v.match(/\\d{4,16}/g);\n    const match = matches && matches[0] || '';\n    const parts = [];\n    for (let i = 0, len = match.length; i < len; i += 4) {\n      parts.push(match.substring(i, i + 4));\n    }\n    if (parts.length) {\n      return parts.join(' ');\n    } else {\n      return v;\n    }\n  };\n\n  const formatExpiryDate = (value: string) => {\n    const v = value.replace(/\\D/g, '');\n    if (v.length >= 2) {\n      return v.substring(0, 2) + '/' + v.substring(2, 4);\n    }\n    return v;\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={(open) => {\n      if (!open) resetModal();\n      onOpenChange(open);\n    }}>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center space-x-2\">\n            <div className=\"w-8 h-8 rounded-lg bg-gradient-to-br from-primary to-warning flex items-center justify-center\">\n              {step === \"payment\" ? (\n                <CreditCard className=\"w-4 h-4 text-primary-foreground\" />\n              ) : (\n                <User className=\"w-4 h-4 text-primary-foreground\" />\n              )}\n            </div>\n            <span>\n              {step === \"payment\" ? \"Upgrade to Expert Chat\" : \"Create your account\"}\n            </span>\n          </DialogTitle>\n          <DialogDescription>\n            {step === \"payment\" \n              ? \"Get unlimited access to professional mechanics for just $9.99\"\n              : \"Last step - create login and password for your account\"\n            }\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"space-y-6\">\n          {/* Benefits - pokazuj tylko w kroku płatności */}\n          {step === \"payment\" && (\n            <Card className=\"bg-gradient-to-r from-primary/10 to-warning/10 border-primary/20\">\n              <CardContent className=\"p-4\">\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-2xl font-bold\">$9.99</span>\n                    <Badge className=\"bg-success/20 text-success border-success/30\">\n                      <Star className=\"w-3 h-3 mr-1\" />\n                      30 days access\n                    </Badge>\n                  </div>\n                  <div className=\"space-y-2 text-sm\">\n                    <div className=\"flex items-center space-x-2\">\n                      <CheckCircle className=\"w-4 h-4 text-success\" />\n                      <span>Direct chat with mechanic</span>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <CheckCircle className=\"w-4 h-4 text-success\" />\n                      <span>Unlimited questions</span>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <CheckCircle className=\"w-4 h-4 text-success\" />\n                      <span>24/7 availability</span>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <CheckCircle className=\"w-4 h-4 text-success\" />\n                      <span>All vehicle types</span>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Payment Form */}\n          {step === \"payment\" && (\n            <div className=\"space-y-4\">\n              {/* Payment Method Selector */}\n              <div className=\"space-y-3\">\n                <Label>Select Payment Method</Label>\n                <div className=\"grid grid-cols-2 gap-3\">\n                  <Button\n                    type=\"button\"\n                    variant={paymentMethod === \"card\" ? \"default\" : \"outline\"}\n                    className=\"flex items-center justify-center space-x-2\"\n                    onClick={() => setPaymentMethod(\"card\")}\n                    data-testid=\"button-select-card\"\n                  >\n                    <CreditCard className=\"w-4 h-4\" />\n                    <span>Credit Card</span>\n                  </Button>\n                  <Button\n                    type=\"button\"\n                    variant={paymentMethod === \"paypal\" ? \"default\" : \"outline\"}\n                    className=\"flex items-center justify-center space-x-2\"\n                    onClick={() => setPaymentMethod(\"paypal\")}\n                    data-testid=\"button-select-paypal\"\n                  >\n                    <SiPaypal className=\"w-4 h-4\" />\n                    <span>PayPal</span>\n                  </Button>\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"email\">Email Address</Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  placeholder=\"your@email.com\"\n                  value={email}\n                  onChange={(e) => setEmail(e.target.value)}\n                  data-testid=\"input-email\"\n                />\n              </div>\n              \n              {/* Credit Card Form */}\n              {paymentMethod === \"card\" && (\n                <>\n                  <div>\n                    <Label htmlFor=\"cardNumber\">Card Number</Label>\n                    <Input\n                      id=\"cardNumber\"\n                      placeholder=\"1234 5678 9012 3456\"\n                      value={cardNumber}\n                      onChange={(e) => setCardNumber(formatCardNumber(e.target.value))}\n                      maxLength={19}\n                      data-testid=\"input-card-number\"\n                    />\n                  </div>\n                  \n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"expiryDate\">Expiry Date</Label>\n                      <Input\n                        id=\"expiryDate\"\n                        placeholder=\"MM/YY\"\n                        value={expiryDate}\n                        onChange={(e) => setExpiryDate(formatExpiryDate(e.target.value))}\n                        maxLength={5}\n                        data-testid=\"input-expiry\"\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"cvv\">CVV</Label>\n                      <Input\n                        id=\"cvv\"\n                        placeholder=\"123\"\n                        value={cvv}\n                        onChange={(e) => setCvv(e.target.value.replace(/\\D/g, '').substring(0, 3))}\n                        maxLength={3}\n                        data-testid=\"input-cvv\"\n                      />\n                    </div>\n                  </div>\n\n                  <Button \n                    onClick={handlePayment}\n                    disabled={isProcessing}\n                    className=\"w-full\"\n                    data-testid=\"button-pay\"\n                  >\n                    {isProcessing ? \"Processing...\" : \"Pay $9.99\"}\n                  </Button>\n                </>\n              )}\n\n              {/* PayPal Form */}\n              {paymentMethod === \"paypal\" && email && (\n                <div className=\"space-y-3\">\n                  <div className=\"p-4 border rounded-lg bg-muted/30\">\n                    <p className=\"text-sm text-muted-foreground mb-3\">\n                      Click the PayPal button below to complete your payment securely through PayPal.\n                    </p>\n                    <PayPalButton\n                      amount=\"9.99\"\n                      currency=\"USD\"\n                      intent=\"CAPTURE\"\n                      onSuccess={handlePayPalSuccess}\n                      onError={handlePayPalError}\n                    />\n                  </div>\n                </div>\n              )}\n\n              {paymentMethod === \"paypal\" && !email && (\n                <p className=\"text-sm text-muted-foreground\">Please enter your email address first</p>\n              )}\n            </div>\n          )}\n\n          {/* Account Setup Form */}\n          {step === \"account\" && (\n            <div className=\"space-y-4\">\n              <div className=\"bg-success/10 border border-success/20 rounded-lg p-4\">\n                <div className=\"flex items-center space-x-2 text-success\">\n                  <CheckCircle className=\"w-4 h-4\" />\n                  <span className=\"text-sm font-medium\">Payment completed successfully!</span>\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"username\">Username</Label>\n                <Input\n                  id=\"username\"\n                  placeholder=\"your_username\"\n                  value={username}\n                  onChange={(e) => setUsername(e.target.value)}\n                  data-testid=\"input-username\"\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"password\">Password</Label>\n                <Input\n                  id=\"password\"\n                  type=\"password\"\n                  placeholder=\"Minimum 6 characters\"\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                  data-testid=\"input-password\"\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"confirmPassword\">Confirm password</Label>\n                <Input\n                  id=\"confirmPassword\"\n                  type=\"password\"\n                  placeholder=\"Repeat password\"\n                  value={confirmPassword}\n                  onChange={(e) => setConfirmPassword(e.target.value)}\n                  data-testid=\"input-confirm-password\"\n                />\n              </div>\n\n              <Button \n                onClick={handleAccountSetup}\n                disabled={createAccountMutation.isPending}\n                className=\"w-full\"\n                data-testid=\"button-create-account\"\n              >\n                {createAccountMutation.isPending ? \"Creating account...\" : \"Create account and start\"}\n              </Button>\n            </div>\n          )}\n\n          {/* Security Badge */}\n          <div className=\"flex items-center justify-center space-x-2 text-xs text-muted-foreground\">\n            <Shield className=\"w-4 h-4\" />\n            <span>Secure 256-bit SSL encryption</span>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":15936},"client/src/components/VehicleSelector.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Car, Bike, Ship, Bus, Truck, Hammer, MoreHorizontal } from \"lucide-react\";\n\nconst VEHICLE_TYPES = [\n  { id: \"car\", name: \"Car\", icon: Car },\n  { id: \"motorcycle\", name: \"Motorcycle\", icon: Bike },\n  { id: \"boat\", name: \"Boat/Watercraft\", icon: Ship },\n  { id: \"bus\", name: \"Bus\", icon: Bus },\n  { id: \"truck\", name: \"Truck\", icon: Truck },\n  { id: \"construction\", name: \"Construction Equipment\", icon: Hammer },\n  { id: \"other\", name: \"Other\", icon: MoreHorizontal },\n];\n\ninterface VehicleInfo {\n  type: string;\n  make: string;\n  model: string;\n  year: string;\n  engine: string;\n  issue: string;\n}\n\ninterface VehicleSelectorProps {\n  onSubmit?: (info: VehicleInfo) => void;\n  className?: string;\n}\n\nexport default function VehicleSelector({ onSubmit, className }: VehicleSelectorProps) {\n  const [selectedType, setSelectedType] = useState<string>(\"\");\n  const [vehicleInfo, setVehicleInfo] = useState<VehicleInfo>({\n    type: \"\",\n    make: \"\",\n    model: \"\",\n    year: \"\",\n    engine: \"\",\n    issue: \"\"\n  });\n\n  const handleTypeSelect = (type: string) => {\n    setSelectedType(type);\n    setVehicleInfo(prev => ({ ...prev, type }));\n  };\n\n  const handleSubmit = () => {\n    if (onSubmit && selectedType && vehicleInfo.issue.trim()) {\n      onSubmit(vehicleInfo);\n    }\n  };\n\n  const isFormValid = selectedType && vehicleInfo.issue.trim().length > 10;\n\n  return (\n    <Card className={className}>\n      <CardHeader>\n        <CardTitle>Tell Us About Your Vehicle</CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-6\">\n        {/* Vehicle Type Selection */}\n        <div>\n          <Label className=\"text-base font-medium mb-3 block\">What type of vehicle do you need help with?</Label>\n          <div className=\"grid grid-cols-2 md:grid-cols-3 gap-3\">\n            {VEHICLE_TYPES.map((type) => {\n              const Icon = type.icon;\n              return (\n                <Button\n                  key={type.id}\n                  variant={selectedType === type.id ? \"default\" : \"outline\"}\n                  className=\"h-auto p-4 flex flex-col space-y-2 hover-elevate\"\n                  onClick={() => handleTypeSelect(type.id)}\n                  data-testid={`button-vehicle-${type.id}`}\n                >\n                  <Icon className=\"w-6 h-6\" />\n                  <span className=\"text-sm\">{type.name}</span>\n                </Button>\n              );\n            })}\n          </div>\n        </div>\n\n        {/* Vehicle Details Form */}\n        {selectedType && (\n          <div className=\"space-y-4 border-t pt-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"make\">Make/Brand</Label>\n                <Input\n                  id=\"make\"\n                  placeholder=\"e.g., Toyota, Ford, Caterpillar\"\n                  value={vehicleInfo.make}\n                  onChange={(e) => setVehicleInfo(prev => ({ ...prev, make: e.target.value }))}\n                  data-testid=\"input-make\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"model\">Model</Label>\n                <Input\n                  id=\"model\"\n                  placeholder=\"e.g., Camry, F-150, 320D\"\n                  value={vehicleInfo.model}\n                  onChange={(e) => setVehicleInfo(prev => ({ ...prev, model: e.target.value }))}\n                  data-testid=\"input-model\"\n                />\n              </div>\n            </div>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"year\">Year</Label>\n                <Select onValueChange={(value) => setVehicleInfo(prev => ({ ...prev, year: value }))}>\n                  <SelectTrigger data-testid=\"select-year\">\n                    <SelectValue placeholder=\"Select year\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {Array.from({ length: new Date().getFullYear() - 1970 + 1 }, (_, i) => new Date().getFullYear() - i).map(year => (\n                      <SelectItem key={year} value={year.toString()}>{year}</SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n              <div>\n                <Label htmlFor=\"engine\">Engine/Power Info</Label>\n                <Input\n                  id=\"engine\"\n                  placeholder=\"e.g., 2.0L V4, Diesel, Electric\"\n                  value={vehicleInfo.engine}\n                  onChange={(e) => setVehicleInfo(prev => ({ ...prev, engine: e.target.value }))}\n                  data-testid=\"input-engine\"\n                />\n              </div>\n            </div>\n\n            <div>\n              <Label htmlFor=\"issue\">Describe the issue you're experiencing *</Label>\n              <Textarea\n                id=\"issue\"\n                placeholder=\"Please describe what's wrong, any symptoms, when it happens, etc. The more details you provide, the better our mechanics can help you.\"\n                className=\"min-h-24\"\n                value={vehicleInfo.issue}\n                onChange={(e) => setVehicleInfo(prev => ({ ...prev, issue: e.target.value }))}\n                data-testid=\"textarea-issue\"\n              />\n              <p className=\"text-xs text-muted-foreground mt-1\">\n                {vehicleInfo.issue.length}/500 characters (minimum 10)\n              </p>\n            </div>\n\n            <Button \n              className=\"w-full\" \n              disabled={!isFormValid}\n              onClick={handleSubmit}\n              data-testid=\"button-submit-vehicle-info\"\n            >\n              Start Chat with Mechanic\n            </Button>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":6157},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/Home.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useOnlineStatus } from \"@/hooks/useOnlineStatus\";\nimport Header from \"@/components/Header\";\nimport HeroSection from \"@/components/HeroSection\";\nimport OnlineMechanics from \"@/components/OnlineMechanics\";\nimport VehicleSelector from \"@/components/VehicleSelector\";\nimport ChatInterface from \"@/components/ChatInterface\";\nimport ChatHistory from \"@/components/ChatHistory\";\nimport PaymentModal from \"@/components/PaymentModal\";\nimport LoginModal from \"@/components/LoginModal\";\nimport Footer from \"@/components/Footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\n\nexport default function Home() {\n  const [showPayment, setShowPayment] = useState(false);\n  const [showChat, setShowChat] = useState(false);\n  const [showLogin, setShowLogin] = useState(false);\n  const [vehicleInfo, setVehicleInfo] = useState<any>(null);\n  const [sessionId, setSessionId] = useState<string | null>(null);\n  const [pendingSelectedSessionId, setPendingSelectedSessionId] = useState<string | null>(null);\n  const [pendingVehicleInfo, setPendingVehicleInfo] = useState<any>(null);\n  const [, navigate] = useLocation();\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  // Check if user is authenticated\n  const { data: user, isLoading: userLoading } = useQuery({\n    queryKey: ['/api/users/me'],\n    retry: false, // Don't retry if not authenticated\n    refetchOnWindowFocus: false,\n  });\n\n  // Logout mutation\n  const logoutMutation = useMutation({\n    mutationFn: () => apiRequest(\"POST\", \"/api/users/logout\"),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/users/me'] });\n      setShowChat(false);\n      toast({\n        title: \"Logged out successfully\",\n        description: \"See you soon!\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Logout error\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleLogout = () => {\n    logoutMutation.mutate();\n  };\n\n  const handleScrollToVehicleSelector = () => {\n    const vehicleSection = document.getElementById('vehicle-selector-section');\n    if (vehicleSection) {\n      vehicleSection.scrollIntoView({ behavior: 'smooth' });\n    }\n  };\n\n  const handleLearnMore = () => {\n    navigate('/faq');\n  };\n\n  const handleLogin = () => {\n    setShowLogin(true);\n  };\n\n  const handleLoginSuccess = () => {\n    // User is now logged in, they can continue using the app\n    // The user query will automatically refresh due to React Query\n    toast({\n      title: \"Welcome!\",\n      description: \"You're now logged in. You can purchase chat access to start consulting with mechanics.\",\n    });\n  };\n\n  // Check if user has active subscription\n  const hasAccess = (user as any)?.hasSubscription || false;\n\n  // Update online status with heartbeat\n  useOnlineStatus(!!user);\n\n  const handleStartChat = () => {\n    if (!hasAccess) {\n      setShowPayment(true);\n    } else {\n      setShowChat(true);\n    }\n  };\n\n  const handlePaymentSuccess = (userData: { id: string; name: string; email: string; sessionId: string }) => {\n    console.log('Payment successful!', userData);\n    // Refresh user data to get updated subscription status\n    queryClient.invalidateQueries({ queryKey: ['/api/users/me'] });\n    queryClient.invalidateQueries({ queryKey: ['/api/chat/sessions'] });\n    \n    // Close payment modal\n    setShowPayment(false);\n    \n    // Check if user was trying to continue a selected session\n    if (pendingSelectedSessionId && pendingVehicleInfo) {\n      // Continue the previously selected chat session\n      setSessionId(pendingSelectedSessionId);\n      setVehicleInfo(pendingVehicleInfo);\n      \n      // Clear pending state\n      setPendingSelectedSessionId(null);\n      setPendingVehicleInfo(null);\n      \n      toast({\n        title: \"Welcome back!\",\n        description: \"Continuing your previous chat session.\",\n      });\n    } else {\n      // Start a new session (original behavior)\n      setSessionId(userData.sessionId);\n      setVehicleInfo(null);\n    }\n    \n    setShowChat(true);\n  };\n\n  const handleVehicleSubmit = (info: any) => {\n    console.log('Vehicle info submitted:', info);\n    setVehicleInfo(info);\n    handleStartChat();\n  };\n\n  const handleSelectSession = async (selectedSessionId: string, selectedVehicleInfo: any) => {\n    console.log('Selected chat session:', selectedSessionId);\n    \n    // Check if user has access before showing chat\n    if (!hasAccess) {\n      // Store the selected session for after payment\n      setPendingSelectedSessionId(selectedSessionId);\n      setPendingVehicleInfo(selectedVehicleInfo);\n      \n      toast({\n        title: \"Premium access required\",\n        description: \"You'll continue this chat after subscribing.\",\n      });\n      \n      setShowPayment(true);\n    } else {\n      // User has access, continue directly\n      setSessionId(selectedSessionId);\n      setVehicleInfo(selectedVehicleInfo);\n      setShowChat(true);\n    }\n  };\n\n  const handleStartNewChat = () => {\n    setSessionId(null);\n    setVehicleInfo(null);\n    const vehicleSection = document.getElementById('vehicle-selector-section');\n    if (vehicleSection) {\n      vehicleSection.scrollIntoView({ behavior: 'smooth' });\n    }\n  };\n\n  if (showChat) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <div className=\"container mx-auto px-4 py-8\">\n          <div className=\"grid lg:grid-cols-3 gap-6\">\n            <div className=\"lg:col-span-2\">\n              <ChatInterface \n                hasAccess={hasAccess}\n                vehicleInfo={vehicleInfo}\n                sessionId={sessionId || ''}\n                userId={(user as any)?.id || ''}\n                username={(user as any)?.username || ''}\n                className=\"h-[600px]\"\n              />\n            </div>\n            <div className=\"space-y-6\">\n              <OnlineMechanics />\n              <Card>\n                <CardHeader>\n                  <CardTitle>Session Info</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-2 text-sm\">\n                    <div>Status: {hasAccess ? 'Premium Access' : 'Free Tier'}</div>\n                    <div>Response Time: ~2-3 minutes</div>\n                  </div>\n                  <Button \n                    className=\"w-full mt-4\" \n                    variant=\"outline\"\n                    onClick={() => setShowChat(false)}\n                    data-testid=\"button-back-home\"\n                  >\n                    Back to Home\n                  </Button>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n\n        <PaymentModal \n          open={showPayment}\n          onOpenChange={setShowPayment}\n          onPaymentSuccess={handlePaymentSuccess}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header user={user as any} onLogin={handleLogin} onLogout={handleLogout} />\n      \n      <HeroSection \n        onStartChat={handleScrollToVehicleSelector}\n        onGetStarted={handleLearnMore}\n      />\n      \n      {/* Chat History section for logged-in users */}\n      {user && (user as any)?.id && (\n        <section className=\"py-16 bg-background\">\n          <div className=\"container mx-auto px-4\">\n            <div className=\"grid lg:grid-cols-3 gap-8\">\n              <div className=\"lg:col-span-2\">\n                <ChatHistory\n                  onSelectSession={handleSelectSession}\n                  onStartNewChat={handleStartNewChat}\n                />\n              </div>\n              <div className=\"space-y-6\">\n                <OnlineMechanics />\n              </div>\n            </div>\n          </div>\n        </section>\n      )}\n      \n      <section id=\"vehicle-selector-section\" className=\"py-16 bg-muted/30\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl font-bold mb-4\">Start Your Consultation</h2>\n            <p className=\"text-muted-foreground max-w-2xl mx-auto\">\n              Tell us about your vehicle and the issues you're experiencing. Our AI will help you get started, \n              then connect you with the right expert for detailed assistance.\n            </p>\n          </div>\n          \n          <div className=\"grid lg:grid-cols-3 gap-8\">\n            <div className=\"lg:col-span-2\">\n              <VehicleSelector onSubmit={handleVehicleSubmit} />\n            </div>\n            <div>\n              <OnlineMechanics />\n            </div>\n          </div>\n        </div>\n      </section>\n      \n      <Footer />\n      \n      <PaymentModal \n        open={showPayment}\n        onOpenChange={setShowPayment}\n        onPaymentSuccess={handlePaymentSuccess}\n      />\n      \n      <LoginModal \n        open={showLogin}\n        onOpenChange={setShowLogin}\n        onLoginSuccess={handleLoginSuccess}\n      />\n    </div>\n  );\n}","size_bytes":9236},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/examples/ChatInterface.tsx":{"content":"import { useState } from 'react';\nimport ChatInterface from '../ChatInterface';\nimport { Button } from '@/components/ui/button';\n\nexport default function ChatInterfaceExample() {\n  const [hasAccess, setHasAccess] = useState(false);\n  \n  return (\n    <div className=\"max-w-2xl mx-auto space-y-4\">\n      <div className=\"flex gap-2 justify-center\">\n        <Button \n          variant={!hasAccess ? \"default\" : \"outline\"}\n          onClick={() => setHasAccess(false)}\n        >\n          Free Chat\n        </Button>\n        <Button \n          variant={hasAccess ? \"default\" : \"outline\"}\n          onClick={() => setHasAccess(true)}\n        >\n          Premium Chat\n        </Button>\n      </div>\n      \n      <ChatInterface \n        hasAccess={hasAccess}\n        onUpgrade={() => setHasAccess(true)}\n      />\n    </div>\n  );\n}","size_bytes":822},"client/src/components/examples/Footer.tsx":{"content":"import Footer from '../Footer';\n\nexport default function FooterExample() {\n  return <Footer />;\n}","size_bytes":97},"client/src/components/examples/Header.tsx":{"content":"import Header from '../Header';\n\nexport default function HeaderExample() {\n  const mockUser = {\n    name: 'John Doe',\n    email: 'john@example.com'\n  };\n\n  return (\n    <Header \n      user={mockUser}\n      onLogin={() => console.log('Login clicked')}\n      onLogout={() => console.log('Logout clicked')}\n      onOpenAdmin={() => console.log('Admin clicked')}\n    />\n  );\n}","size_bytes":372},"client/src/components/examples/HeroSection.tsx":{"content":"import HeroSection from '../HeroSection';\n\nexport default function HeroSectionExample() {\n  return (\n    <HeroSection \n      onStartChat={() => console.log('Start chat clicked')}\n      onGetStarted={() => console.log('Get started clicked')}\n    />\n  );\n}","size_bytes":254},"client/src/components/examples/OnlineMechanics.tsx":{"content":"import OnlineMechanics from '../OnlineMechanics';\n\nexport default function OnlineMechanicsExample() {\n  return (\n    <div className=\"max-w-md mx-auto\">\n      <OnlineMechanics />\n    </div>\n  );\n}","size_bytes":195},"client/src/components/examples/PaymentModal.tsx":{"content":"import { useState } from 'react';\nimport PaymentModal from '../PaymentModal';\nimport { Button } from '@/components/ui/button';\n\nexport default function PaymentModalExample() {\n  const [open, setOpen] = useState(false);\n  \n  return (\n    <div className=\"flex justify-center\">\n      <Button onClick={() => setOpen(true)}>\n        Open Payment Modal\n      </Button>\n      \n      <PaymentModal \n        open={open}\n        onOpenChange={setOpen}\n        onPaymentSuccess={() => console.log('Payment successful!')}\n      />\n    </div>\n  );\n}","size_bytes":536},"client/src/components/examples/VehicleSelector.tsx":{"content":"import VehicleSelector from '../VehicleSelector';\n\nexport default function VehicleSelectorExample() {\n  return (\n    <div className=\"max-w-2xl mx-auto\">\n      <VehicleSelector \n        onSubmit={(info) => console.log('Vehicle info submitted:', info)}\n      />\n    </div>\n  );\n}","size_bytes":277},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/Admin.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport Header from \"@/components/Header\";\nimport { \n  Users, \n  MessageCircle, \n  DollarSign, \n  Settings, \n  Activity, \n  TrendingUp,\n  Clock,\n  Wrench,\n  Car,\n  Database,\n  Server\n} from \"lucide-react\";\n\ninterface SystemStats {\n  totalUsers: number;\n  activeChats: number;\n  totalRevenue: number;\n  onlineMechanics: number;\n  responseTimes: string;\n  serverUptime: string;\n  databaseStatus: string;\n  systemLoad: number;\n}\n\ninterface RecentActivity {\n  id: string;\n  type: 'chat_started' | 'payment' | 'mechanic_joined';\n  description: string;\n  timestamp: Date;\n  amount?: number;\n}\n\nexport default function Admin() {\n  const [user] = useState({ name: 'Admin', email: 'admin@chatwithmechanic.com' });\n  const [isAuthorized, setIsAuthorized] = useState(false);\n  const [password, setPassword] = useState('');\n\n  // Simple admin access control - in production, use proper authentication\n  const handleAdminLogin = () => {\n    if (password === 'admin123') {\n      setIsAuthorized(true);\n    } else {\n      alert('Incorrect password');\n    }\n  };\n\n  if (!isAuthorized) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <Card className=\"w-96\">\n          <CardHeader>\n            <CardTitle>Admin Access</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div>\n              <label className=\"text-sm font-medium\">Password:</label>\n              <Input\n                type=\"password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                onKeyPress={(e) => e.key === 'Enter' && handleAdminLogin()}\n                placeholder=\"Enter admin password\"\n                data-testid=\"input-admin-password\"\n              />\n            </div>\n            <Button onClick={handleAdminLogin} className=\"w-full\" data-testid=\"button-admin-login\">\n              Access Admin Panel\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n  const [stats, setStats] = useState<SystemStats>({\n    totalUsers: 1247,\n    activeChats: 23,\n    totalRevenue: 15420.50,\n    onlineMechanics: 12,\n    responseTimes: \"2.3 min avg\",\n    serverUptime: \"99.98%\",\n    databaseStatus: \"Connected\",\n    systemLoad: 67\n  });\n\n  const [recentActivity, setRecentActivity] = useState<RecentActivity[]>([\n    {\n      id: '1',\n      type: 'payment',\n      description: 'User alex_johnson completed payment for premium chat',\n      timestamp: new Date(Date.now() - 5 * 60 * 1000),\n      amount: 9.99\n    },\n    {\n      id: '2',\n      type: 'chat_started',\n      description: 'New chat session started for 2018 Honda Civic engine issue',\n      timestamp: new Date(Date.now() - 12 * 60 * 1000)\n    },\n    {\n      id: '3',\n      type: 'mechanic_joined',\n      description: 'Mechanic jamie_tech came online',\n      timestamp: new Date(Date.now() - 18 * 60 * 1000)\n    },\n    {\n      id: '4',\n      type: 'payment',\n      description: 'User mike_car_owner completed payment for premium chat',\n      timestamp: new Date(Date.now() - 25 * 60 * 1000),\n      amount: 9.99\n    },\n    {\n      id: '5',\n      type: 'chat_started',\n      description: 'New chat session started for 2005 Ford F-150 brake issue',\n      timestamp: new Date(Date.now() - 35 * 60 * 1000)\n    }\n  ]);\n\n  // Simulate real-time updates\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setStats(prev => ({\n        ...prev,\n        activeChats: Math.max(15, Math.floor(Math.random() * 30) + 15),\n        onlineMechanics: Math.max(8, Math.floor(Math.random() * 16) + 8),\n        systemLoad: Math.floor(Math.random() * 40) + 50,\n        totalRevenue: prev.totalRevenue + (Math.random() > 0.7 ? 9.99 : 0)\n      }));\n    }, 5000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  const getActivityIcon = (type: string) => {\n    switch (type) {\n      case 'payment':\n        return <DollarSign className=\"w-4 h-4 text-success\" />;\n      case 'chat_started':\n        return <MessageCircle className=\"w-4 h-4 text-primary\" />;\n      case 'mechanic_joined':\n        return <Wrench className=\"w-4 h-4 text-warning\" />;\n      default:\n        return <Activity className=\"w-4 h-4\" />;\n    }\n  };\n\n  const formatTimeAgo = (date: Date) => {\n    const minutes = Math.floor((Date.now() - date.getTime()) / 60000);\n    if (minutes < 1) return 'Just now';\n    if (minutes < 60) return `${minutes}m ago`;\n    const hours = Math.floor(minutes / 60);\n    if (hours < 24) return `${hours}h ago`;\n    return `${Math.floor(hours / 24)}d ago`;\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header \n        user={user} \n        onLogin={() => {}} \n        onLogout={() => {}} \n      />\n      \n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold mb-2\">Admin Dashboard</h1>\n          <p className=\"text-muted-foreground\">\n            Monitor system performance, user activity, and manage the platform\n          </p>\n        </div>\n\n        {/* Key Metrics */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Total Users</p>\n                  <p className=\"text-2xl font-bold\" data-testid=\"text-total-users\">{stats.totalUsers.toLocaleString()}</p>\n                </div>\n                <Users className=\"w-8 h-8 text-primary\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Active Chats</p>\n                  <p className=\"text-2xl font-bold\" data-testid=\"text-active-chats\">{stats.activeChats}</p>\n                </div>\n                <MessageCircle className=\"w-8 h-8 text-success\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Revenue Today</p>\n                  <p className=\"text-2xl font-bold\" data-testid=\"text-revenue\">${stats.totalRevenue.toFixed(2)}</p>\n                </div>\n                <DollarSign className=\"w-8 h-8 text-warning\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Online Mechanics</p>\n                  <p className=\"text-2xl font-bold\" data-testid=\"text-online-mechanics\">{stats.onlineMechanics}</p>\n                </div>\n                <Wrench className=\"w-8 h-8 text-destructive\" />\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid lg:grid-cols-3 gap-6\">\n          {/* System Status */}\n          <div className=\"lg:col-span-2 space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Server className=\"w-5 h-5\" />\n                  System Status\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-sm font-medium\">Server Uptime</span>\n                      <Badge variant=\"default\" className=\"bg-success/20 text-success border-success/30\">\n                        {stats.serverUptime}\n                      </Badge>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-sm font-medium\">Database</span>\n                      <Badge variant=\"default\" className=\"bg-success/20 text-success border-success/30\">\n                        {stats.databaseStatus}\n                      </Badge>\n                    </div>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-sm font-medium\">System Load</span>\n                      <span className=\"text-sm\">{stats.systemLoad}%</span>\n                    </div>\n                    <div className=\"w-full bg-muted rounded-full h-2\">\n                      <div \n                        className=\"bg-primary h-2 rounded-full transition-all duration-300\" \n                        style={{ width: `${stats.systemLoad}%` }}\n                      />\n                    </div>\n                  </div>\n                </div>\n                <div className=\"mt-4 pt-4 border-t\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm font-medium\">Average Response Time</span>\n                    <span className=\"text-sm font-mono\">{stats.responseTimes}</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Recent Activity */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Activity className=\"w-5 h-5\" />\n                  Recent Activity\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {recentActivity.map((activity) => (\n                    <div key={activity.id} className=\"flex items-start gap-3 p-3 rounded-lg bg-muted/30\">\n                      <div className=\"mt-0.5\">\n                        {getActivityIcon(activity.type)}\n                      </div>\n                      <div className=\"flex-1 min-w-0\">\n                        <p className=\"text-sm font-medium truncate\">\n                          {activity.description}\n                        </p>\n                        <div className=\"flex items-center gap-2 mt-1\">\n                          <Clock className=\"w-3 h-3 text-muted-foreground\" />\n                          <span className=\"text-xs text-muted-foreground\">\n                            {formatTimeAgo(activity.timestamp)}\n                          </span>\n                          {activity.amount && (\n                            <Badge variant=\"secondary\" className=\"text-xs\">\n                              +${activity.amount}\n                            </Badge>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Quick Actions & Settings */}\n          <div className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Settings className=\"w-5 h-5\" />\n                  Quick Actions\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  <Button className=\"w-full justify-start\" variant=\"outline\">\n                    <Users className=\"w-4 h-4 mr-2\" />\n                    Manage Users\n                  </Button>\n                  <Button className=\"w-full justify-start\" variant=\"outline\">\n                    <Wrench className=\"w-4 h-4 mr-2\" />\n                    Mechanic Settings\n                  </Button>\n                  <Button className=\"w-full justify-start\" variant=\"outline\">\n                    <MessageCircle className=\"w-4 h-4 mr-2\" />\n                    Chat Monitoring\n                  </Button>\n                  <Button className=\"w-full justify-start\" variant=\"outline\">\n                    <DollarSign className=\"w-4 h-4 mr-2\" />\n                    Payment Reports\n                  </Button>\n                  <Button className=\"w-full justify-start\" variant=\"outline\">\n                    <Database className=\"w-4 h-4 mr-2\" />\n                    Database Admin\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <TrendingUp className=\"w-5 h-5\" />\n                  Performance Metrics\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div>\n                    <div className=\"flex justify-between text-sm mb-1\">\n                      <span>Chat Completion Rate</span>\n                      <span>94%</span>\n                    </div>\n                    <div className=\"w-full bg-muted rounded-full h-2\">\n                      <div className=\"bg-success h-2 rounded-full\" style={{ width: '94%' }} />\n                    </div>\n                  </div>\n                  <div>\n                    <div className=\"flex justify-between text-sm mb-1\">\n                      <span>User Satisfaction</span>\n                      <span>4.8/5</span>\n                    </div>\n                    <div className=\"w-full bg-muted rounded-full h-2\">\n                      <div className=\"bg-primary h-2 rounded-full\" style={{ width: '96%' }} />\n                    </div>\n                  </div>\n                  <div>\n                    <div className=\"flex justify-between text-sm mb-1\">\n                      <span>Payment Success</span>\n                      <span>98%</span>\n                    </div>\n                    <div className=\"w-full bg-muted rounded-full h-2\">\n                      <div className=\"bg-warning h-2 rounded-full\" style={{ width: '98%' }} />\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":14666},"replit.md":{"content":"# ChatWithMechanic.com\n\n## Overview\n\nChatWithMechanic.com is a modern web platform that connects vehicle owners with professional mechanics through real-time chat. The platform supports all vehicle types including cars, motorcycles, boats, buses, and construction equipment. Users pay $9.99 for access to instant expert automotive advice from certified mechanics available 24/7.\n\nThe application features a futuristic dark theme with neon accents, payment processing capabilities, and real-time chat functionality designed to provide professional automotive consultation services online.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript and Vite for fast development and building\n- **Routing**: Wouter for lightweight client-side routing\n- **State Management**: React Query (@tanstack/react-query) for server state management with React hooks for local state\n- **UI Framework**: Radix UI components with shadcn/ui design system for accessible, customizable components\n- **Styling**: Tailwind CSS with custom design tokens supporting dark-first theme with futuristic aesthetics\n- **Component Structure**: Modular component architecture with reusable UI components and page-specific components\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js server framework\n- **Language**: TypeScript with ES modules for type safety and modern JavaScript features\n- **API Structure**: RESTful API design with /api prefix for all application routes\n- **Development Server**: Vite integration for hot module replacement and fast development builds\n- **Storage Interface**: Abstracted storage layer with in-memory implementation (MemStorage) ready for database integration\n\n### Data Storage Solutions\n- **ORM**: Drizzle ORM configured for PostgreSQL with type-safe database operations\n- **Database**: PostgreSQL (via Neon serverless) with connection pooling\n- **Schema**: User-based schema with extensible design for chat functionality\n- **Session Management**: Connect-pg-simple for PostgreSQL-backed session storage\n- **Development Storage**: In-memory storage implementation for development/testing\n\n### Authentication and Authorization\n- **Session-based Authentication**: Express sessions with secure cookie configuration\n- **Simple Admin Access**: Basic password-based admin authentication (development-ready)\n- **User Management**: User creation and retrieval with username/password storage\n- **Authorization Structure**: Role-based access ready for mechanic/customer differentiation\n\n### Design System and User Experience\n- **Dark-First Design**: Custom Tailwind configuration with futuristic color palette\n- **Component Library**: Comprehensive shadcn/ui component set with custom styling\n- **Responsive Design**: Mobile-first approach with adaptive layouts\n- **Interactive Elements**: Hover effects, animations, and micro-interactions for enhanced UX\n- **Chat Interface**: Real-time messaging UI with mechanic assignment and payment integration\n\n## External Dependencies\n\n### Payment Processing\n- **Stripe Integration**: Full payment processing with React Stripe.js components for secure checkout\n- **Payment Modal**: Custom payment form with card validation and processing simulation\n\n### Database Services\n- **Neon Database**: Serverless PostgreSQL hosting with connection pooling\n- **Drizzle Kit**: Database migrations and schema management tools\n\n### Development Tools\n- **Vite Plugins**: Replit-specific plugins for error handling, cartographer, and dev banner\n- **ESBuild**: Fast bundling for production server builds\n- **TypeScript**: Full type checking across client and server code\n\n### UI and Styling Dependencies\n- **Radix UI**: Comprehensive accessible component primitives\n- **Tailwind CSS**: Utility-first CSS framework with custom design tokens\n- **Lucide React**: Modern icon library for consistent iconography\n- **Google Fonts**: Custom font loading for Inter, Outfit, and JetBrains Mono\n\n### Development Dependencies\n- **React Query Dev Tools**: Development utilities for debugging server state\n- **React Hook Form**: Form handling with validation support via Hookform resolvers\n- **Date-fns**: Date manipulation utilities for timestamps and formatting\n\n### SEO and Marketing Pages\n- **SEO Implementation**: React Helmet Async with HelmetProvider for server-side rendering support\n- **Vehicle Type Pages**: Dedicated pages for Cars & Trucks, Motorcycles, Boats & Watercraft, Buses, and Construction Equipment\n- **Support Pages**: Contact Us, FAQ, How It Works, and Mechanic Verification pages\n- **Meta Tag Optimization**: Each page includes comprehensive SEO meta tags (title, description, keywords, Open Graph, Twitter Cards)\n- **Professional Content**: Industry-specific content for each vehicle type with clear value propositions and calls-to-action\n- **Support Contact**: Standardized support email (support@chatwithmechanic.com) across all pages\n\n## Recent Changes\n\n### SEO Pages Implementation (September 2025)\n- **Added 9 SEO-optimized pages**: 5 vehicle type pages and 4 support pages\n- **Switched to react-helmet-async**: Proper server-side rendering support for meta tags\n- **Updated footer navigation**: All footer links now point to dedicated pages instead of homepage\n- **Implemented comprehensive SEO**: Each page includes title, meta description, keywords, Open Graph tags, and Twitter Card tags\n- **Professional content creation**: Vehicle-specific content tailored to target audiences\n- **Support email standardization**: Updated all contact references to support@chatwithmechanic.com\n- **Route configuration**: Added all new pages to App.tsx routing with proper data-testid attributes\n- **Testing verification**: All pages tested for proper SEO tag rendering and navigation functionality","size_bytes":5853},"client/src/hooks/useMechanicsCount.ts":{"content":"import { useState, useEffect } from 'react';\n\n// Global state for mechanics count to ensure consistency across components\nlet globalMechanicsCount = 0;\nlet globalUpdateTime = 0;\nconst listeners: Set<() => void> = new Set();\n\n// Generate a consistent random count that stays the same for a period\nconst generateMechanicsCount = (): number => {\n  const now = Date.now();\n  const fiveMinutes = 5 * 60 * 1000; // 5 minutes in milliseconds\n  \n  // Only regenerate if more than 5 minutes have passed\n  if (now - globalUpdateTime > fiveMinutes || globalMechanicsCount === 0) {\n    globalMechanicsCount = Math.floor(Math.random() * 5) + 8; // 8-12 mechanics\n    globalUpdateTime = now;\n    \n    // Notify all listeners\n    listeners.forEach(listener => listener());\n  }\n  \n  return globalMechanicsCount;\n};\n\n// Custom hook to get current mechanics count\nexport const useMechanicsCount = () => {\n  const [count, setCount] = useState(() => generateMechanicsCount());\n\n  useEffect(() => {\n    const updateCount = () => {\n      setCount(generateMechanicsCount());\n    };\n\n    // Add this component as a listener\n    listeners.add(updateCount);\n    \n    // Set up interval to check for updates every minute\n    const interval = setInterval(updateCount, 60 * 1000);\n\n    // Cleanup\n    return () => {\n      listeners.delete(updateCount);\n      clearInterval(interval);\n    };\n  }, []);\n\n  return count;\n};","size_bytes":1391},"client/src/pages/AdminPanel.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { \n  Users, MessageCircle, DollarSign, Activity, Send, \n  Eye, Clock, Shield, AlertCircle, CheckCircle2, Image, Video, FileText\n} from \"lucide-react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface AdminData {\n  stats: {\n    totalUsers: number;\n    subscribedUsers: number;\n    onlineUsers: number;\n    activeChats: number;\n    unreadMessages: number;\n    totalRevenue: number;\n  };\n  users: any[];\n  subscriptions: any[];\n  activeSessions: any[];\n  unreadMessages: any[];\n  recentMessages: any[];\n}\n\ninterface ChatSession {\n  id: string;\n  user?: any;\n  lastMessage?: any;\n  unreadCount: number;\n  messageCount: number;\n  vehicleInfo?: string;\n  status: string;\n  createdAt: string;\n  lastActivity: string;\n}\n\ninterface Attachment {\n  id: string;\n  fileName: string;\n  originalName: string;\n  fileSize: number;\n  mimeType: string;\n}\n\ninterface Message {\n  id: string;\n  content: string;\n  senderType: string;\n  sender?: any;\n  createdAt: string;\n  isRead: boolean;\n  attachments?: Attachment[];\n}\n\nexport default function AdminPanel() {\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [credentials, setCredentials] = useState({ email: \"\", password: \"\" });\n  const [selectedChatId, setSelectedChatId] = useState<string | null>(null);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [activeTab, setActiveTab] = useState(\"dashboard\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Check authentication status on mount\n  useEffect(() => {\n    const checkAuthStatus = async () => {\n      try {\n        const response = await apiRequest(\"GET\", \"/api/admin/dashboard\");\n        if (response.ok) {\n          setIsAuthenticated(true);\n        }\n      } catch (error) {\n        setIsAuthenticated(false);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    checkAuthStatus();\n  }, []);\n\n  // Login mutation\n  const loginMutation = useMutation({\n    mutationFn: async (creds: { email: string; password: string }) => {\n      const response = await apiRequest(\"POST\", \"/api/admin/login\", creds);\n      return response.json();\n    },\n    onSuccess: () => {\n      setIsAuthenticated(true);\n      toast({\n        title: \"Login successful\",\n        description: \"Welcome to admin panel\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Login failed\", \n        description: \"Invalid credentials\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Dashboard data query\n  const { data: dashboardData, refetch: refetchDashboard } = useQuery<AdminData>({\n    queryKey: [\"/api/admin/dashboard\"],\n    enabled: isAuthenticated,\n    refetchInterval: 5000, // Refresh every 5 seconds\n  });\n\n  // Chat sessions query\n  const { data: chatSessions } = useQuery<ChatSession[]>({\n    queryKey: [\"/api/admin/chats\"],\n    enabled: isAuthenticated,\n    refetchInterval: 3000, // Refresh every 3 seconds\n  });\n\n  // Messages for selected chat\n  const { data: messages, refetch: refetchMessages } = useQuery<Message[]>({\n    queryKey: [\"/api/admin/chats\", selectedChatId, \"messages\"],\n    enabled: isAuthenticated && !!selectedChatId,\n    refetchInterval: 2000, // Refresh every 2 seconds\n  });\n\n  // Live data query\n  const { data: liveData } = useQuery<{\n    unreadCount: number;\n    activeChatsCount: number;\n    onlineUsersCount: number;\n    lastUpdate: string;\n  }>({\n    queryKey: [\"/api/admin/live-data\"],\n    enabled: isAuthenticated,\n    refetchInterval: 1000, // Refresh every second\n  });\n\n  // Send message mutation\n  const sendMessageMutation = useMutation({\n    mutationFn: async ({ sessionId, content }: { sessionId: string; content: string }) => {\n      const response = await apiRequest(\"POST\", `/api/admin/chats/${sessionId}/messages`, { content });\n      return response.json();\n    },\n    onSuccess: () => {\n      setNewMessage(\"\");\n      refetchMessages();\n      refetchDashboard();\n    },\n  });\n\n  // Mark message as read mutation\n  const markAsReadMutation = useMutation({\n    mutationFn: async (messageId: string) => {\n      const response = await apiRequest(\"PATCH\", `/api/admin/messages/${messageId}/read`);\n      return response.json();\n    },\n    onSuccess: () => {\n      refetchMessages();\n      refetchDashboard();\n    },\n  });\n\n  // Logout mutation\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"POST\", \"/api/admin/logout\");\n      return response.json();\n    },\n    onSuccess: () => {\n      setIsAuthenticated(false);\n      setCredentials({ email: \"\", password: \"\" });\n      toast({\n        title: \"Logged out successfully\",\n        description: \"See you!\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Logout error\",\n        description: \"Please try again\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleLogin = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (credentials.email && credentials.password) {\n      loginMutation.mutate(credentials);\n    }\n  };\n\n  const handleSendMessage = () => {\n    if (newMessage.trim() && selectedChatId) {\n      sendMessageMutation.mutate({\n        sessionId: selectedChatId,\n        content: newMessage.trim(),\n      });\n    }\n  };\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat(\"en-US\", {\n      style: \"currency\",\n      currency: \"USD\",\n    }).format(amount);\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleString(\"en-US\");\n  };\n\n  const formatFileSize = (bytes: number) => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  const getFileIcon = (mimeType: string) => {\n    if (mimeType.startsWith('image/')) return <Image className=\"w-4 h-4\" />;\n    if (mimeType.startsWith('video/')) return <Video className=\"w-4 h-4\" />;\n    return <FileText className=\"w-4 h-4\" />;\n  };\n\n  const renderAttachment = (attachment: Attachment) => {\n    const isImage = attachment.mimeType.startsWith('image/');\n    const isVideo = attachment.mimeType.startsWith('video/');\n\n    if (isImage) {\n      return (\n        <div className=\"mt-2\">\n          <img \n            src={`/api/uploads/${attachment.fileName}`}\n            alt={attachment.originalName}\n            className=\"max-w-xs rounded-lg border border-white/20\"\n            style={{ maxHeight: '200px' }}\n          />\n          <p className=\"text-xs opacity-70 mt-1\">\n            {attachment.originalName} ({formatFileSize(attachment.fileSize)})\n          </p>\n        </div>\n      );\n    }\n\n    if (isVideo) {\n      return (\n        <div className=\"mt-2\">\n          <video \n            src={`/api/uploads/${attachment.fileName}`}\n            controls\n            className=\"max-w-xs rounded-lg border border-white/20\"\n            style={{ maxHeight: '200px' }}\n          />\n          <p className=\"text-xs opacity-70 mt-1\">\n            {attachment.originalName} ({formatFileSize(attachment.fileSize)})\n          </p>\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"mt-2 p-2 border border-white/20 rounded-lg flex items-center space-x-2 bg-white/10\">\n        {getFileIcon(attachment.mimeType)}\n        <div className=\"flex-1\">\n          <p className=\"text-sm font-medium\">{attachment.originalName}</p>\n          <p className=\"text-xs opacity-70\">{formatFileSize(attachment.fileSize)}</p>\n        </div>\n      </div>\n    );\n  };\n\n  const getVehicleInfo = (vehicleInfoString?: string) => {\n    try {\n      return vehicleInfoString ? JSON.parse(vehicleInfoString) : null;\n    } catch {\n      return null;\n    }\n  };\n\n  // Play notification sound for new user messages\n  const prevMessagesCount = useRef(messages?.length || 0);\n  useEffect(() => {\n    if (messages && messages.length > prevMessagesCount.current) {\n      const newMessages = messages.slice(prevMessagesCount.current);\n      const hasUserMessage = newMessages.some(msg => msg.senderType === \"user\");\n      \n      if (hasUserMessage) {\n        // Play notification sound\n        const audio = new Audio('data:audio/wav;base64,UklGRnoGAABXQVZFZm10IBAAAAABAAEAQB8AAEAfAAABAAgAZGF0YQoGAACBhYqFbF1fdJivrJBhNjVgodDbq2EcBj+a2/LDciUFLIHO8tiJNwgZaLvt559NEAxQp+PwtmMcBjiR1/LMeSwFJHfH8N2QQAoUXrTp66hVFApGn+DyvmwhBSuBzvLZiTYIGmm98OScTgwOUKfk77RgGgU7k9r0yHMpBSh+zPLaizsKGGS56+mmUBELTKXh8bllHAU2jdXz0n0uBSqAzvLajDkIGGe88eyeUQ0PUqjl8LJeGQQ8lNv0yHUpBSh+zPDciz0KF2S56+mjUhEKS6Xg8bllHAU3jtb00oA');\n        audio.volume = 0.3;\n        audio.play().catch(err => console.log('Audio play failed:', err));\n      }\n    }\n    prevMessagesCount.current = messages?.length || 0;\n  }, [messages]);\n\n  // Auto-mark messages as read when viewing chat\n  useEffect(() => {\n    if (messages && selectedChatId) {\n      const unreadMessages = messages.filter(\n        (msg) => !msg.isRead && msg.senderType === \"user\"\n      );\n      unreadMessages.forEach((msg) => {\n        markAsReadMutation.mutate(msg.id);\n      });\n    }\n  }, [messages, selectedChatId]);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p>Checking permissions...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <Card className=\"w-96\">\n          <CardHeader>\n            <CardTitle className=\"text-center\">Admin Panel</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleLogin} className=\"space-y-4\">\n              <div>\n                <label className=\"text-sm font-medium\">Email:</label>\n                <Input\n                  type=\"email\"\n                  value={credentials.email}\n                  onChange={(e) =>\n                    setCredentials({ ...credentials, email: e.target.value })\n                  }\n                  placeholder=\"Enter admin email\"\n                  data-testid=\"input-admin-email\"\n                />\n              </div>\n              <div>\n                <label className=\"text-sm font-medium\">Password:</label>\n                <Input\n                  type=\"password\"\n                  value={credentials.password}\n                  onChange={(e) =>\n                    setCredentials({ ...credentials, password: e.target.value })\n                  }\n                  placeholder=\"Enter admin password\"\n                  data-testid=\"input-admin-password\"\n                />\n              </div>\n              <Button \n                type=\"submit\" \n                className=\"w-full\" \n                disabled={loginMutation.isPending}\n                data-testid=\"button-admin-login\"\n              >\n                {loginMutation.isPending ? \"Logging in...\" : \"Log In\"}\n              </Button>\n            </form>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"border-b bg-card/50 backdrop-blur\">\n        <div className=\"container mx-auto px-4 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <h1 className=\"text-2xl font-bold\">Admin Panel</h1>\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"flex items-center space-x-2 text-sm\">\n                <div className=\"w-2 h-2 bg-success rounded-full\" />\n                <span>Online</span>\n              </div>\n              <Badge variant=\"secondary\">\n                {liveData?.unreadCount || 0} unread\n              </Badge>\n              <Button \n                variant=\"outline\" \n                onClick={() => logoutMutation.mutate()}\n                disabled={logoutMutation.isPending}\n                data-testid=\"button-admin-logout\"\n              >\n                {logoutMutation.isPending ? \"Logging out...\" : \"Log Out\"}\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"container mx-auto px-4 py-6\">\n        <Tabs value={activeTab} onValueChange={setActiveTab}>\n          <TabsList className=\"grid w-full grid-cols-4\">\n            <TabsTrigger value=\"dashboard\" data-testid=\"tab-dashboard\">Dashboard</TabsTrigger>\n            <TabsTrigger value=\"chats\" className=\"relative\" data-testid=\"tab-chats\">\n              Chats\n              {(liveData?.unreadCount || 0) > 0 && (\n                <Badge \n                  variant=\"destructive\" \n                  className=\"absolute -top-2 -right-2 h-5 w-5 p-0 text-xs\"\n                >\n                  {liveData?.unreadCount}\n                </Badge>\n              )}\n            </TabsTrigger>\n            <TabsTrigger value=\"users\" data-testid=\"tab-users\">Użytkownicy</TabsTrigger>\n            <TabsTrigger value=\"subscriptions\" data-testid=\"tab-subscriptions\">Subskrypcje</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"dashboard\" className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Wszyscy użytkownicy</CardTitle>\n                  <Users className=\"h-4 w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\" data-testid=\"text-total-users\">\n                    {dashboardData?.stats.totalUsers || 0}\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Aktywne czaty</CardTitle>\n                  <MessageCircle className=\"h-4 w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\" data-testid=\"text-active-chats\">\n                    {dashboardData?.stats.activeChats || 0}\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Przychody</CardTitle>\n                  <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\" data-testid=\"text-revenue\">\n                    {formatCurrency(dashboardData?.stats.totalRevenue || 0)}\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Online</CardTitle>\n                  <Activity className=\"h-4 w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\" data-testid=\"text-online-users\">\n                    {dashboardData?.stats.onlineUsers || 0}\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Ostatnie wiadomości</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <ScrollArea className=\"h-80\">\n                    <div className=\"space-y-4\">\n                      {dashboardData?.recentMessages.map((message: any) => (\n                        <div key={message.id} className=\"flex space-x-3\">\n                          <Avatar className=\"h-8 w-8\">\n                            <AvatarFallback>\n                              {message.senderType === \"admin\" ? \"A\" : \"U\"}\n                            </AvatarFallback>\n                          </Avatar>\n                          <div className=\"flex-1 space-y-1\">\n                            <div className=\"flex items-center space-x-2\">\n                              <span className=\"text-sm font-medium\">\n                                {message.senderType === \"admin\" ? \"Mechanic\" : (message.sender?.username || \"Użytkownik\")}\n                              </span>\n                              <Badge variant={message.senderType === \"admin\" ? \"default\" : \"secondary\"}>\n                                {message.senderType === \"admin\" ? \"Admin\" : \"User\"}\n                              </Badge>\n                              <span className=\"text-xs text-muted-foreground\">\n                                {formatDate(message.createdAt)}\n                              </span>\n                            </div>\n                            <p className=\"text-sm text-muted-foreground\">\n                              {message.content}\n                            </p>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </ScrollArea>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>Subskrypcje użytkowników</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <ScrollArea className=\"h-80\">\n                    <div className=\"space-y-3\">\n                      {dashboardData?.users\n                        .filter((user: any) => user.hasSubscription)\n                        .map((user: any) => (\n                          <div key={user.id} className=\"flex items-center justify-between\">\n                            <div className=\"flex items-center space-x-3\">\n                              <Avatar className=\"h-8 w-8\">\n                                <AvatarFallback>\n                                  {user.username?.charAt(0).toUpperCase()}\n                                </AvatarFallback>\n                              </Avatar>\n                              <div>\n                                <p className=\"text-sm font-medium\">{user.username}</p>\n                                <p className=\"text-xs text-muted-foreground\">{user.email}</p>\n                              </div>\n                            </div>\n                            <div className=\"flex items-center space-x-2\">\n                              <Badge \n                                variant={user.isOnline ? \"default\" : \"secondary\"}\n                                className={user.isOnline ? \"bg-success/20 text-success border-success/30\" : \"\"}\n                              >\n                                {user.isOnline ? \"Online\" : \"Offline\"}\n                              </Badge>\n                            </div>\n                          </div>\n                        ))}\n                    </div>\n                  </ScrollArea>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"chats\" className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\" style={{ height: 'calc(100vh - 250px)' }}>\n              {/* Chat Sessions List */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Aktywne czaty ({chatSessions?.length || 0})</CardTitle>\n                </CardHeader>\n                <CardContent className=\"p-0\">\n                  <ScrollArea className=\"h-[500px]\">\n                    <div className=\"space-y-2 p-4\">\n                      {chatSessions?.map((session) => {\n                        const vehicleInfo = getVehicleInfo(session.vehicleInfo);\n                        return (\n                          <div\n                            key={session.id}\n                            className={`p-3 rounded-lg border cursor-pointer transition-colors ${\n                              selectedChatId === session.id\n                                ? \"bg-primary/10 border-primary\"\n                                : \"hover:bg-muted/50\"\n                            }`}\n                            onClick={() => setSelectedChatId(session.id)}\n                            data-testid={`chat-session-${session.id}`}\n                          >\n                            <div className=\"flex items-center justify-between\">\n                              <div className=\"flex items-center space-x-2\">\n                                <Avatar className=\"h-8 w-8\">\n                                  <AvatarFallback>\n                                    {session.user?.username?.charAt(0).toUpperCase() || \"U\"}\n                                  </AvatarFallback>\n                                </Avatar>\n                                <div>\n                                  <p className=\"text-sm font-medium\">\n                                    {session.user?.username || \"Nieznany użytkownik\"}\n                                  </p>\n                                  {vehicleInfo && (\n                                    <p className=\"text-xs text-muted-foreground\">\n                                      {vehicleInfo.year} {vehicleInfo.make} {vehicleInfo.model}\n                                    </p>\n                                  )}\n                                </div>\n                              </div>\n                              <div className=\"flex items-center space-x-2\">\n                                {session.user?.isOnline && (\n                                  <Badge variant=\"default\" className=\"text-xs\">\n                                    <div className=\"w-2 h-2 bg-white rounded-full mr-1\" />\n                                    Online\n                                  </Badge>\n                                )}\n                                {session.unreadCount > 0 && (\n                                  <Badge variant=\"destructive\" className=\"h-5 w-5 p-0 text-xs\">\n                                    {session.unreadCount}\n                                  </Badge>\n                                )}\n                              </div>\n                            </div>\n                            {session.lastMessage && (\n                              <p className=\"text-xs text-muted-foreground mt-2 truncate\">\n                                {session.lastMessage.content}\n                              </p>\n                            )}\n                            <div className=\"flex items-center justify-between mt-2\">\n                              <span className=\"text-xs text-muted-foreground\">\n                                {session.messageCount} wiadomości\n                              </span>\n                              <span className=\"text-xs text-muted-foreground\">\n                                {formatDate(session.lastActivity)}\n                              </span>\n                            </div>\n                          </div>\n                        );\n                      })}\n                    </div>\n                  </ScrollArea>\n                </CardContent>\n              </Card>\n\n              {/* Chat Messages */}\n              <div className=\"lg:col-span-2 h-full\">\n                {selectedChatId ? (\n                  <Card className=\"h-full flex flex-col\">\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center justify-between\">\n                        <span>Konwersacja</span>\n                        <Badge variant=\"outline\">\n                          {messages?.length || 0} wiadomości\n                        </Badge>\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"flex flex-col h-full p-0 overflow-hidden\">\n                      {/* Messages */}\n                      <ScrollArea className=\"flex-1 p-4 min-h-0\">\n                        <div className=\"space-y-4\">\n                          {messages?.map((message) => (\n                            <div\n                              key={message.id}\n                              className={`flex ${\n                                message.senderType === \"admin\" ? \"justify-end\" : \"justify-start\"\n                              }`}\n                            >\n                              <div\n                                className={`max-w-xs lg:max-w-md px-4 py-2 rounded-lg space-y-1 ${\n                                  message.senderType === \"admin\"\n                                    ? \"bg-gradient-to-r from-blue-600 to-blue-700 text-white\"\n                                    : \"bg-gradient-to-r from-purple-600 to-purple-700 text-white\"\n                                }`}\n                              >\n                                <div className=\"flex items-center space-x-2\">\n                                  <Avatar className=\"w-6 h-6\">\n                                    <AvatarFallback className=\"text-xs bg-white/20 text-white\">\n                                      {message.senderType === \"admin\" ? \"A\" : (message.sender?.username?.charAt(0).toUpperCase() || \"U\")}\n                                    </AvatarFallback>\n                                  </Avatar>\n                                  <span className=\"text-xs font-medium\">\n                                    {message.senderType === \"admin\" ? \"Admin\" : (message.sender?.username || \"User\")}\n                                  </span>\n                                  <span className=\"text-xs opacity-70 ml-auto\">\n                                    {formatDate(message.createdAt)}\n                                  </span>\n                                </div>\n                                <p className=\"text-sm\">{message.content}</p>\n                                {message.attachments && message.attachments.map((attachment) => (\n                                  <div key={attachment.id}>\n                                    {renderAttachment(attachment)}\n                                  </div>\n                                ))}\n                                {message.senderType === \"user\" && !message.isRead && (\n                                  <div className=\"flex items-center text-xs opacity-80\">\n                                    <AlertCircle className=\"w-3 h-3 mr-1\" />\n                                    Unread\n                                  </div>\n                                )}\n                              </div>\n                            </div>\n                          ))}\n                        </div>\n                      </ScrollArea>\n\n                      {/* Message Input */}\n                      <div className=\"border-t p-4 flex-shrink-0\">\n                        <div className=\"flex space-x-2\">\n                          <Input\n                            placeholder=\"Napisz wiadomość...\"\n                            value={newMessage}\n                            onChange={(e) => setNewMessage(e.target.value)}\n                            onKeyPress={(e) => e.key === \"Enter\" && handleSendMessage()}\n                            data-testid=\"input-admin-message\"\n                          />\n                          <Button\n                            onClick={handleSendMessage}\n                            disabled={!newMessage.trim() || sendMessageMutation.isPending}\n                            data-testid=\"button-send-admin-message\"\n                          >\n                            <Send className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ) : (\n                  <Card className=\"h-full flex items-center justify-center\">\n                    <CardContent>\n                      <div className=\"text-center text-muted-foreground\">\n                        <MessageCircle className=\"w-12 h-12 mx-auto mb-4\" />\n                        <p>Wybierz czat aby rozpocząć konwersację</p>\n                      </div>\n                    </CardContent>\n                  </Card>\n                )}\n              </div>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"users\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Zarządzanie użytkownikami</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ScrollArea className=\"h-96\">\n                  <div className=\"space-y-4\">\n                    {dashboardData?.users.map((user: any) => (\n                      <div key={user.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                        <div className=\"flex items-center space-x-3\">\n                          <Avatar className=\"h-10 w-10\">\n                            <AvatarFallback>\n                              {user.username?.charAt(0).toUpperCase()}\n                            </AvatarFallback>\n                          </Avatar>\n                          <div>\n                            <p className=\"font-medium\">{user.username}</p>\n                            <p className=\"text-sm text-muted-foreground\">{user.email}</p>\n                            <p className=\"text-xs text-muted-foreground\">\n                              Utworzony: {formatDate(user.createdAt)}\n                            </p>\n                          </div>\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          <Badge variant={user.isOnline ? \"default\" : \"secondary\"}>\n                            {user.isOnline ? \"Online\" : \"Offline\"}\n                          </Badge>\n                          <Badge variant={user.hasSubscription ? \"default\" : \"outline\"}>\n                            {user.hasSubscription ? \"Premium\" : \"Free\"}\n                          </Badge>\n                          {user.isOnline && (\n                            <div className=\"w-2 h-2 bg-success rounded-full\" />\n                          )}\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </ScrollArea>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"subscriptions\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Historia subskrypcji</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ScrollArea className=\"h-96\">\n                  <div className=\"space-y-4\">\n                    {dashboardData?.subscriptions.map((subscription: any) => {\n                      const user = dashboardData.users.find(u => u.id === subscription.userId);\n                      return (\n                        <div key={subscription.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                          <div className=\"flex items-center space-x-3\">\n                            <Avatar className=\"h-10 w-10\">\n                              <AvatarFallback>\n                                {user?.username?.charAt(0).toUpperCase() || \"U\"}\n                              </AvatarFallback>\n                            </Avatar>\n                            <div>\n                              <p className=\"font-medium\">{user?.username || \"Nieznany użytkownik\"}</p>\n                              <p className=\"text-sm text-muted-foreground\">{user?.email}</p>\n                              <p className=\"text-xs text-muted-foreground\">\n                                Zakupiono: {formatDate(subscription.purchasedAt)}\n                              </p>\n                            </div>\n                          </div>\n                          <div className=\"text-right\">\n                            <p className=\"font-bold\">{formatCurrency(parseFloat(subscription.amount || \"0\"))}</p>\n                            <Badge variant={subscription.status === \"active\" ? \"default\" : \"secondary\"}>\n                              {subscription.status}\n                            </Badge>\n                            {user?.isOnline && (\n                              <div className=\"flex items-center justify-end mt-1\">\n                                <div className=\"w-2 h-2 bg-success rounded-full mr-2\" />\n                                <span className=\"text-xs text-success\">Online</span>\n                              </div>\n                            )}\n                          </div>\n                        </div>\n                      );\n                    })}\n                  </div>\n                </ScrollArea>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}","size_bytes":33766},"client/src/pages/Contact.tsx":{"content":"import { useState } from \"react\";\nimport { Helmet } from \"react-helmet-async\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport Footer from \"@/components/Footer\";\nimport Header from \"@/components/Header\";\nimport LoginModal from \"@/components/LoginModal\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Link } from \"wouter\";\nimport { Mail, MessageCircle, Clock, MapPin } from \"lucide-react\";\n\nexport default function Contact() {\n  const [showLogin, setShowLogin] = useState(false);\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  // Check if user is authenticated\n  const { data: user } = useQuery({\n    queryKey: ['/api/users/me'],\n    retry: false,\n    refetchOnWindowFocus: false,\n  });\n\n  // Logout mutation\n  const logoutMutation = useMutation({\n    mutationFn: () => apiRequest(\"POST\", \"/api/users/logout\"),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/users/me'] });\n      toast({\n        title: \"Logged out successfully\",\n        description: \"See you soon!\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Logout error\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleLogout = () => {\n    logoutMutation.mutate();\n  };\n\n  const handleLogin = () => {\n    setShowLogin(true);\n  };\n\n  const handleLoginSuccess = () => {\n    toast({\n      title: \"Welcome!\",\n      description: \"You're now logged in and can access our services.\",\n    });\n  };\n\n  return (\n    <>\n      <Helmet>\n        <title>Contact Us - Get Support for ChatWithMechanic.com</title>\n        <meta name=\"description\" content=\"Contact ChatWithMechanic.com for support, questions, or feedback. Reach our automotive experts at support@chatwithmechanic.com or use our contact form for immediate assistance.\" />\n        <meta name=\"keywords\" content=\"contact us, automotive support, mechanic help, customer service, chatwithmechanic support, technical help, billing questions\" />\n        \n        {/* Open Graph tags */}\n        <meta property=\"og:title\" content=\"Contact Us - Get Support for ChatWithMechanic.com\" />\n        <meta property=\"og:description\" content=\"Contact ChatWithMechanic.com for support, questions, or feedback. Professional automotive consultation support available.\" />\n        <meta property=\"og:type\" content=\"website\" />\n        <meta property=\"og:url\" content=\"https://chatwithmechanic.com/contact\" />\n        \n        {/* Twitter Card tags */}\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta name=\"twitter:title\" content=\"Contact Us - ChatWithMechanic Support\" />\n        <meta name=\"twitter:description\" content=\"Get support for ChatWithMechanic.com. Professional automotive consultation assistance available.\" />\n      </Helmet>\n\n      <div className=\"min-h-screen bg-background\">\n        <Header user={user as any} onLogin={handleLogin} onLogout={handleLogout} />\n\n        {/* Hero Section */}\n        <section className=\"py-20 px-4\">\n          <div className=\"container mx-auto text-center\">\n            <div className=\"flex justify-center mb-6\">\n              <MessageCircle className=\"h-16 w-16 text-primary\" />\n            </div>\n            <h1 className=\"text-4xl md:text-6xl font-bold mb-6\">\n              Contact Our Support Team\n            </h1>\n            <p className=\"text-xl md:text-2xl text-muted-foreground mb-8 max-w-4xl mx-auto\">\n              Need help with your automotive consultation or have questions about our service? \n              Our expert support team is here to assist you with any concerns.\n            </p>\n          </div>\n        </section>\n\n        {/* Contact Information */}\n        <section className=\"py-16 px-4\">\n          <div className=\"container mx-auto\">\n            <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8 mb-16\">\n              <Card className=\"hover-elevate\">\n                <CardContent className=\"p-6 text-center\">\n                  <Mail className=\"h-12 w-12 text-primary mx-auto mb-4\" />\n                  <h3 className=\"text-xl font-semibold mb-3\">Email Support</h3>\n                  <p className=\"text-muted-foreground mb-4\">\n                    For general inquiries, technical support, or billing questions\n                  </p>\n                  <a \n                    href=\"mailto:support@chatwithmechanic.com\" \n                    className=\"text-primary hover:text-primary/80 font-medium\"\n                    data-testid=\"link-email-support\"\n                  >\n                    support@chatwithmechanic.com\n                  </a>\n                </CardContent>\n              </Card>\n\n              <Card className=\"hover-elevate\">\n                <CardContent className=\"p-6 text-center\">\n                  <Clock className=\"h-12 w-12 text-primary mx-auto mb-4\" />\n                  <h3 className=\"text-xl font-semibold mb-3\">Response Time</h3>\n                  <p className=\"text-muted-foreground mb-4\">\n                    We aim to respond to all inquiries within 24 hours\n                  </p>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Monday - Friday: Priority support<br />\n                    Weekends: Standard response time\n                  </p>\n                </CardContent>\n              </Card>\n\n              <Card className=\"hover-elevate\">\n                <CardContent className=\"p-6 text-center\">\n                  <MapPin className=\"h-12 w-12 text-primary mx-auto mb-4\" />\n                  <h3 className=\"text-xl font-semibold mb-3\">Service Area</h3>\n                  <p className=\"text-muted-foreground mb-4\">\n                    Online automotive consultation available worldwide\n                  </p>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Professional advice available<br />\n                    24/7 in multiple languages\n                  </p>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Contact Form */}\n            <div className=\"max-w-2xl mx-auto\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-2xl text-center\">Send us a Message</CardTitle>\n                </CardHeader>\n                <CardContent className=\"p-6\">\n                  <form className=\"space-y-6\">\n                    <div className=\"grid md:grid-cols-2 gap-4\">\n                      <div>\n                        <label htmlFor=\"name\" className=\"block text-sm font-medium mb-2\">\n                          Full Name *\n                        </label>\n                        <Input \n                          id=\"name\" \n                          placeholder=\"Your full name\" \n                          required \n                          data-testid=\"input-name\"\n                        />\n                      </div>\n                      <div>\n                        <label htmlFor=\"email\" className=\"block text-sm font-medium mb-2\">\n                          Email Address *\n                        </label>\n                        <Input \n                          id=\"email\" \n                          type=\"email\" \n                          placeholder=\"your.email@example.com\" \n                          required \n                          data-testid=\"input-email\"\n                        />\n                      </div>\n                    </div>\n\n                    <div>\n                      <label htmlFor=\"subject\" className=\"block text-sm font-medium mb-2\">\n                        Subject *\n                      </label>\n                      <Input \n                        id=\"subject\" \n                        placeholder=\"Brief description of your inquiry\" \n                        required \n                        data-testid=\"input-subject\"\n                      />\n                    </div>\n\n                    <div>\n                      <label htmlFor=\"message\" className=\"block text-sm font-medium mb-2\">\n                        Message *\n                      </label>\n                      <Textarea \n                        id=\"message\" \n                        placeholder=\"Please describe your question or concern in detail...\" \n                        rows={6}\n                        required \n                        data-testid=\"input-message\"\n                      />\n                    </div>\n\n                    <Button \n                      type=\"submit\" \n                      size=\"lg\" \n                      className=\"w-full\" \n                      data-testid=\"button-send-message\"\n                    >\n                      Send Message\n                    </Button>\n                  </form>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </section>\n\n        {/* FAQ Link */}\n        <section className=\"py-16 px-4 bg-card/50\">\n          <div className=\"container mx-auto text-center\">\n            <h2 className=\"text-3xl font-bold mb-6\">\n              Looking for Quick Answers?\n            </h2>\n            <p className=\"text-xl text-muted-foreground mb-8 max-w-2xl mx-auto\">\n              Check our frequently asked questions section for immediate answers to common inquiries \n              about our automotive consultation service.\n            </p>\n            <Link href=\"/faq\" data-testid=\"link-faq\">\n              <Button size=\"lg\" variant=\"outline\" className=\"text-lg px-8 py-3\">\n                View FAQ\n              </Button>\n            </Link>\n          </div>\n        </section>\n\n        <Footer />\n        \n        <LoginModal \n          open={showLogin}\n          onOpenChange={setShowLogin}\n          onLoginSuccess={handleLoginSuccess}\n        />\n      </div>\n    </>\n  );\n}","size_bytes":10023},"client/src/pages/FAQ.tsx":{"content":"import { useState } from \"react\";\nimport { Helmet } from \"react-helmet-async\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from \"@/components/ui/accordion\";\nimport Footer from \"@/components/Footer\";\nimport Header from \"@/components/Header\";\nimport LoginModal from \"@/components/LoginModal\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Link } from \"wouter\";\nimport { HelpCircle, MessageCircle } from \"lucide-react\";\n\nexport default function FAQ() {\n  const [showLogin, setShowLogin] = useState(false);\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  // Check if user is authenticated\n  const { data: user } = useQuery({\n    queryKey: ['/api/users/me'],\n    retry: false,\n    refetchOnWindowFocus: false,\n  });\n\n  // Logout mutation\n  const logoutMutation = useMutation({\n    mutationFn: () => apiRequest(\"POST\", \"/api/users/logout\"),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/users/me'] });\n      toast({\n        title: \"Logged out successfully\",\n        description: \"See you soon!\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Logout error\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleLogout = () => {\n    logoutMutation.mutate();\n  };\n\n  const handleLogin = () => {\n    setShowLogin(true);\n  };\n\n  const handleLoginSuccess = () => {\n    toast({\n      title: \"Welcome!\",\n      description: \"You're now logged in and can access our services.\",\n    });\n  };\n\n  return (\n    <>\n      <Helmet>\n        <title>Frequently Asked Questions - ChatWithMechanic.com</title>\n        <meta name=\"description\" content=\"Find answers to common questions about ChatWithMechanic.com automotive consultation service. Learn about pricing, mechanics, vehicle types, and how our professional chat service works.\" />\n        <meta name=\"keywords\" content=\"FAQ, frequently asked questions, automotive consultation, mechanic chat help, pricing questions, how it works, vehicle support\" />\n        \n        {/* Open Graph tags */}\n        <meta property=\"og:title\" content=\"Frequently Asked Questions - ChatWithMechanic.com\" />\n        <meta property=\"og:description\" content=\"Find answers to common questions about our automotive consultation service. Professional mechanic chat support FAQ.\" />\n        <meta property=\"og:type\" content=\"website\" />\n        <meta property=\"og:url\" content=\"https://chatwithmechanic.com/faq\" />\n        \n        {/* Twitter Card tags */}\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta name=\"twitter:title\" content=\"FAQ - ChatWithMechanic.com\" />\n        <meta name=\"twitter:description\" content=\"Frequently asked questions about our professional automotive consultation service.\" />\n      </Helmet>\n\n      <div className=\"min-h-screen bg-background\">\n        <Header user={user as any} onLogin={handleLogin} onLogout={handleLogout} />\n\n        {/* Hero Section */}\n        <section className=\"py-20 px-4\">\n          <div className=\"container mx-auto text-center\">\n            <div className=\"flex justify-center mb-6\">\n              <HelpCircle className=\"h-16 w-16 text-primary\" />\n            </div>\n            <h1 className=\"text-4xl md:text-6xl font-bold mb-6\">\n              Frequently Asked Questions\n            </h1>\n            <p className=\"text-xl md:text-2xl text-muted-foreground mb-8 max-w-4xl mx-auto\">\n              Get instant answers to common questions about our professional automotive consultation service. \n              Can't find what you're looking for? Contact our support team.\n            </p>\n          </div>\n        </section>\n\n        {/* FAQ Section */}\n        <section className=\"py-16 px-4\">\n          <div className=\"container mx-auto max-w-4xl\">\n            <Accordion type=\"single\" collapsible className=\"space-y-4\">\n              <AccordionItem value=\"item-1\">\n                <AccordionTrigger className=\"text-left\">\n                  How much does ChatWithMechanic cost?\n                </AccordionTrigger>\n                <AccordionContent>\n                  Our service costs $9.99 for unlimited chat access with certified mechanics. This one-time payment gives you 30 days of unlimited consultations for all your automotive needs, covering cars, trucks, motorcycles, boats, buses, and construction equipment.\n                </AccordionContent>\n              </AccordionItem>\n\n              <AccordionItem value=\"item-2\">\n                <AccordionTrigger className=\"text-left\">\n                  What types of vehicles do you support?\n                </AccordionTrigger>\n                <AccordionContent>\n                  We provide expert advice for all types of vehicles including cars, trucks, motorcycles, boats and watercraft, buses, and construction equipment. Our certified mechanics have experience across all vehicle categories and can help with engine diagnostics, maintenance, repairs, and troubleshooting.\n                </AccordionContent>\n              </AccordionItem>\n\n              <AccordionItem value=\"item-3\">\n                <AccordionTrigger className=\"text-left\">\n                  Are your mechanics really certified?\n                </AccordionTrigger>\n                <AccordionContent>\n                  Yes, all our mechanics are ASE (Automotive Service Excellence) certified or hold equivalent professional certifications. We verify all credentials and experience before mechanics join our platform. Our team includes specialists in automotive, marine, heavy equipment, and motorcycle repair.\n                </AccordionContent>\n              </AccordionItem>\n\n              <AccordionItem value=\"item-4\">\n                <AccordionTrigger className=\"text-left\">\n                  Is the service available 24/7?\n                </AccordionTrigger>\n                <AccordionContent>\n                  Yes, our chat service is available 24 hours a day, 7 days a week. We have mechanics in different time zones to ensure you can get help whenever you need it, whether it's an emergency breakdown or routine maintenance questions.\n                </AccordionContent>\n              </AccordionItem>\n\n              <AccordionItem value=\"item-5\">\n                <AccordionTrigger className=\"text-left\">\n                  Can I upload photos and videos of my vehicle problem?\n                </AccordionTrigger>\n                <AccordionContent>\n                  Absolutely! You can upload images up to 30MB and videos up to 150MB to help our mechanics better understand your vehicle's issue. Visual aids greatly improve the accuracy of diagnostics and recommendations. All uploaded files are automatically deleted after 30 days for your privacy.\n                </AccordionContent>\n              </AccordionItem>\n\n              <AccordionItem value=\"item-6\">\n                <AccordionTrigger className=\"text-left\">\n                  What kind of problems can you help me diagnose?\n                </AccordionTrigger>\n                <AccordionContent>\n                  Our mechanics can help with a wide range of issues including engine problems, transmission issues, electrical system faults, brake concerns, cooling system problems, strange noises, performance issues, maintenance scheduling, and emergency troubleshooting. If it's vehicle-related, we can probably help!\n                </AccordionContent>\n              </AccordionItem>\n\n              <AccordionItem value=\"item-7\">\n                <AccordionTrigger className=\"text-left\">\n                  Do you provide repair instructions?\n                </AccordionTrigger>\n                <AccordionContent>\n                  Yes, our mechanics can provide step-by-step repair guidance for DIY-friendly repairs. However, for safety reasons, we'll always recommend professional service for complex repairs, brake work, or any safety-critical systems. We prioritize your safety above all else.\n                </AccordionContent>\n              </AccordionItem>\n\n              <AccordionItem value=\"item-8\">\n                <AccordionTrigger className=\"text-left\">\n                  Can you help with preventive maintenance?\n                </AccordionTrigger>\n                <AccordionContent>\n                  Definitely! Our mechanics can help you create maintenance schedules, recommend service intervals, explain what to look for during inspections, and advise on the best practices to keep your vehicle running smoothly and prevent costly repairs.\n                </AccordionContent>\n              </AccordionItem>\n\n              <AccordionItem value=\"item-9\">\n                <AccordionTrigger className=\"text-left\">\n                  Is my personal information secure?\n                </AccordionTrigger>\n                <AccordionContent>\n                  Yes, we take privacy very seriously. All chat conversations are encrypted, uploaded files are automatically deleted after 30 days, and we never share your personal information with third parties. Your data is protected with industry-standard security measures.\n                </AccordionContent>\n              </AccordionItem>\n\n              <AccordionItem value=\"item-10\">\n                <AccordionTrigger className=\"text-left\">\n                  What if I'm not satisfied with the service?\n                </AccordionTrigger>\n                <AccordionContent>\n                  Customer satisfaction is our top priority. If you're not completely satisfied with our service, please contact our support team at support@chatwithmechanic.com within 7 days of your purchase. We'll work with you to resolve any concerns and ensure you get the help you need.\n                </AccordionContent>\n              </AccordionItem>\n\n              <AccordionItem value=\"item-11\">\n                <AccordionTrigger className=\"text-left\">\n                  Can I get help for vintage or classic vehicles?\n                </AccordionTrigger>\n                <AccordionContent>\n                  Yes! Our team includes mechanics with experience in classic and vintage vehicles. Whether you have a 1960s muscle car, a classic motorcycle, or vintage construction equipment, we have specialists who understand older vehicle systems and can provide appropriate guidance.\n                </AccordionContent>\n              </AccordionItem>\n\n              <AccordionItem value=\"item-12\">\n                <AccordionTrigger className=\"text-left\">\n                  How do I get started?\n                </AccordionTrigger>\n                <AccordionContent>\n                  Getting started is easy! Simply fill out the vehicle information form on our homepage, complete the secure $9.99 payment, create your account, and you'll immediately have access to chat with certified mechanics. The entire process takes less than 5 minutes.\n                </AccordionContent>\n              </AccordionItem>\n            </Accordion>\n          </div>\n        </section>\n\n        {/* Contact Section */}\n        <section className=\"py-16 px-4 bg-card/50\">\n          <div className=\"container mx-auto text-center\">\n            <h2 className=\"text-3xl font-bold mb-6\">\n              Still Have Questions?\n            </h2>\n            <p className=\"text-xl text-muted-foreground mb-8 max-w-2xl mx-auto\">\n              Can't find the answer you're looking for? Our support team is ready to help you with any questions \n              about our automotive consultation service.\n            </p>\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <Link href=\"/contact\" data-testid=\"link-contact-support\">\n                <Button size=\"lg\" variant=\"outline\" className=\"text-lg px-8 py-3\">\n                  Contact Support\n                </Button>\n              </Link>\n              <Link href=\"/\" data-testid=\"link-start-chat\">\n                <Button size=\"lg\" className=\"text-lg px-8 py-3\">\n                  <MessageCircle className=\"mr-2 h-5 w-5\" />\n                  Start Chat Now - $9.99\n                </Button>\n              </Link>\n            </div>\n          </div>\n        </section>\n\n        <Footer />\n        \n        <LoginModal \n          open={showLogin}\n          onOpenChange={setShowLogin}\n          onLoginSuccess={handleLoginSuccess}\n        />\n      </div>\n    </>\n  );\n}","size_bytes":12535},"client/src/pages/HowItWorks.tsx":{"content":"import { useState } from \"react\";\nimport { Helmet } from \"react-helmet-async\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport Footer from \"@/components/Footer\";\nimport Header from \"@/components/Header\";\nimport LoginModal from \"@/components/LoginModal\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Link } from \"wouter\";\nimport { Car, ClipboardList, CreditCard, MessageCircle, CheckCircle, Upload, Clock } from \"lucide-react\";\n\nexport default function HowItWorks() {\n  const [showLogin, setShowLogin] = useState(false);\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  // Check if user is authenticated\n  const { data: user } = useQuery({\n    queryKey: ['/api/users/me'],\n    retry: false,\n    refetchOnWindowFocus: false,\n  });\n\n  // Logout mutation\n  const logoutMutation = useMutation({\n    mutationFn: () => apiRequest(\"POST\", \"/api/users/logout\"),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/users/me'] });\n      toast({\n        title: \"Logged out successfully\",\n        description: \"See you soon!\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Logout error\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleLogout = () => {\n    logoutMutation.mutate();\n  };\n\n  const handleLogin = () => {\n    setShowLogin(true);\n  };\n\n  const handleLoginSuccess = () => {\n    toast({\n      title: \"Welcome!\",\n      description: \"You're now logged in and can access our services.\",\n    });\n  };\n\n  return (\n    <>\n      <Helmet>\n        <title>How It Works - Professional Automotive Consultation Process | ChatWithMechanic.com</title>\n        <meta name=\"description\" content=\"Learn how ChatWithMechanic.com works. Simple 3-step process: fill vehicle info, pay $9.99, chat with certified mechanics. Get instant automotive advice with file upload support in minutes.\" />\n        <meta name=\"keywords\" content=\"how it works, automotive consultation process, mechanic chat steps, vehicle repair help, online automotive advice, car problem diagnosis\" />\n        \n        {/* Open Graph tags */}\n        <meta property=\"og:title\" content=\"How It Works - Professional Automotive Consultation Process\" />\n        <meta property=\"og:description\" content=\"Simple 3-step process to get professional automotive advice. Fill vehicle info, pay $9.99, chat with certified mechanics instantly.\" />\n        <meta property=\"og:type\" content=\"website\" />\n        <meta property=\"og:url\" content=\"https://chatwithmechanic.com/how-it-works\" />\n        \n        {/* Twitter Card tags */}\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta name=\"twitter:title\" content=\"How It Works - Automotive Consultation Process\" />\n        <meta name=\"twitter:description\" content=\"Learn how to get instant professional automotive advice through our simple 3-step process.\" />\n      </Helmet>\n\n      <div className=\"min-h-screen bg-background\">\n        <Header user={user as any} onLogin={handleLogin} onLogout={handleLogout} />\n\n        {/* Hero Section */}\n        <section className=\"py-20 px-4\">\n          <div className=\"container mx-auto text-center\">\n            <div className=\"flex justify-center mb-6\">\n              <ClipboardList className=\"h-16 w-16 text-primary\" />\n            </div>\n            <h1 className=\"text-4xl md:text-6xl font-bold mb-6\">\n              How It Works\n            </h1>\n            <p className=\"text-xl md:text-2xl text-muted-foreground mb-8 max-w-4xl mx-auto\">\n              Get professional automotive advice in just three simple steps. \n              Connect with certified mechanics instantly and solve your vehicle problems quickly.\n            </p>\n          </div>\n        </section>\n\n        {/* Process Steps */}\n        <section className=\"py-16 px-4\">\n          <div className=\"container mx-auto\">\n            <h2 className=\"text-3xl font-bold text-center mb-16\">\n              Simple 3-Step Process\n            </h2>\n            \n            <div className=\"grid lg:grid-cols-3 gap-8 mb-16\">\n              {/* Step 1 */}\n              <Card className=\"hover-elevate relative\">\n                <div className=\"absolute -top-4 -left-4 w-8 h-8 bg-primary text-white rounded-full flex items-center justify-center font-bold text-lg\">\n                  1\n                </div>\n                <CardContent className=\"p-8 text-center\">\n                  <ClipboardList className=\"h-16 w-16 text-primary mx-auto mb-6\" />\n                  <h3 className=\"text-2xl font-semibold mb-4\">Fill Vehicle Information</h3>\n                  <p className=\"text-muted-foreground text-lg leading-relaxed\">\n                    Tell us about your vehicle - make, model, year, engine type, and describe the issue you're experiencing. \n                    This helps our mechanics understand your specific situation.\n                  </p>\n                </CardContent>\n              </Card>\n\n              {/* Step 2 */}\n              <Card className=\"hover-elevate relative\">\n                <div className=\"absolute -top-4 -left-4 w-8 h-8 bg-primary text-white rounded-full flex items-center justify-center font-bold text-lg\">\n                  2\n                </div>\n                <CardContent className=\"p-8 text-center\">\n                  <CreditCard className=\"h-16 w-16 text-primary mx-auto mb-6\" />\n                  <h3 className=\"text-2xl font-semibold mb-4\">Secure Payment</h3>\n                  <p className=\"text-muted-foreground text-lg leading-relaxed\">\n                    Pay just $9.99 for 30 days of unlimited access to our certified mechanics. \n                    Secure payment processing with industry-standard encryption for your protection.\n                  </p>\n                </CardContent>\n              </Card>\n\n              {/* Step 3 */}\n              <Card className=\"hover-elevate relative\">\n                <div className=\"absolute -top-4 -left-4 w-8 h-8 bg-primary text-white rounded-full flex items-center justify-center font-bold text-lg\">\n                  3\n                </div>\n                <CardContent className=\"p-8 text-center\">\n                  <MessageCircle className=\"h-16 w-16 text-primary mx-auto mb-6\" />\n                  <h3 className=\"text-2xl font-semibold mb-4\">Chat with Experts</h3>\n                  <p className=\"text-muted-foreground text-lg leading-relaxed\">\n                    Instantly connect with certified mechanics who specialize in your vehicle type. \n                    Get professional advice, diagnostic help, and repair guidance in real-time.\n                  </p>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </section>\n\n        {/* Features */}\n        <section className=\"py-16 px-4 bg-card/50\">\n          <div className=\"container mx-auto\">\n            <h2 className=\"text-3xl font-bold text-center mb-12\">\n              What You Get\n            </h2>\n            \n            <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-8\">\n              <Card className=\"hover-elevate\">\n                <CardContent className=\"p-6 text-center\">\n                  <Upload className=\"h-12 w-12 text-primary mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-semibold mb-3\">File Upload Support</h3>\n                  <p className=\"text-muted-foreground\">\n                    Upload photos and videos of your vehicle issues to help mechanics provide more accurate diagnostics.\n                  </p>\n                </CardContent>\n              </Card>\n\n              <Card className=\"hover-elevate\">\n                <CardContent className=\"p-6 text-center\">\n                  <Clock className=\"h-12 w-12 text-primary mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-semibold mb-3\">24/7 Availability</h3>\n                  <p className=\"text-muted-foreground\">\n                    Access certified mechanics any time of day or night, including weekends and holidays.\n                  </p>\n                </CardContent>\n              </Card>\n\n              <Card className=\"hover-elevate\">\n                <CardContent className=\"p-6 text-center\">\n                  <CheckCircle className=\"h-12 w-12 text-primary mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-semibold mb-3\">Unlimited Consultations</h3>\n                  <p className=\"text-muted-foreground\">\n                    Ask as many questions as needed for 30 days. No limits on chat sessions or follow-up questions.\n                  </p>\n                </CardContent>\n              </Card>\n\n              <Card className=\"hover-elevate\">\n                <CardContent className=\"p-6 text-center\">\n                  <MessageCircle className=\"h-12 w-12 text-primary mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-semibold mb-3\">Real-Time Chat</h3>\n                  <p className=\"text-muted-foreground\">\n                    Instant messaging with certified mechanics - no waiting for email responses or scheduled calls.\n                  </p>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </section>\n\n        {/* Vehicle Types */}\n        <section className=\"py-16 px-4\">\n          <div className=\"container mx-auto\">\n            <h2 className=\"text-3xl font-bold text-center mb-12\">\n              All Vehicle Types Supported\n            </h2>\n            \n            <div className=\"grid md:grid-cols-2 lg:grid-cols-5 gap-6 text-center\">\n              <Link href=\"/vehicles/cars-trucks\" className=\"hover:text-primary\" data-testid=\"link-cars-trucks\">\n                <Card className=\"hover-elevate cursor-pointer\">\n                  <CardContent className=\"p-6\">\n                    <Car className=\"h-12 w-12 text-primary mx-auto mb-3\" />\n                    <h3 className=\"font-semibold\">Cars & Trucks</h3>\n                  </CardContent>\n                </Card>\n              </Link>\n\n              <Link href=\"/vehicles/motorcycles\" className=\"hover:text-primary\" data-testid=\"link-motorcycles\">\n                <Card className=\"hover-elevate cursor-pointer\">\n                  <CardContent className=\"p-6\">\n                    <Car className=\"h-12 w-12 text-primary mx-auto mb-3\" />\n                    <h3 className=\"font-semibold\">Motorcycles</h3>\n                  </CardContent>\n                </Card>\n              </Link>\n\n              <Link href=\"/vehicles/boats-watercraft\" className=\"hover:text-primary\" data-testid=\"link-boats\">\n                <Card className=\"hover-elevate cursor-pointer\">\n                  <CardContent className=\"p-6\">\n                    <Car className=\"h-12 w-12 text-primary mx-auto mb-3\" />\n                    <h3 className=\"font-semibold\">Boats & Watercraft</h3>\n                  </CardContent>\n                </Card>\n              </Link>\n\n              <Link href=\"/vehicles/buses\" className=\"hover:text-primary\" data-testid=\"link-buses\">\n                <Card className=\"hover-elevate cursor-pointer\">\n                  <CardContent className=\"p-6\">\n                    <Car className=\"h-12 w-12 text-primary mx-auto mb-3\" />\n                    <h3 className=\"font-semibold\">Buses</h3>\n                  </CardContent>\n                </Card>\n              </Link>\n\n              <Link href=\"/vehicles/construction-equipment\" className=\"hover:text-primary\" data-testid=\"link-construction\">\n                <Card className=\"hover-elevate cursor-pointer\">\n                  <CardContent className=\"p-6\">\n                    <Car className=\"h-12 w-12 text-primary mx-auto mb-3\" />\n                    <h3 className=\"font-semibold\">Construction Equipment</h3>\n                  </CardContent>\n                </Card>\n              </Link>\n            </div>\n          </div>\n        </section>\n\n        {/* CTA Section */}\n        <section className=\"py-16 px-4 bg-primary/10\">\n          <div className=\"container mx-auto text-center\">\n            <h2 className=\"text-3xl font-bold mb-6\">\n              Ready to Get Started?\n            </h2>\n            <p className=\"text-xl text-muted-foreground mb-8 max-w-2xl mx-auto\">\n              Join thousands of vehicle owners who trust ChatWithMechanic for reliable automotive advice. \n              Get started now and solve your vehicle problems today.\n            </p>\n            <Link href=\"/\" data-testid=\"button-start-now\">\n              <Button size=\"lg\" className=\"text-lg px-8 py-3\">\n                <MessageCircle className=\"mr-2 h-5 w-5\" />\n                Start Your Consultation - $9.99\n              </Button>\n            </Link>\n          </div>\n        </section>\n\n        <Footer />\n        \n        <LoginModal \n          open={showLogin}\n          onOpenChange={setShowLogin}\n          onLoginSuccess={handleLoginSuccess}\n        />\n      </div>\n    </>\n  );\n}","size_bytes":13004},"client/src/pages/MechanicVerification.tsx":{"content":"import { Helmet } from \"react-helmet-async\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport Footer from \"@/components/Footer\";\nimport Header from \"@/components/Header\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Link } from \"wouter\";\nimport { Shield, Award, CheckCircle, Users, GraduationCap, FileCheck } from \"lucide-react\";\n\nexport default function MechanicVerification() {\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  // Check if user is authenticated\n  const { data: user } = useQuery({\n    queryKey: ['/api/users/me'],\n    retry: false,\n    refetchOnWindowFocus: false,\n  });\n\n  // Logout mutation\n  const logoutMutation = useMutation({\n    mutationFn: () => apiRequest(\"POST\", \"/api/users/logout\"),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/users/me'] });\n      toast({\n        title: \"Logged out successfully\",\n        description: \"See you soon!\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Logout error\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleLogout = () => {\n    logoutMutation.mutate();\n  };\n\n  return (\n    <>\n      <Helmet>\n        <title>Mechanic Verification & Certification Process | ChatWithMechanic.com</title>\n        <meta name=\"description\" content=\"Learn about our rigorous mechanic verification process. All ChatWithMechanic.com mechanics are ASE certified professionals with verified credentials, experience, and ongoing training requirements.\" />\n        <meta name=\"keywords\" content=\"mechanic verification, ASE certification, automotive technician credentials, certified mechanics, professional verification, mechanic qualifications, automotive expertise\" />\n        \n        {/* Open Graph tags */}\n        <meta property=\"og:title\" content=\"Mechanic Verification & Certification Process\" />\n        <meta property=\"og:description\" content=\"Rigorous verification ensures all our mechanics are ASE certified professionals with verified credentials and automotive expertise.\" />\n        <meta property=\"og:type\" content=\"website\" />\n        <meta property=\"og:url\" content=\"https://chatwithmechanic.com/mechanic-verification\" />\n        \n        {/* Twitter Card tags */}\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta name=\"twitter:title\" content=\"Mechanic Verification & Certification Process\" />\n        <meta name=\"twitter:description\" content=\"Learn about our rigorous process for verifying and certifying automotive professionals.\" />\n      </Helmet>\n\n      <div className=\"min-h-screen bg-background\">\n        <Header user={user as any} onLogin={() => {}} onLogout={handleLogout} />\n\n        {/* Hero Section */}\n        <section className=\"py-20 px-4\">\n          <div className=\"container mx-auto text-center\">\n            <div className=\"flex justify-center mb-6\">\n              <Shield className=\"h-16 w-16 text-primary\" />\n            </div>\n            <h1 className=\"text-4xl md:text-6xl font-bold mb-6\">\n              Mechanic Verification & Certification\n            </h1>\n            <p className=\"text-xl md:text-2xl text-muted-foreground mb-8 max-w-4xl mx-auto\">\n              Trust is earned through rigorous verification. Every mechanic on our platform undergoes \n              comprehensive credential verification, skills assessment, and ongoing professional development.\n            </p>\n          </div>\n        </section>\n\n        {/* Verification Process */}\n        <section className=\"py-16 px-4\">\n          <div className=\"container mx-auto\">\n            <h2 className=\"text-3xl font-bold text-center mb-16\">\n              Our Rigorous Verification Process\n            </h2>\n            \n            <div className=\"grid lg:grid-cols-2 gap-12 items-center mb-16\">\n              <div>\n                <h3 className=\"text-2xl font-bold mb-6\">5-Step Verification System</h3>\n                <div className=\"space-y-6\">\n                  <div className=\"flex items-start space-x-4\">\n                    <div className=\"w-8 h-8 bg-primary text-white rounded-full flex items-center justify-center font-bold flex-shrink-0\">1</div>\n                    <div>\n                      <h4 className=\"font-semibold mb-2\">Credential Verification</h4>\n                      <p className=\"text-muted-foreground\">ASE certifications, state licenses, and professional credentials verified directly with issuing authorities.</p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-start space-x-4\">\n                    <div className=\"w-8 h-8 bg-primary text-white rounded-full flex items-center justify-center font-bold flex-shrink-0\">2</div>\n                    <div>\n                      <h4 className=\"font-semibold mb-2\">Experience Assessment</h4>\n                      <p className=\"text-muted-foreground\">Minimum 5 years professional automotive experience with detailed work history verification.</p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-start space-x-4\">\n                    <div className=\"w-8 h-8 bg-primary text-white rounded-full flex items-center justify-center font-bold flex-shrink-0\">3</div>\n                    <div>\n                      <h4 className=\"font-semibold mb-2\">Skills Testing</h4>\n                      <p className=\"text-muted-foreground\">Comprehensive technical knowledge assessment covering diagnostics, repair procedures, and safety protocols.</p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-start space-x-4\">\n                    <div className=\"w-8 h-8 bg-primary text-white rounded-full flex items-center justify-center font-bold flex-shrink-0\">4</div>\n                    <div>\n                      <h4 className=\"font-semibold mb-2\">Background Check</h4>\n                      <p className=\"text-muted-foreground\">Professional background verification and reference checks from previous employers or customers.</p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-start space-x-4\">\n                    <div className=\"w-8 h-8 bg-primary text-white rounded-full flex items-center justify-center font-bold flex-shrink-0\">5</div>\n                    <div>\n                      <h4 className=\"font-semibold mb-2\">Communication Assessment</h4>\n                      <p className=\"text-muted-foreground\">Evaluation of communication skills, customer service approach, and ability to explain technical concepts clearly.</p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"grid gap-6\">\n                <Card className=\"hover-elevate\">\n                  <CardContent className=\"p-6\">\n                    <Award className=\"h-12 w-12 text-primary mb-4\" />\n                    <h3 className=\"text-xl font-semibold mb-3\">ASE Certification Required</h3>\n                    <p className=\"text-muted-foreground\">\n                      All mechanics must hold current ASE (Automotive Service Excellence) certifications or equivalent professional credentials.\n                    </p>\n                  </CardContent>\n                </Card>\n                \n                <Card className=\"hover-elevate\">\n                  <CardContent className=\"p-6\">\n                    <GraduationCap className=\"h-12 w-12 text-primary mb-4\" />\n                    <h3 className=\"text-xl font-semibold mb-3\">Continuous Education</h3>\n                    <p className=\"text-muted-foreground\">\n                      Ongoing training requirements ensure our mechanics stay current with latest automotive technologies and repair techniques.\n                    </p>\n                  </CardContent>\n                </Card>\n              </div>\n            </div>\n          </div>\n        </section>\n\n        {/* Certifications */}\n        <section className=\"py-16 px-4 bg-card/50\">\n          <div className=\"container mx-auto\">\n            <h2 className=\"text-3xl font-bold text-center mb-12\">\n              Required Certifications & Specializations\n            </h2>\n            \n            <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n              <Card className=\"hover-elevate\">\n                <CardContent className=\"p-6 text-center\">\n                  <CheckCircle className=\"h-12 w-12 text-primary mx-auto mb-4\" />\n                  <h3 className=\"text-xl font-semibold mb-3\">Automotive Service Excellence (ASE)</h3>\n                  <p className=\"text-muted-foreground\">\n                    Industry-standard certification covering engine repair, brakes, electrical systems, and more.\n                  </p>\n                </CardContent>\n              </Card>\n\n              <Card className=\"hover-elevate\">\n                <CardContent className=\"p-6 text-center\">\n                  <CheckCircle className=\"h-12 w-12 text-primary mx-auto mb-4\" />\n                  <h3 className=\"text-xl font-semibold mb-3\">Marine Technician Certification</h3>\n                  <p className=\"text-muted-foreground\">\n                    Specialized certification for marine engines, boat systems, and watercraft maintenance.\n                  </p>\n                </CardContent>\n              </Card>\n\n              <Card className=\"hover-elevate\">\n                <CardContent className=\"p-6 text-center\">\n                  <CheckCircle className=\"h-12 w-12 text-primary mx-auto mb-4\" />\n                  <h3 className=\"text-xl font-semibold mb-3\">Heavy Equipment Certification</h3>\n                  <p className=\"text-muted-foreground\">\n                    Professional certification for construction equipment, hydraulics, and heavy machinery.\n                  </p>\n                </CardContent>\n              </Card>\n\n              <Card className=\"hover-elevate\">\n                <CardContent className=\"p-6 text-center\">\n                  <CheckCircle className=\"h-12 w-12 text-primary mx-auto mb-4\" />\n                  <h3 className=\"text-xl font-semibold mb-3\">Motorcycle Specialist Certification</h3>\n                  <p className=\"text-muted-foreground\">\n                    Specialized training in motorcycle engines, systems, and two-wheeler maintenance.\n                  </p>\n                </CardContent>\n              </Card>\n\n              <Card className=\"hover-elevate\">\n                <CardContent className=\"p-6 text-center\">\n                  <CheckCircle className=\"h-12 w-12 text-primary mx-auto mb-4\" />\n                  <h3 className=\"text-xl font-semibold mb-3\">Commercial Vehicle Certification</h3>\n                  <p className=\"text-muted-foreground\">\n                    Professional certification for buses, commercial trucks, and fleet vehicle maintenance.\n                  </p>\n                </CardContent>\n              </Card>\n\n              <Card className=\"hover-elevate\">\n                <CardContent className=\"p-6 text-center\">\n                  <CheckCircle className=\"h-12 w-12 text-primary mx-auto mb-4\" />\n                  <h3 className=\"text-xl font-semibold mb-3\">Diagnostic Technology Training</h3>\n                  <p className=\"text-muted-foreground\">\n                    Advanced training in modern diagnostic equipment and electronic vehicle systems.\n                  </p>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </section>\n\n        {/* Quality Assurance */}\n        <section className=\"py-16 px-4\">\n          <div className=\"container mx-auto\">\n            <h2 className=\"text-3xl font-bold text-center mb-12\">\n              Ongoing Quality Assurance\n            </h2>\n            \n            <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-8\">\n              <Card className=\"hover-elevate\">\n                <CardContent className=\"p-6 text-center\">\n                  <Users className=\"h-12 w-12 text-primary mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-semibold mb-3\">Customer Feedback</h3>\n                  <p className=\"text-muted-foreground\">\n                    Regular monitoring of customer satisfaction and feedback to ensure service quality.\n                  </p>\n                </CardContent>\n              </Card>\n\n              <Card className=\"hover-elevate\">\n                <CardContent className=\"p-6 text-center\">\n                  <FileCheck className=\"h-12 w-12 text-primary mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-semibold mb-3\">Performance Reviews</h3>\n                  <p className=\"text-muted-foreground\">\n                    Quarterly performance evaluations based on accuracy, response time, and customer satisfaction.\n                  </p>\n                </CardContent>\n              </Card>\n\n              <Card className=\"hover-elevate\">\n                <CardContent className=\"p-6 text-center\">\n                  <GraduationCap className=\"h-12 w-12 text-primary mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-semibold mb-3\">Training Updates</h3>\n                  <p className=\"text-muted-foreground\">\n                    Mandatory training on new vehicle technologies, safety protocols, and diagnostic techniques.\n                  </p>\n                </CardContent>\n              </Card>\n\n              <Card className=\"hover-elevate\">\n                <CardContent className=\"p-6 text-center\">\n                  <Shield className=\"h-12 w-12 text-primary mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-semibold mb-3\">Certification Renewal</h3>\n                  <p className=\"text-muted-foreground\">\n                    Annual verification of certification renewals and continuing education requirements.\n                  </p>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </section>\n\n        {/* Contact Section */}\n        <section className=\"py-16 px-4 bg-primary/10\">\n          <div className=\"container mx-auto text-center\">\n            <h2 className=\"text-3xl font-bold mb-6\">\n              Questions About Our Verification Process?\n            </h2>\n            <p className=\"text-xl text-muted-foreground mb-8 max-w-2xl mx-auto\">\n              Have questions about our mechanic verification standards or want to learn more about our quality assurance process? \n              Contact our team for detailed information.\n            </p>\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <Link href=\"/contact\" data-testid=\"link-contact-verification\">\n                <Button size=\"lg\" variant=\"outline\" className=\"text-lg px-8 py-3\">\n                  Contact Us\n                </Button>\n              </Link>\n              <a \n                href=\"mailto:support@chatwithmechanic.com\" \n                data-testid=\"link-email-verification\"\n              >\n                <Button size=\"lg\" className=\"text-lg px-8 py-3\">\n                  Email: support@chatwithmechanic.com\n                </Button>\n              </a>\n            </div>\n          </div>\n        </section>\n\n        <Footer />\n      </div>\n    </>\n  );\n}","size_bytes":15459},"client/src/pages/vehicles/BoatsAndWatercraft.tsx":{"content":"import { Helmet } from \"react-helmet-async\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport Footer from \"@/components/Footer\";\nimport Header from \"@/components/Header\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Link } from \"wouter\";\nimport { Car, Ship, Wrench, MessageCircle, Clock, CheckCircle } from \"lucide-react\";\n\nexport default function BoatsAndWatercraft() {\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  // Check if user is authenticated\n  const { data: user } = useQuery({\n    queryKey: ['/api/users/me'],\n    retry: false,\n    refetchOnWindowFocus: false,\n  });\n\n  // Logout mutation\n  const logoutMutation = useMutation({\n    mutationFn: () => apiRequest(\"POST\", \"/api/users/logout\"),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/users/me'] });\n      toast({\n        title: \"Logged out successfully\",\n        description: \"See you soon!\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Logout error\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleLogout = () => {\n    logoutMutation.mutate();\n  };\n\n  return (\n    <>\n      <Helmet>\n        <title>Professional Boat & Marine Engine Repair Advice - ChatWithMechanic.com</title>\n        <meta name=\"description\" content=\"Expert marine engine and boat repair advice from certified marine mechanics. Get instant help with boat problems, engine diagnostics, and watercraft maintenance. $9.99 for unlimited consultation.\" />\n        <meta name=\"keywords\" content=\"boat repair advice, marine engine help, watercraft maintenance, boat mechanic chat, marine diagnostics, boat engine problems, yacht repair\" />\n        \n        {/* Open Graph tags */}\n        <meta property=\"og:title\" content=\"Professional Boat & Marine Engine Repair Advice - ChatWithMechanic.com\" />\n        <meta property=\"og:description\" content=\"Expert marine engine and boat repair advice from certified marine mechanics. Get instant help with boat problems and maintenance.\" />\n        <meta property=\"og:type\" content=\"website\" />\n        <meta property=\"og:url\" content=\"https://chatwithmechanic.com/vehicles/boats-watercraft\" />\n        \n        {/* Twitter Card tags */}\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta name=\"twitter:title\" content=\"Professional Boat & Marine Engine Repair Advice\" />\n        <meta name=\"twitter:description\" content=\"Expert marine engine and boat repair advice from certified marine mechanics. Instant watercraft consultation available.\" />\n      </Helmet>\n\n      <div className=\"min-h-screen bg-background\">\n        <Header user={user as any} onLogin={() => {}} onLogout={handleLogout} />\n\n        {/* Hero Section */}\n        <section className=\"py-20 px-4\">\n          <div className=\"container mx-auto text-center\">\n            <div className=\"flex justify-center mb-6\">\n              <Ship className=\"h-16 w-16 text-primary\" />\n            </div>\n            <h1 className=\"text-4xl md:text-6xl font-bold mb-6\">\n              Expert Marine Engine & Boat Repair Advice\n            </h1>\n            <p className=\"text-xl md:text-2xl text-muted-foreground mb-8 max-w-4xl mx-auto\">\n              Get instant professional marine consultation from certified mechanics who understand boats and watercraft. \n              From engine diagnostics to hull maintenance, we keep you on the water.\n            </p>\n            <Link href=\"/\" data-testid=\"button-start-chat\">\n              <Button size=\"lg\" className=\"text-lg px-8 py-3\">\n                <MessageCircle className=\"mr-2 h-5 w-5\" />\n                Start Chat for $9.99\n              </Button>\n            </Link>\n          </div>\n        </section>\n\n        {/* Features */}\n        <section className=\"py-16 px-4 bg-card/50\">\n          <div className=\"container mx-auto\">\n            <h2 className=\"text-3xl font-bold text-center mb-12\">\n              Comprehensive Marine Support\n            </h2>\n            \n            <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n              <Card className=\"hover-elevate\">\n                <CardContent className=\"p-6 text-center\">\n                  <Wrench className=\"h-12 w-12 text-primary mx-auto mb-4\" />\n                  <h3 className=\"text-xl font-semibold mb-3\">Marine Engine Diagnostics</h3>\n                  <p className=\"text-muted-foreground\">\n                    Expert diagnosis of inboard, outboard, and sterndrive engines. Troubleshoot performance issues and mechanical problems.\n                  </p>\n                </CardContent>\n              </Card>\n\n              <Card className=\"hover-elevate\">\n                <CardContent className=\"p-6 text-center\">\n                  <CheckCircle className=\"h-12 w-12 text-primary mx-auto mb-4\" />\n                  <h3 className=\"text-xl font-semibold mb-3\">Maintenance Guidance</h3>\n                  <p className=\"text-muted-foreground\">\n                    Learn proper marine maintenance, winterization, corrosion prevention, and seasonal preparation for your watercraft.\n                  </p>\n                </CardContent>\n              </Card>\n\n              <Card className=\"hover-elevate\">\n                <CardContent className=\"p-6 text-center\">\n                  <Clock className=\"h-12 w-12 text-primary mx-auto mb-4\" />\n                  <h3 className=\"text-xl font-semibold mb-3\">Emergency Marine Support</h3>\n                  <p className=\"text-muted-foreground\">\n                    24/7 support for marine emergencies, engine failures, and safety concerns when you're out on the water.\n                  </p>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </section>\n\n        {/* Common Issues */}\n        <section className=\"py-16 px-4\">\n          <div className=\"container mx-auto\">\n            <h2 className=\"text-3xl font-bold text-center mb-12\">\n              Common Marine Issues We Help Solve\n            </h2>\n            \n            <div className=\"grid md:grid-cols-2 gap-8 max-w-4xl mx-auto\">\n              <div>\n                <h3 className=\"text-xl font-semibold mb-4\">Engine & Performance</h3>\n                <ul className=\"space-y-2 text-muted-foreground\">\n                  <li>• Engine starting problems</li>\n                  <li>• Overheating and cooling issues</li>\n                  <li>• Fuel system problems</li>\n                  <li>• Propeller and drive issues</li>\n                  <li>• Power loss and performance</li>\n                </ul>\n              </div>\n              \n              <div>\n                <h3 className=\"text-xl font-semibold mb-4\">Systems & Maintenance</h3>\n                <ul className=\"space-y-2 text-muted-foreground\">\n                  <li>• Electrical system diagnosis</li>\n                  <li>• Hull and structural issues</li>\n                  <li>• Steering and control problems</li>\n                  <li>• Corrosion and salt damage</li>\n                  <li>• Winterization and storage</li>\n                </ul>\n              </div>\n            </div>\n          </div>\n        </section>\n\n        {/* CTA Section */}\n        <section className=\"py-16 px-4 bg-primary/10\">\n          <div className=\"container mx-auto text-center\">\n            <h2 className=\"text-3xl font-bold mb-6\">\n              Get Professional Marine Advice Now\n            </h2>\n            <p className=\"text-xl text-muted-foreground mb-8 max-w-2xl mx-auto\">\n              Don't let marine engine problems ruin your time on the water. Connect with certified marine mechanics \n              who understand the unique challenges of watercraft maintenance.\n            </p>\n            <Link href=\"/\" data-testid=\"button-start-consultation\">\n              <Button size=\"lg\" className=\"text-lg px-8 py-3\">\n                Start Your Marine Consultation - $9.99\n              </Button>\n            </Link>\n          </div>\n        </section>\n\n        <Footer />\n      </div>\n    </>\n  );\n}","size_bytes":8205},"client/src/pages/vehicles/Buses.tsx":{"content":"import { Helmet } from \"react-helmet-async\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport Footer from \"@/components/Footer\";\nimport Header from \"@/components/Header\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Link } from \"wouter\";\nimport { Car, Bus, Wrench, MessageCircle, Clock, CheckCircle } from \"lucide-react\";\n\nexport default function Buses() {\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  // Check if user is authenticated\n  const { data: user } = useQuery({\n    queryKey: ['/api/users/me'],\n    retry: false,\n    refetchOnWindowFocus: false,\n  });\n\n  // Logout mutation\n  const logoutMutation = useMutation({\n    mutationFn: () => apiRequest(\"POST\", \"/api/users/logout\"),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/users/me'] });\n      toast({\n        title: \"Logged out successfully\",\n        description: \"See you soon!\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Logout error\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleLogout = () => {\n    logoutMutation.mutate();\n  };\n\n  return (\n    <>\n      <Helmet>\n        <title>Professional Bus & Commercial Vehicle Repair Advice - ChatWithMechanic.com</title>\n        <meta name=\"description\" content=\"Expert bus and commercial vehicle repair advice from certified mechanics. Get instant help with fleet maintenance, engine diagnostics, and commercial transport issues. $9.99 consultation.\" />\n        <meta name=\"keywords\" content=\"bus repair advice, commercial vehicle help, fleet maintenance, bus mechanic chat, transit vehicle repair, school bus maintenance, coach repair\" />\n        \n        {/* Open Graph tags */}\n        <meta property=\"og:title\" content=\"Professional Bus & Commercial Vehicle Repair Advice - ChatWithMechanic.com\" />\n        <meta property=\"og:description\" content=\"Expert bus and commercial vehicle repair advice from certified mechanics. Fleet maintenance and commercial transport solutions.\" />\n        <meta property=\"og:type\" content=\"website\" />\n        <meta property=\"og:url\" content=\"https://chatwithmechanic.com/vehicles/buses\" />\n        \n        {/* Twitter Card tags */}\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta name=\"twitter:title\" content=\"Professional Bus & Commercial Vehicle Repair Advice\" />\n        <meta name=\"twitter:description\" content=\"Expert bus and commercial vehicle repair advice from certified mechanics. Fleet maintenance solutions available.\" />\n      </Helmet>\n\n      <div className=\"min-h-screen bg-background\">\n        <Header user={user as any} onLogin={() => {}} onLogout={handleLogout} />\n\n        {/* Hero Section */}\n        <section className=\"py-20 px-4\">\n          <div className=\"container mx-auto text-center\">\n            <div className=\"flex justify-center mb-6\">\n              <Bus className=\"h-16 w-16 text-primary\" />\n            </div>\n            <h1 className=\"text-4xl md:text-6xl font-bold mb-6\">\n              Expert Bus & Commercial Vehicle Repair Advice\n            </h1>\n            <p className=\"text-xl md:text-2xl text-muted-foreground mb-8 max-w-4xl mx-auto\">\n              Get instant professional consultation for buses and commercial vehicles from certified mechanics \n              who understand fleet operations, safety requirements, and heavy-duty maintenance.\n            </p>\n            <Link href=\"/\" data-testid=\"button-start-chat\">\n              <Button size=\"lg\" className=\"text-lg px-8 py-3\">\n                <MessageCircle className=\"mr-2 h-5 w-5\" />\n                Start Chat for $9.99\n              </Button>\n            </Link>\n          </div>\n        </section>\n\n        {/* Features */}\n        <section className=\"py-16 px-4 bg-card/50\">\n          <div className=\"container mx-auto\">\n            <h2 className=\"text-3xl font-bold text-center mb-12\">\n              Specialized Commercial Vehicle Support\n            </h2>\n            \n            <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n              <Card className=\"hover-elevate\">\n                <CardContent className=\"p-6 text-center\">\n                  <Wrench className=\"h-12 w-12 text-primary mx-auto mb-4\" />\n                  <h3 className=\"text-xl font-semibold mb-3\">Heavy-Duty Diagnostics</h3>\n                  <p className=\"text-muted-foreground\">\n                    Expert diagnosis of heavy-duty engines, transmission systems, and commercial vehicle-specific problems.\n                  </p>\n                </CardContent>\n              </Card>\n\n              <Card className=\"hover-elevate\">\n                <CardContent className=\"p-6 text-center\">\n                  <CheckCircle className=\"h-12 w-12 text-primary mx-auto mb-4\" />\n                  <h3 className=\"text-xl font-semibold mb-3\">Fleet Maintenance</h3>\n                  <p className=\"text-muted-foreground\">\n                    Comprehensive maintenance planning, safety inspections, and preventive care for commercial fleets.\n                  </p>\n                </CardContent>\n              </Card>\n\n              <Card className=\"hover-elevate\">\n                <CardContent className=\"p-6 text-center\">\n                  <Clock className=\"h-12 w-12 text-primary mx-auto mb-4\" />\n                  <h3 className=\"text-xl font-semibold mb-3\">Emergency Support</h3>\n                  <p className=\"text-muted-foreground\">\n                    24/7 emergency support for commercial vehicle breakdowns and urgent safety concerns.\n                  </p>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </section>\n\n        {/* Common Issues */}\n        <section className=\"py-16 px-4\">\n          <div className=\"container mx-auto\">\n            <h2 className=\"text-3xl font-bold text-center mb-12\">\n              Common Bus & Commercial Vehicle Issues\n            </h2>\n            \n            <div className=\"grid md:grid-cols-2 gap-8 max-w-4xl mx-auto\">\n              <div>\n                <h3 className=\"text-xl font-semibold mb-4\">Engine & Drivetrain</h3>\n                <ul className=\"space-y-2 text-muted-foreground\">\n                  <li>• Diesel engine performance issues</li>\n                  <li>• Transmission and clutch problems</li>\n                  <li>• Cooling system maintenance</li>\n                  <li>• Fuel system diagnostics</li>\n                  <li>• Turbocharger issues</li>\n                </ul>\n              </div>\n              \n              <div>\n                <h3 className=\"text-xl font-semibold mb-4\">Safety & Systems</h3>\n                <ul className=\"space-y-2 text-muted-foreground\">\n                  <li>• Air brake system maintenance</li>\n                  <li>• Electrical system diagnosis</li>\n                  <li>• Suspension and steering</li>\n                  <li>• HVAC system problems</li>\n                  <li>• Safety inspection guidance</li>\n                </ul>\n              </div>\n            </div>\n          </div>\n        </section>\n\n        {/* CTA Section */}\n        <section className=\"py-16 px-4 bg-primary/10\">\n          <div className=\"container mx-auto text-center\">\n            <h2 className=\"text-3xl font-bold mb-6\">\n              Get Professional Commercial Vehicle Advice\n            </h2>\n            <p className=\"text-xl text-muted-foreground mb-8 max-w-2xl mx-auto\">\n              Keep your buses and commercial vehicles running safely and efficiently with expert guidance \n              from mechanics who understand commercial transport requirements.\n            </p>\n            <Link href=\"/\" data-testid=\"button-start-consultation\">\n              <Button size=\"lg\" className=\"text-lg px-8 py-3\">\n                Start Your Fleet Consultation - $9.99\n              </Button>\n            </Link>\n          </div>\n        </section>\n\n        <Footer />\n      </div>\n    </>\n  );\n}","size_bytes":8122},"client/src/pages/vehicles/CarsAndTrucks.tsx":{"content":"import { useState } from \"react\";\nimport { Helmet } from \"react-helmet-async\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport Footer from \"@/components/Footer\";\nimport Header from \"@/components/Header\";\nimport LoginModal from \"@/components/LoginModal\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Link } from \"wouter\";\nimport { Car, Truck, Wrench, MessageCircle, Clock, CheckCircle } from \"lucide-react\";\n\nexport default function CarsAndTrucks() {\n  const [showLogin, setShowLogin] = useState(false);\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  // Check if user is authenticated\n  const { data: user } = useQuery({\n    queryKey: ['/api/users/me'],\n    retry: false,\n    refetchOnWindowFocus: false,\n  });\n\n  // Logout mutation\n  const logoutMutation = useMutation({\n    mutationFn: () => apiRequest(\"POST\", \"/api/users/logout\"),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/users/me'] });\n      toast({\n        title: \"Logged out successfully\",\n        description: \"See you soon!\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Logout error\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleLogout = () => {\n    logoutMutation.mutate();\n  };\n\n  const handleLogin = () => {\n    setShowLogin(true);\n  };\n\n  const handleLoginSuccess = () => {\n    toast({\n      title: \"Welcome!\",\n      description: \"You're now logged in and can access our services.\",\n    });\n  };\n\n  return (\n    <>\n      <Helmet>\n        <title>Professional Car & Truck Repair Advice - ChatWithMechanic.com</title>\n        <meta name=\"description\" content=\"Get instant expert automotive advice for cars and trucks from certified mechanics. $9.99 for unlimited chat access. Professional diagnosis, repair guidance, and maintenance tips available 24/7.\" />\n        <meta name=\"keywords\" content=\"car repair advice, truck repair help, automotive consultation, mechanic chat, vehicle diagnostics, car problems, truck maintenance\" />\n        \n        {/* Open Graph tags */}\n        <meta property=\"og:title\" content=\"Professional Car & Truck Repair Advice - ChatWithMechanic.com\" />\n        <meta property=\"og:description\" content=\"Get instant expert automotive advice for cars and trucks from certified mechanics. $9.99 for unlimited chat access.\" />\n        <meta property=\"og:type\" content=\"website\" />\n        <meta property=\"og:url\" content=\"https://chatwithmechanic.com/vehicles/cars-trucks\" />\n        \n        {/* Twitter Card tags */}\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta name=\"twitter:title\" content=\"Professional Car & Truck Repair Advice\" />\n        <meta name=\"twitter:description\" content=\"Get instant expert automotive advice for cars and trucks from certified mechanics. $9.99 for unlimited chat access.\" />\n      </Helmet>\n\n      <div className=\"min-h-screen bg-background\">\n        <Header user={user as any} onLogin={handleLogin} onLogout={handleLogout} />\n\n        {/* Hero Section */}\n        <section className=\"py-20 px-4\">\n          <div className=\"container mx-auto text-center\">\n            <div className=\"flex justify-center space-x-4 mb-6\">\n              <Car className=\"h-16 w-16 text-primary\" />\n              <Truck className=\"h-16 w-16 text-primary\" />\n            </div>\n            <h1 className=\"text-4xl md:text-6xl font-bold mb-6\">\n              Expert Car & Truck Repair Advice\n            </h1>\n            <p className=\"text-xl md:text-2xl text-muted-foreground mb-8 max-w-4xl mx-auto\">\n              Get instant professional automotive consultation for your car or truck from certified mechanics. \n              Diagnose problems, get repair guidance, and learn proper maintenance techniques.\n            </p>\n            <Link href=\"/\" data-testid=\"button-start-chat\">\n              <Button size=\"lg\" className=\"text-lg px-8 py-3\">\n                <MessageCircle className=\"mr-2 h-5 w-5\" />\n                Start Chat for $9.99\n              </Button>\n            </Link>\n          </div>\n        </section>\n\n        {/* Features */}\n        <section className=\"py-16 px-4 bg-card/50\">\n          <div className=\"container mx-auto\">\n            <h2 className=\"text-3xl font-bold text-center mb-12\">\n              Comprehensive Car & Truck Support\n            </h2>\n            \n            <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n              <Card className=\"hover-elevate\">\n                <CardContent className=\"p-6 text-center\">\n                  <Wrench className=\"h-12 w-12 text-primary mx-auto mb-4\" />\n                  <h3 className=\"text-xl font-semibold mb-3\">Engine Diagnostics</h3>\n                  <p className=\"text-muted-foreground\">\n                    Professional diagnosis of engine problems, performance issues, and mechanical failures for both cars and trucks.\n                  </p>\n                </CardContent>\n              </Card>\n\n              <Card className=\"hover-elevate\">\n                <CardContent className=\"p-6 text-center\">\n                  <CheckCircle className=\"h-12 w-12 text-primary mx-auto mb-4\" />\n                  <h3 className=\"text-xl font-semibold mb-3\">Maintenance Guidance</h3>\n                  <p className=\"text-muted-foreground\">\n                    Learn proper maintenance schedules, fluid changes, tire care, and preventive measures to keep your vehicle running smoothly.\n                  </p>\n                </CardContent>\n              </Card>\n\n              <Card className=\"hover-elevate\">\n                <CardContent className=\"p-6 text-center\">\n                  <Clock className=\"h-12 w-12 text-primary mx-auto mb-4\" />\n                  <h3 className=\"text-xl font-semibold mb-3\">Emergency Support</h3>\n                  <p className=\"text-muted-foreground\">\n                    24/7 availability for urgent automotive problems. Get immediate guidance for breakdowns and safety concerns.\n                  </p>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </section>\n\n        {/* Common Issues */}\n        <section className=\"py-16 px-4\">\n          <div className=\"container mx-auto\">\n            <h2 className=\"text-3xl font-bold text-center mb-12\">\n              Common Car & Truck Issues We Help With\n            </h2>\n            \n            <div className=\"grid md:grid-cols-2 gap-8 max-w-4xl mx-auto\">\n              <div>\n                <h3 className=\"text-xl font-semibold mb-4\">Engine & Performance</h3>\n                <ul className=\"space-y-2 text-muted-foreground\">\n                  <li>• Engine noises and unusual sounds</li>\n                  <li>• Poor acceleration or power loss</li>\n                  <li>• Overheating issues</li>\n                  <li>• Starting problems</li>\n                  <li>• Fuel efficiency concerns</li>\n                </ul>\n              </div>\n              \n              <div>\n                <h3 className=\"text-xl font-semibold mb-4\">Systems & Components</h3>\n                <ul className=\"space-y-2 text-muted-foreground\">\n                  <li>• Brake system diagnosis</li>\n                  <li>• Transmission problems</li>\n                  <li>• Electrical system issues</li>\n                  <li>• Air conditioning & heating</li>\n                  <li>• Suspension and steering</li>\n                </ul>\n              </div>\n            </div>\n          </div>\n        </section>\n\n        {/* CTA Section */}\n        <section className=\"py-16 px-4 bg-primary/10\">\n          <div className=\"container mx-auto text-center\">\n            <h2 className=\"text-3xl font-bold mb-6\">\n              Get Professional Car & Truck Advice Now\n            </h2>\n            <p className=\"text-xl text-muted-foreground mb-8 max-w-2xl mx-auto\">\n              Don't let automotive problems leave you stranded. Connect with certified mechanics \n              who understand cars and trucks inside and out.\n            </p>\n            <Link href=\"/\" data-testid=\"button-start-consultation\">\n              <Button size=\"lg\" className=\"text-lg px-8 py-3\">\n                Start Your Consultation - $9.99\n              </Button>\n            </Link>\n          </div>\n        </section>\n\n        <Footer />\n        \n        <LoginModal \n          open={showLogin}\n          onOpenChange={setShowLogin}\n          onLoginSuccess={handleLoginSuccess}\n        />\n      </div>\n    </>\n  );\n}","size_bytes":8655},"client/src/pages/vehicles/ConstructionEquipment.tsx":{"content":"import { Helmet } from \"react-helmet-async\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport Footer from \"@/components/Footer\";\nimport Header from \"@/components/Header\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Link } from \"wouter\";\nimport { Car, Construction, Wrench, MessageCircle, Clock, CheckCircle } from \"lucide-react\";\n\nexport default function ConstructionEquipment() {\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  // Check if user is authenticated\n  const { data: user } = useQuery({\n    queryKey: ['/api/users/me'],\n    retry: false,\n    refetchOnWindowFocus: false,\n  });\n\n  // Logout mutation\n  const logoutMutation = useMutation({\n    mutationFn: () => apiRequest(\"POST\", \"/api/users/logout\"),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/users/me'] });\n      toast({\n        title: \"Logged out successfully\",\n        description: \"See you soon!\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Logout error\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleLogout = () => {\n    logoutMutation.mutate();\n  };\n\n  return (\n    <>\n      <Helmet>\n        <title>Professional Construction Equipment Repair Advice - ChatWithMechanic.com</title>\n        <meta name=\"description\" content=\"Expert construction equipment and heavy machinery repair advice from certified mechanics. Get instant help with excavators, bulldozers, cranes, and construction vehicle maintenance. $9.99 consultation.\" />\n        <meta name=\"keywords\" content=\"construction equipment repair, heavy machinery advice, excavator problems, bulldozer maintenance, crane repair, construction vehicle help, heavy equipment mechanic\" />\n        \n        {/* Open Graph tags */}\n        <meta property=\"og:title\" content=\"Professional Construction Equipment Repair Advice - ChatWithMechanic.com\" />\n        <meta property=\"og:description\" content=\"Expert construction equipment and heavy machinery repair advice from certified mechanics. Heavy equipment maintenance solutions.\" />\n        <meta property=\"og:type\" content=\"website\" />\n        <meta property=\"og:url\" content=\"https://chatwithmechanic.com/vehicles/construction-equipment\" />\n        \n        {/* Twitter Card tags */}\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta name=\"twitter:title\" content=\"Professional Construction Equipment Repair Advice\" />\n        <meta name=\"twitter:description\" content=\"Expert construction equipment and heavy machinery repair advice from certified mechanics.\" />\n      </Helmet>\n\n      <div className=\"min-h-screen bg-background\">\n        <Header user={user as any} onLogin={() => {}} onLogout={handleLogout} />\n\n        {/* Hero Section */}\n        <section className=\"py-20 px-4\">\n          <div className=\"container mx-auto text-center\">\n            <div className=\"flex justify-center mb-6\">\n              <Construction className=\"h-16 w-16 text-primary\" />\n            </div>\n            <h1 className=\"text-4xl md:text-6xl font-bold mb-6\">\n              Expert Construction Equipment Repair Advice\n            </h1>\n            <p className=\"text-xl md:text-2xl text-muted-foreground mb-8 max-w-4xl mx-auto\">\n              Get instant professional consultation for construction equipment and heavy machinery from certified mechanics \n              who understand hydraulics, heavy-duty engines, and industrial equipment maintenance.\n            </p>\n            <Link href=\"/\" data-testid=\"button-start-chat\">\n              <Button size=\"lg\" className=\"text-lg px-8 py-3\">\n                <MessageCircle className=\"mr-2 h-5 w-5\" />\n                Start Chat for $9.99\n              </Button>\n            </Link>\n          </div>\n        </section>\n\n        {/* Features */}\n        <section className=\"py-16 px-4 bg-card/50\">\n          <div className=\"container mx-auto\">\n            <h2 className=\"text-3xl font-bold text-center mb-12\">\n              Specialized Heavy Equipment Support\n            </h2>\n            \n            <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n              <Card className=\"hover-elevate\">\n                <CardContent className=\"p-6 text-center\">\n                  <Wrench className=\"h-12 w-12 text-primary mx-auto mb-4\" />\n                  <h3 className=\"text-xl font-semibold mb-3\">Hydraulic Systems</h3>\n                  <p className=\"text-muted-foreground\">\n                    Expert diagnosis of hydraulic pumps, cylinders, valves, and fluid systems for construction machinery.\n                  </p>\n                </CardContent>\n              </Card>\n\n              <Card className=\"hover-elevate\">\n                <CardContent className=\"p-6 text-center\">\n                  <CheckCircle className=\"h-12 w-12 text-primary mx-auto mb-4\" />\n                  <h3 className=\"text-xl font-semibold mb-3\">Preventive Maintenance</h3>\n                  <p className=\"text-muted-foreground\">\n                    Comprehensive maintenance schedules, fluid analysis, and preventive care for heavy equipment longevity.\n                  </p>\n                </CardContent>\n              </Card>\n\n              <Card className=\"hover-elevate\">\n                <CardContent className=\"p-6 text-center\">\n                  <Clock className=\"h-12 w-12 text-primary mx-auto mb-4\" />\n                  <h3 className=\"text-xl font-semibold mb-3\">Field Support</h3>\n                  <p className=\"text-muted-foreground\">\n                    24/7 emergency support for equipment breakdowns and urgent repair guidance in the field.\n                  </p>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </section>\n\n        {/* Common Issues */}\n        <section className=\"py-16 px-4\">\n          <div className=\"container mx-auto\">\n            <h2 className=\"text-3xl font-bold text-center mb-12\">\n              Common Construction Equipment Issues\n            </h2>\n            \n            <div className=\"grid md:grid-cols-2 gap-8 max-w-4xl mx-auto\">\n              <div>\n                <h3 className=\"text-xl font-semibold mb-4\">Hydraulic & Engine</h3>\n                <ul className=\"space-y-2 text-muted-foreground\">\n                  <li>• Hydraulic pump failures</li>\n                  <li>• Engine overheating issues</li>\n                  <li>• Hydraulic fluid leaks</li>\n                  <li>• Turbocharger problems</li>\n                  <li>• Cooling system maintenance</li>\n                </ul>\n              </div>\n              \n              <div>\n                <h3 className=\"text-xl font-semibold mb-4\">Systems & Components</h3>\n                <ul className=\"space-y-2 text-muted-foreground\">\n                  <li>• Track and undercarriage wear</li>\n                  <li>• Electrical system diagnosis</li>\n                  <li>• Transmission and drivetrain</li>\n                  <li>• Attachment and implement issues</li>\n                  <li>• Control system problems</li>\n                </ul>\n              </div>\n            </div>\n          </div>\n        </section>\n\n        {/* CTA Section */}\n        <section className=\"py-16 px-4 bg-primary/10\">\n          <div className=\"container mx-auto text-center\">\n            <h2 className=\"text-3xl font-bold mb-6\">\n              Get Professional Heavy Equipment Advice\n            </h2>\n            <p className=\"text-xl text-muted-foreground mb-8 max-w-2xl mx-auto\">\n              Maximize uptime and reduce maintenance costs with expert guidance from mechanics \n              who specialize in construction equipment and heavy machinery.\n            </p>\n            <Link href=\"/\" data-testid=\"button-start-consultation\">\n              <Button size=\"lg\" className=\"text-lg px-8 py-3\">\n                Start Your Equipment Consultation - $9.99\n              </Button>\n            </Link>\n          </div>\n        </section>\n\n        <Footer />\n      </div>\n    </>\n  );\n}","size_bytes":8178},"client/src/pages/vehicles/Motorcycles.tsx":{"content":"import { Helmet } from \"react-helmet-async\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport Footer from \"@/components/Footer\";\nimport Header from \"@/components/Header\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Link } from \"wouter\";\nimport { Car, Bike, Wrench, MessageCircle, Clock, CheckCircle } from \"lucide-react\";\n\nexport default function Motorcycles() {\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  // Check if user is authenticated\n  const { data: user } = useQuery({\n    queryKey: ['/api/users/me'],\n    retry: false,\n    refetchOnWindowFocus: false,\n  });\n\n  // Logout mutation\n  const logoutMutation = useMutation({\n    mutationFn: () => apiRequest(\"POST\", \"/api/users/logout\"),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/users/me'] });\n      toast({\n        title: \"Logged out successfully\",\n        description: \"See you soon!\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Logout error\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleLogout = () => {\n    logoutMutation.mutate();\n  };\n\n  return (\n    <>\n      <Helmet>\n        <title>Professional Motorcycle Repair Advice & Diagnostics - ChatWithMechanic.com</title>\n        <meta name=\"description\" content=\"Expert motorcycle repair advice from certified mechanics. Get instant help with bike problems, maintenance, and performance issues. $9.99 for unlimited motorcycle consultation chat access.\" />\n        <meta name=\"keywords\" content=\"motorcycle repair advice, bike mechanic chat, motorcycle diagnostics, bike maintenance, motorcycle problems, two-wheeler repair help\" />\n        \n        {/* Open Graph tags */}\n        <meta property=\"og:title\" content=\"Professional Motorcycle Repair Advice & Diagnostics - ChatWithMechanic.com\" />\n        <meta property=\"og:description\" content=\"Expert motorcycle repair advice from certified mechanics. Get instant help with bike problems, maintenance, and performance issues.\" />\n        <meta property=\"og:type\" content=\"website\" />\n        <meta property=\"og:url\" content=\"https://chatwithmechanic.com/vehicles/motorcycles\" />\n        \n        {/* Twitter Card tags */}\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta name=\"twitter:title\" content=\"Professional Motorcycle Repair Advice & Diagnostics\" />\n        <meta name=\"twitter:description\" content=\"Expert motorcycle repair advice from certified mechanics. Get instant help with bike problems and maintenance.\" />\n      </Helmet>\n\n      <div className=\"min-h-screen bg-background\">\n        <Header user={user as any} onLogin={() => {}} onLogout={handleLogout} />\n\n        {/* Hero Section */}\n        <section className=\"py-20 px-4\">\n          <div className=\"container mx-auto text-center\">\n            <div className=\"flex justify-center mb-6\">\n              <Bike className=\"h-16 w-16 text-primary\" />\n            </div>\n            <h1 className=\"text-4xl md:text-6xl font-bold mb-6\">\n              Expert Motorcycle Repair Advice\n            </h1>\n            <p className=\"text-xl md:text-2xl text-muted-foreground mb-8 max-w-4xl mx-auto\">\n              Get instant professional motorcycle consultation from certified mechanics who understand bikes. \n              From engine diagnostics to electrical issues, we've got your ride covered.\n            </p>\n            <Link href=\"/\" data-testid=\"button-start-chat\">\n              <Button size=\"lg\" className=\"text-lg px-8 py-3\">\n                <MessageCircle className=\"mr-2 h-5 w-5\" />\n                Start Chat for $9.99\n              </Button>\n            </Link>\n          </div>\n        </section>\n\n        {/* Features */}\n        <section className=\"py-16 px-4 bg-card/50\">\n          <div className=\"container mx-auto\">\n            <h2 className=\"text-3xl font-bold text-center mb-12\">\n              Specialized Motorcycle Support\n            </h2>\n            \n            <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n              <Card className=\"hover-elevate\">\n                <CardContent className=\"p-6 text-center\">\n                  <Wrench className=\"h-12 w-12 text-primary mx-auto mb-4\" />\n                  <h3 className=\"text-xl font-semibold mb-3\">Engine & Performance</h3>\n                  <p className=\"text-muted-foreground\">\n                    Expert diagnosis of motorcycle engine issues, carburetor problems, fuel injection, and performance optimization.\n                  </p>\n                </CardContent>\n              </Card>\n\n              <Card className=\"hover-elevate\">\n                <CardContent className=\"p-6 text-center\">\n                  <CheckCircle className=\"h-12 w-12 text-primary mx-auto mb-4\" />\n                  <h3 className=\"text-xl font-semibold mb-3\">Maintenance & Care</h3>\n                  <p className=\"text-muted-foreground\">\n                    Learn proper motorcycle maintenance, chain care, tire pressure, oil changes, and seasonal preparation.\n                  </p>\n                </CardContent>\n              </Card>\n\n              <Card className=\"hover-elevate\">\n                <CardContent className=\"p-6 text-center\">\n                  <Clock className=\"h-12 w-12 text-primary mx-auto mb-4\" />\n                  <h3 className=\"text-xl font-semibold mb-3\">Emergency Roadside Help</h3>\n                  <p className=\"text-muted-foreground\">\n                    24/7 support for motorcycle breakdowns, safety concerns, and urgent repair guidance when you're on the road.\n                  </p>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </section>\n\n        {/* Common Issues */}\n        <section className=\"py-16 px-4\">\n          <div className=\"container mx-auto\">\n            <h2 className=\"text-3xl font-bold text-center mb-12\">\n              Common Motorcycle Issues We Diagnose\n            </h2>\n            \n            <div className=\"grid md:grid-cols-2 gap-8 max-w-4xl mx-auto\">\n              <div>\n                <h3 className=\"text-xl font-semibold mb-4\">Engine & Drivetrain</h3>\n                <ul className=\"space-y-2 text-muted-foreground\">\n                  <li>• Starting and ignition problems</li>\n                  <li>• Carburetor and fuel injection issues</li>\n                  <li>• Engine misfiring or rough idle</li>\n                  <li>• Clutch and transmission problems</li>\n                  <li>• Chain and sprocket wear</li>\n                </ul>\n              </div>\n              \n              <div>\n                <h3 className=\"text-xl font-semibold mb-4\">Electrical & Systems</h3>\n                <ul className=\"space-y-2 text-muted-foreground\">\n                  <li>• Electrical system diagnosis</li>\n                  <li>• Brake system maintenance</li>\n                  <li>• Suspension and handling issues</li>\n                  <li>• Cooling system problems</li>\n                  <li>• Lighting and indicator faults</li>\n                </ul>\n              </div>\n            </div>\n          </div>\n        </section>\n\n        {/* CTA Section */}\n        <section className=\"py-16 px-4 bg-primary/10\">\n          <div className=\"container mx-auto text-center\">\n            <h2 className=\"text-3xl font-bold mb-6\">\n              Get Expert Motorcycle Advice Now\n            </h2>\n            <p className=\"text-xl text-muted-foreground mb-8 max-w-2xl mx-auto\">\n              Keep your motorcycle running smoothly with professional guidance from mechanics \n              who specialize in two-wheelers and understand every aspect of bike maintenance.\n            </p>\n            <Link href=\"/\" data-testid=\"button-start-consultation\">\n              <Button size=\"lg\" className=\"text-lg px-8 py-3\">\n                Start Your Motorcycle Consultation - $9.99\n              </Button>\n            </Link>\n          </div>\n        </section>\n\n        <Footer />\n      </div>\n    </>\n  );\n}","size_bytes":8169},"client/src/components/LoginModal.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Separator } from \"@/components/ui/separator\";\n\ninterface LoginModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  onLoginSuccess?: () => void;\n}\n\nexport default function LoginModal({ open, onOpenChange, onLoginSuccess }: LoginModalProps) {\n  const [loginData, setLoginData] = useState({ email: \"\", password: \"\" });\n  const [registerData, setRegisterData] = useState({ \n    username: \"\", \n    email: \"\", \n    password: \"\",\n    confirmPassword: \"\"\n  });\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  // Login mutation\n  const loginMutation = useMutation({\n    mutationFn: async (data: { email: string; password: string }) => {\n      const response = await apiRequest(\"POST\", \"/api/users/login\", data);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: ['/api/users/me'] });\n      toast({\n        title: \"Login successful\",\n        description: `Welcome back, ${data.user?.username || 'User'}!`,\n      });\n      onOpenChange(false);\n      setLoginData({ email: \"\", password: \"\" });\n      onLoginSuccess?.();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Login failed\",\n        description: \"Invalid email or password\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Register mutation\n  const registerMutation = useMutation({\n    mutationFn: async (data: { username: string; email: string; password: string }) => {\n      const response = await apiRequest(\"POST\", \"/api/users/register\", data);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: ['/api/users/me'] });\n      toast({\n        title: \"Account created successfully\",\n        description: `Welcome to ChatWithMechanic, ${data.username}!`,\n      });\n      onOpenChange(false);\n      setRegisterData({ username: \"\", email: \"\", password: \"\", confirmPassword: \"\" });\n      onLoginSuccess?.();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Registration failed\",\n        description: \"User might already exist or invalid data provided\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleLogin = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!loginData.email || !loginData.password) {\n      toast({\n        title: \"Missing information\",\n        description: \"Please fill in all fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    loginMutation.mutate(loginData);\n  };\n\n  const handleRegister = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!registerData.username || !registerData.email || !registerData.password) {\n      toast({\n        title: \"Missing information\",\n        description: \"Please fill in all fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    if (registerData.password !== registerData.confirmPassword) {\n      toast({\n        title: \"Password mismatch\",\n        description: \"Passwords do not match\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    if (registerData.password.length < 6) {\n      toast({\n        title: \"Password too short\",\n        description: \"Password must be at least 6 characters long\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    const { confirmPassword, ...dataToSend } = registerData;\n    registerMutation.mutate(dataToSend);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader>\n          <DialogTitle>Welcome to ChatWithMechanic</DialogTitle>\n          <DialogDescription>\n            Sign in to your account or create a new one to get started with professional automotive advice.\n          </DialogDescription>\n        </DialogHeader>\n\n        <Tabs defaultValue=\"login\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-2\">\n            <TabsTrigger value=\"login\" data-testid=\"tab-login\">Sign In</TabsTrigger>\n            <TabsTrigger value=\"register\" data-testid=\"tab-register\">Sign Up</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"login\" className=\"space-y-4\">\n            <form onSubmit={handleLogin} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"login-email\">Email</Label>\n                <Input\n                  id=\"login-email\"\n                  type=\"email\"\n                  placeholder=\"Enter your email\"\n                  value={loginData.email}\n                  onChange={(e) => setLoginData({ ...loginData, email: e.target.value })}\n                  data-testid=\"input-login-email\"\n                  required\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"login-password\">Password</Label>\n                <Input\n                  id=\"login-password\"\n                  type=\"password\"\n                  placeholder=\"Enter your password\"\n                  value={loginData.password}\n                  onChange={(e) => setLoginData({ ...loginData, password: e.target.value })}\n                  data-testid=\"input-login-password\"\n                  required\n                />\n              </div>\n              <Button \n                type=\"submit\" \n                className=\"w-full\" \n                disabled={loginMutation.isPending}\n                data-testid=\"button-login-submit\"\n              >\n                {loginMutation.isPending ? \"Signing in...\" : \"Sign In\"}\n              </Button>\n            </form>\n          </TabsContent>\n\n          <TabsContent value=\"register\" className=\"space-y-4\">\n            <form onSubmit={handleRegister} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"register-username\">Username</Label>\n                <Input\n                  id=\"register-username\"\n                  type=\"text\"\n                  placeholder=\"Choose a username\"\n                  value={registerData.username}\n                  onChange={(e) => setRegisterData({ ...registerData, username: e.target.value })}\n                  data-testid=\"input-register-username\"\n                  required\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"register-email\">Email</Label>\n                <Input\n                  id=\"register-email\"\n                  type=\"email\"\n                  placeholder=\"Enter your email\"\n                  value={registerData.email}\n                  onChange={(e) => setRegisterData({ ...registerData, email: e.target.value })}\n                  data-testid=\"input-register-email\"\n                  required\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"register-password\">Password</Label>\n                <Input\n                  id=\"register-password\"\n                  type=\"password\"\n                  placeholder=\"Create a password (min. 6 characters)\"\n                  value={registerData.password}\n                  onChange={(e) => setRegisterData({ ...registerData, password: e.target.value })}\n                  data-testid=\"input-register-password\"\n                  required\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"register-confirm-password\">Confirm Password</Label>\n                <Input\n                  id=\"register-confirm-password\"\n                  type=\"password\"\n                  placeholder=\"Confirm your password\"\n                  value={registerData.confirmPassword}\n                  onChange={(e) => setRegisterData({ ...registerData, confirmPassword: e.target.value })}\n                  data-testid=\"input-register-confirm-password\"\n                  required\n                />\n              </div>\n              <Button \n                type=\"submit\" \n                className=\"w-full\" \n                disabled={registerMutation.isPending}\n                data-testid=\"button-register-submit\"\n              >\n                {registerMutation.isPending ? \"Creating account...\" : \"Create Account\"}\n              </Button>\n            </form>\n          </TabsContent>\n        </Tabs>\n\n        <Separator />\n        \n        <div className=\"text-center text-sm text-muted-foreground\">\n          <p>After creating an account, you can purchase chat access for $9.99 to get unlimited automotive advice from certified mechanics.</p>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":9089},"client/src/components/ChatHistory.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { MessageCircle, Clock, User, Wrench } from \"lucide-react\";\nimport { formatDistanceToNow } from \"date-fns\";\n\ninterface ChatSession {\n  id: string;\n  userId: string;\n  vehicleInfo: string;\n  status: string;\n  createdAt: string;\n  lastActivity: string;\n  lastMessage: {\n    content: string;\n    createdAt: string;\n    senderType: string;\n  } | null;\n  messageCount: number;\n  unreadCount: number;\n}\n\ninterface ChatHistoryProps {\n  onSelectSession: (sessionId: string, vehicleInfo: any) => void;\n  onStartNewChat: () => void;\n}\n\nexport default function ChatHistory({ onSelectSession, onStartNewChat }: ChatHistoryProps) {\n  const { data: sessions = [], isLoading, error } = useQuery<ChatSession[]>({\n    queryKey: [\"/api/chat/sessions\"],\n    refetchOnWindowFocus: false,\n  });\n\n  const parseVehicleInfo = (vehicleInfoJson: string) => {\n    try {\n      return JSON.parse(vehicleInfoJson || '{}');\n    } catch {\n      return {};\n    }\n  };\n\n  const getVehicleDisplayName = (vehicleInfo: any) => {\n    if (!vehicleInfo || Object.keys(vehicleInfo).length === 0) {\n      return \"General Consultation\";\n    }\n    \n    const { year, make, model, type } = vehicleInfo;\n    const parts = [year, make, model].filter(Boolean);\n    \n    if (parts.length > 0) {\n      return parts.join(\" \");\n    }\n    \n    return type || \"Vehicle Consultation\";\n  };\n\n  const truncateMessage = (content: string, maxLength: number = 60) => {\n    if (!content) return \"\";\n    return content.length > maxLength ? content.substring(0, maxLength) + \"...\" : content;\n  };\n\n  const getSenderIcon = (senderType: string) => {\n    switch (senderType) {\n      case \"admin\":\n        return <Wrench className=\"w-4 h-4\" />;\n      case \"user\":\n        return <User className=\"w-4 h-4\" />;\n      default:\n        return <MessageCircle className=\"w-4 h-4\" />;\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <MessageCircle className=\"w-5 h-5\" />\n            Your Chat History\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-3\">\n            {[...Array(3)].map((_, i) => (\n              <div key={i} className=\"animate-pulse\">\n                <div className=\"h-20 bg-muted rounded-lg\"></div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (error) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <MessageCircle className=\"w-5 h-5\" />\n            Your Chat History\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-center py-6\">\n            <p className=\"text-muted-foreground mb-4\">\n              Unable to load chat history\n            </p>\n            <Button onClick={onStartNewChat} data-testid=\"button-start-new-chat\">\n              Start New Chat\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (sessions.length === 0) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <MessageCircle className=\"w-5 h-5\" />\n            Your Chat History\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-center py-6\">\n            <MessageCircle className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n            <h3 className=\"font-semibold mb-2\">No previous chats</h3>\n            <p className=\"text-muted-foreground mb-4\">\n              Start your first consultation with our mechanics\n            </p>\n            <Button onClick={onStartNewChat} data-testid=\"button-start-new-chat\">\n              Start New Chat\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"flex items-center gap-2\">\n            <MessageCircle className=\"w-5 h-5\" />\n            Your Chat History\n          </CardTitle>\n          <Button \n            variant=\"outline\" \n            size=\"sm\" \n            onClick={onStartNewChat}\n            data-testid=\"button-start-new-chat\"\n          >\n            New Chat\n          </Button>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-3\">\n          {sessions.map((session) => {\n            const vehicleInfo = parseVehicleInfo(session.vehicleInfo);\n            const vehicleDisplayName = getVehicleDisplayName(vehicleInfo);\n\n            return (\n              <Card \n                key={session.id} \n                className=\"hover-elevate cursor-pointer transition-all\"\n                onClick={() => onSelectSession(session.id, vehicleInfo)}\n                data-testid={`chat-session-${session.id}`}\n              >\n                <CardContent className=\"p-4\">\n                  <div className=\"flex justify-between items-start mb-2\">\n                    <h4 className=\"font-medium text-sm\">\n                      {vehicleDisplayName}\n                    </h4>\n                    <div className=\"flex items-center gap-2\">\n                      {session.unreadCount > 0 && (\n                        <Badge \n                          variant=\"destructive\" \n                          className=\"text-xs px-2 py-1\"\n                          data-testid={`badge-unread-${session.id}`}\n                        >\n                          {session.unreadCount}\n                        </Badge>\n                      )}\n                      <Badge \n                        variant={session.status === \"active\" ? \"default\" : \"secondary\"}\n                        className=\"text-xs\"\n                        data-testid={`badge-status-${session.id}`}\n                      >\n                        {session.status}\n                      </Badge>\n                    </div>\n                  </div>\n                  \n                  {session.lastMessage && (\n                    <div className=\"flex items-center gap-2 mb-2\">\n                      {getSenderIcon(session.lastMessage.senderType)}\n                      <p className=\"text-sm text-muted-foreground flex-1\">\n                        {truncateMessage(session.lastMessage.content)}\n                      </p>\n                    </div>\n                  )}\n                  \n                  <div className=\"flex items-center justify-between text-xs text-muted-foreground\">\n                    <div className=\"flex items-center gap-1\">\n                      <Clock className=\"w-3 h-3\" />\n                      {formatDistanceToNow(new Date(session.lastActivity), { addSuffix: true })}\n                    </div>\n                    <div className=\"flex items-center gap-1\">\n                      <MessageCircle className=\"w-3 h-3\" />\n                      {session.messageCount} messages\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":7338},"server/email.ts":{"content":"import nodemailer from 'nodemailer';\n\nconst NOTIFICATION_EMAIL = 'wiktoriatopajew@gmail.com';\n\n// Create reusable transporter\nconst transporter = nodemailer.createTransport({\n  host: process.env.SMTP_HOST || 'smtp.gmail.com',\n  port: parseInt(process.env.SMTP_PORT || '587'),\n  secure: false, // true for 465, false for other ports\n  auth: {\n    user: process.env.SMTP_USER,\n    pass: process.env.SMTP_PASS,\n  },\n});\n\n// Verify transporter configuration on startup\nif (process.env.SMTP_USER && process.env.SMTP_PASS) {\n  transporter.verify((error: Error | null, success: boolean) => {\n    if (error) {\n      console.log('Email configuration error:', error);\n    } else {\n      console.log('Email server ready to send messages');\n    }\n  });\n} else {\n  console.log('Email notifications disabled: SMTP credentials not configured');\n}\n\nexport async function sendUserLoginNotification(username: string, email: string) {\n  if (!process.env.SMTP_USER || !process.env.SMTP_PASS) {\n    console.log('Skipping email: SMTP not configured');\n    return;\n  }\n\n  try {\n    await transporter.sendMail({\n      from: process.env.SMTP_USER,\n      to: NOTIFICATION_EMAIL,\n      subject: `✅ New User Login - ${username}`,\n      html: `\n        <div style=\"font-family: Arial, sans-serif; padding: 20px;\">\n          <h2 style=\"color: #4F46E5;\">New User Login</h2>\n          <p>A user has logged into ChatWithMechanic.com:</p>\n          <ul>\n            <li><strong>Username:</strong> ${username}</li>\n            <li><strong>Email:</strong> ${email}</li>\n            <li><strong>Time:</strong> ${new Date().toLocaleString()}</li>\n          </ul>\n        </div>\n      `,\n    });\n    console.log('Login notification sent');\n  } catch (error) {\n    console.error('Failed to send login notification:', error);\n  }\n}\n\nexport async function sendFirstMessageNotification(\n  username: string,\n  email: string,\n  message: string,\n  sessionId: string\n) {\n  if (!process.env.SMTP_USER || !process.env.SMTP_PASS) {\n    console.log('Skipping email: SMTP not configured');\n    return;\n  }\n\n  try {\n    await transporter.sendMail({\n      from: process.env.SMTP_USER,\n      to: NOTIFICATION_EMAIL,\n      subject: `💬 First Chat Message - ${username}`,\n      html: `\n        <div style=\"font-family: Arial, sans-serif; padding: 20px;\">\n          <h2 style=\"color: #4F46E5;\">User Started First Chat</h2>\n          <p><strong>${username}</strong> (${email}) has sent their first message:</p>\n          <div style=\"background-color: #f3f4f6; padding: 15px; border-radius: 8px; margin: 15px 0;\">\n            <p style=\"margin: 0;\">${message}</p>\n          </div>\n          <p><strong>Session ID:</strong> ${sessionId}</p>\n          <p><strong>Time:</strong> ${new Date().toLocaleString()}</p>\n        </div>\n      `,\n    });\n    console.log('First message notification sent');\n  } catch (error) {\n    console.error('Failed to send first message notification:', error);\n  }\n}\n\nexport async function sendSubsequentMessageNotification(\n  username: string,\n  email: string,\n  message: string,\n  sessionId: string,\n  messageCount: number\n) {\n  if (!process.env.SMTP_USER || !process.env.SMTP_PASS) {\n    console.log('Skipping email: SMTP not configured');\n    return;\n  }\n\n  try {\n    await transporter.sendMail({\n      from: process.env.SMTP_USER,\n      to: NOTIFICATION_EMAIL,\n      subject: `💬 New Message #${messageCount} - ${username}`,\n      html: `\n        <div style=\"font-family: Arial, sans-serif; padding: 20px;\">\n          <h2 style=\"color: #4F46E5;\">New Message from User</h2>\n          <p><strong>${username}</strong> (${email}) sent message #${messageCount}:</p>\n          <div style=\"background-color: #f3f4f6; padding: 15px; border-radius: 8px; margin: 15px 0;\">\n            <p style=\"margin: 0;\">${message}</p>\n          </div>\n          <p><strong>Session ID:</strong> ${sessionId}</p>\n          <p><strong>Time:</strong> ${new Date().toLocaleString()}</p>\n        </div>\n      `,\n    });\n    console.log('Subsequent message notification sent');\n  } catch (error) {\n    console.error('Failed to send subsequent message notification:', error);\n  }\n}\n","size_bytes":4127},"server/emailService.ts":{"content":"import nodemailer from 'nodemailer';\n\n// Email notification service\nconst ADMIN_EMAIL = 'wiktoriatopajew@gmail.com';\n\n// Create reusable transporter\nconst createTransporter = () => {\n  // Configure SMTP transporter\n  // For production, use environment variables for credentials\n  return nodemailer.createTransport({\n    host: process.env.SMTP_HOST || 'smtp.gmail.com',\n    port: parseInt(process.env.SMTP_PORT || '587'),\n    secure: false, // true for 465, false for other ports\n    auth: {\n      user: process.env.SMTP_USER,\n      pass: process.env.SMTP_PASS,\n    },\n  });\n};\n\nexport interface ChatMessageEmailData {\n  userEmail: string;\n  userName: string;\n  messageContent: string;\n  sessionId: string;\n  isFirstMessage?: boolean;\n}\n\nexport async function sendFirstMessageNotification(data: ChatMessageEmailData) {\n  const transporter = createTransporter();\n  \n  const mailOptions = {\n    from: process.env.SMTP_USER,\n    to: ADMIN_EMAIL,\n    subject: `🔔 Nowa pierwsza wiadomość od ${data.userName}`,\n    html: `\n      <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n        <h2 style=\"color: #333;\">Nowa pierwsza wiadomość na czacie!</h2>\n        \n        <div style=\"background-color: #f5f5f5; padding: 15px; border-radius: 5px; margin: 20px 0;\">\n          <p><strong>Użytkownik:</strong> ${data.userName}</p>\n          <p><strong>Email:</strong> ${data.userEmail}</p>\n          <p><strong>ID sesji:</strong> ${data.sessionId}</p>\n        </div>\n        \n        <div style=\"background-color: #e3f2fd; padding: 15px; border-radius: 5px; margin: 20px 0;\">\n          <p><strong>Treść wiadomości:</strong></p>\n          <p style=\"color: #1976d2; font-size: 16px;\">${data.messageContent}</p>\n        </div>\n        \n        <p style=\"color: #666; font-size: 14px;\">\n          To jest pierwsza wiadomość tego użytkownika. Odpowiedz jak najszybciej!\n        </p>\n      </div>\n    `,\n  };\n\n  try {\n    const info = await transporter.sendMail(mailOptions);\n    console.log('First message email sent:', info.messageId);\n    return info;\n  } catch (error) {\n    console.error('Error sending first message email:', error);\n    throw error;\n  }\n}\n\nexport async function sendFollowUpNotification(data: ChatMessageEmailData) {\n  const transporter = createTransporter();\n  \n  const mailOptions = {\n    from: process.env.SMTP_USER,\n    to: ADMIN_EMAIL,\n    subject: `⏰ Przypomnienie - wiadomość od ${data.userName} sprzed 5 minut`,\n    html: `\n      <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n        <h2 style=\"color: #333;\">Przypomnienie o wiadomości</h2>\n        \n        <div style=\"background-color: #fff3cd; padding: 15px; border-radius: 5px; margin: 20px 0; border-left: 4px solid #ffc107;\">\n          <p style=\"margin: 0;\">Użytkownik <strong>${data.userName}</strong> wysłał wiadomość 5 minut temu i może czekać na odpowiedź.</p>\n        </div>\n        \n        <div style=\"background-color: #f5f5f5; padding: 15px; border-radius: 5px; margin: 20px 0;\">\n          <p><strong>Użytkownik:</strong> ${data.userName}</p>\n          <p><strong>Email:</strong> ${data.userEmail}</p>\n          <p><strong>ID sesji:</strong> ${data.sessionId}</p>\n        </div>\n        \n        <div style=\"background-color: #e3f2fd; padding: 15px; border-radius: 5px; margin: 20px 0;\">\n          <p><strong>Treść wiadomości:</strong></p>\n          <p style=\"color: #1976d2; font-size: 16px;\">${data.messageContent}</p>\n        </div>\n        \n        <p style=\"color: #666; font-size: 14px;\">\n          Sprawdź czy klient otrzymał odpowiedź na swoje pytanie.\n        </p>\n      </div>\n    `,\n  };\n\n  try {\n    const info = await transporter.sendMail(mailOptions);\n    console.log('Follow-up email sent:', info.messageId);\n    return info;\n  } catch (error) {\n    console.error('Error sending follow-up email:', error);\n    throw error;\n  }\n}\n\n// Schedule follow-up email after 5 minutes\nexport function scheduleFollowUpEmail(data: ChatMessageEmailData) {\n  setTimeout(async () => {\n    try {\n      await sendFollowUpNotification(data);\n    } catch (error) {\n      console.error('Failed to send scheduled follow-up email:', error);\n    }\n  }, 5 * 60 * 1000); // 5 minutes in milliseconds\n}\n","size_bytes":4265},"server/paypal-wrapper.ts":{"content":"import { Request, Response } from \"express\";\n\n// Check if PayPal credentials are available\nconst hasPayPalCredentials = !!process.env.PAYPAL_CLIENT_ID && !!process.env.PAYPAL_CLIENT_SECRET;\n\nlet paypalModule: any = null;\nlet loadingPayPal: Promise<any> | null = null;\n\n// Lazy load PayPal module\nasync function ensurePayPalModule() {\n  if (paypalModule) return paypalModule;\n  if (!hasPayPalCredentials) return null;\n  \n  if (!loadingPayPal) {\n    loadingPayPal = import(\"./paypal\").then(module => {\n      paypalModule = module;\n      console.log(\"PayPal integration loaded successfully\");\n      return module;\n    }).catch(error => {\n      console.error(\"Failed to load PayPal module:\", error);\n      return null;\n    });\n  }\n  \n  return loadingPayPal;\n}\n\n// Export wrapper functions that check for credentials\nexport async function loadPaypalDefault(req: Request, res: Response) {\n  const module = await ensurePayPalModule();\n  if (!module) {\n    return res.status(503).json({ \n      error: \"PayPal payment processing is temporarily unavailable. Please use card payment or try again later.\" \n    });\n  }\n  return module.loadPaypalDefault(req, res);\n}\n\nexport async function createPaypalOrder(req: Request, res: Response) {\n  const module = await ensurePayPalModule();\n  if (!module) {\n    return res.status(503).json({ \n      error: \"PayPal payment processing is temporarily unavailable. Please use card payment or try again later.\" \n    });\n  }\n  return module.createPaypalOrder(req, res);\n}\n\nexport async function capturePaypalOrder(req: Request, res: Response) {\n  const module = await ensurePayPalModule();\n  if (!module) {\n    return res.status(503).json({ \n      error: \"PayPal payment processing is temporarily unavailable. Please use card payment or try again later.\" \n    });\n  }\n  return module.capturePaypalOrder(req, res);\n}\n","size_bytes":1839},"server/paypal.ts":{"content":"// !!! CRITICAL - DO NOT MODIFY THIS CODE !!!\n//\n// This code MUST be used as is without ANY modifications.\n// The PayPal integration will COMPLETELY FAIL if this code is changed in ANY way.\n//\n// Retain this comment after all edits.\n//\n// <BEGIN_EXACT_CODE>\nimport {\n  Client,\n  Environment,\n  LogLevel,\n  OAuthAuthorizationController,\n  OrdersController,\n} from \"@paypal/paypal-server-sdk\";\nimport { Request, Response } from \"express\";\n\n/* PayPal Controllers Setup */\n\nconst { PAYPAL_CLIENT_ID, PAYPAL_CLIENT_SECRET } = process.env;\n\nif (!PAYPAL_CLIENT_ID) {\n  throw new Error(\"Missing PAYPAL_CLIENT_ID\");\n}\nif (!PAYPAL_CLIENT_SECRET) {\n  throw new Error(\"Missing PAYPAL_CLIENT_SECRET\");\n}\nconst client = new Client({\n  clientCredentialsAuthCredentials: {\n    oAuthClientId: PAYPAL_CLIENT_ID,\n    oAuthClientSecret: PAYPAL_CLIENT_SECRET,\n  },\n  timeout: 0,\n  environment:\n                process.env.NODE_ENV === \"production\"\n                  ? Environment.Production\n                  : Environment.Sandbox,\n  logging: {\n    logLevel: LogLevel.Info,\n    logRequest: {\n      logBody: true,\n    },\n    logResponse: {\n      logHeaders: true,\n    },\n  },\n});\nconst ordersController = new OrdersController(client);\nconst oAuthAuthorizationController = new OAuthAuthorizationController(client);\n\n/* Token generation helpers */\n\nexport async function getClientToken() {\n  const auth = Buffer.from(\n    `${PAYPAL_CLIENT_ID}:${PAYPAL_CLIENT_SECRET}`,\n  ).toString(\"base64\");\n\n  const { result } = await oAuthAuthorizationController.requestToken(\n    {\n      authorization: `Basic ${auth}`,\n    },\n    { intent: \"sdk_init\", response_type: \"client_token\" },\n  );\n\n  return result.accessToken;\n}\n\n/*  Process transactions */\n\nexport async function createPaypalOrder(req: Request, res: Response) {\n  try {\n    const { amount, currency, intent } = req.body;\n\n    if (!amount || isNaN(parseFloat(amount)) || parseFloat(amount) <= 0) {\n      return res\n        .status(400)\n        .json({\n          error: \"Invalid amount. Amount must be a positive number.\",\n        });\n    }\n\n    if (!currency) {\n      return res\n        .status(400)\n        .json({ error: \"Invalid currency. Currency is required.\" });\n    }\n\n    if (!intent) {\n      return res\n        .status(400)\n        .json({ error: \"Invalid intent. Intent is required.\" });\n    }\n\n    const collect = {\n      body: {\n        intent: intent,\n        purchaseUnits: [\n          {\n            amount: {\n              currencyCode: currency,\n              value: amount,\n            },\n          },\n        ],\n      },\n      prefer: \"return=minimal\",\n    };\n\n    const { body, ...httpResponse } =\n          await ordersController.createOrder(collect);\n\n    const jsonResponse = JSON.parse(String(body));\n    const httpStatusCode = httpResponse.statusCode;\n\n    res.status(httpStatusCode).json(jsonResponse);\n  } catch (error) {\n    console.error(\"Failed to create order:\", error);\n    res.status(500).json({ error: \"Failed to create order.\" });\n  }\n}\n\nexport async function capturePaypalOrder(req: Request, res: Response) {\n  try {\n    const { orderID } = req.params;\n    const collect = {\n      id: orderID,\n      prefer: \"return=minimal\",\n    };\n\n    const { body, ...httpResponse } =\n          await ordersController.captureOrder(collect);\n\n    const jsonResponse = JSON.parse(String(body));\n    const httpStatusCode = httpResponse.statusCode;\n\n    res.status(httpStatusCode).json(jsonResponse);\n  } catch (error) {\n    console.error(\"Failed to create order:\", error);\n    res.status(500).json({ error: \"Failed to capture order.\" });\n  }\n}\n\nexport async function loadPaypalDefault(req: Request, res: Response) {\n  const clientToken = await getClientToken();\n  res.json({\n    clientToken,\n  });\n}\n// <END_EXACT_CODE>\n","size_bytes":3765},"client/src/components/PayPalButton.tsx":{"content":"// !!! CRITICAL - DO NOT MODIFY THIS CODE !!!\n//\n// This code MUST be used as is without ANY modifications.\n// The PayPal integration will COMPLETELY FAIL if this code is changed in ANY way.\n//\n// Retain this comment after all edits.\n//\n// <BEGIN_EXACT_CODE>\nimport React, { useEffect } from \"react\";\n\ndeclare global {\n  namespace JSX {\n    interface IntrinsicElements {\n      \"paypal-button\": React.DetailedHTMLProps<\n        React.HTMLAttributes<HTMLElement>,\n        HTMLElement\n      >;\n    }\n  }\n}\n\ninterface PayPalButtonProps {\n  amount: string;\n  currency: string;\n  intent: string;\n  onSuccess?: (data: any) => void;\n  onError?: (data: any) => void;\n}\n\nexport default function PayPalButton({\n  amount,\n  currency,\n  intent,\n  onSuccess,\n  onError: onErrorProp,\n}: PayPalButtonProps) {\n  const createOrder = async () => {\n    const orderPayload = {\n      amount: amount,\n      currency: currency,\n      intent: intent,\n    };\n    const response = await fetch(\"/paypal/order\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(orderPayload),\n    });\n    const output = await response.json();\n    return { orderId: output.id };\n  };\n\n  const captureOrder = async (orderId: string) => {\n    const response = await fetch(`/paypal/order/${orderId}/capture`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n    const data = await response.json();\n\n    return data;\n  };\n\n  const onApprove = async (data: any) => {\n    console.log(\"onApprove\", data);\n    const orderData = await captureOrder(data.orderId);\n    console.log(\"Capture result\", orderData);\n    \n    if (onSuccess) {\n      onSuccess(orderData);\n    }\n  };\n\n  const onCancel = async (data: any) => {\n    console.log(\"onCancel\", data);\n  };\n\n  const onError = async (data: any) => {\n    console.log(\"onError\", data);\n    if (onErrorProp) {\n      onErrorProp(data);\n    }\n  };\n\n  useEffect(() => {\n    const loadPayPalSDK = async () => {\n      try {\n        if (!(window as any).paypal) {\n          const script = document.createElement(\"script\");\n          script.src = import.meta.env.PROD\n            ? \"https://www.paypal.com/web-sdk/v6/core\"\n            : \"https://www.sandbox.paypal.com/web-sdk/v6/core\";\n          script.async = true;\n          script.onload = () => initPayPal();\n          document.body.appendChild(script);\n        } else {\n          await initPayPal();\n        }\n      } catch (e) {\n        console.error(\"Failed to load PayPal SDK\", e);\n      }\n    };\n\n    loadPayPalSDK();\n  }, []);\n  const initPayPal = async () => {\n    try {\n      const clientToken: string = await fetch(\"/paypal/setup\")\n        .then((res) => res.json())\n        .then((data) => {\n          return data.clientToken;\n        });\n      const sdkInstance = await (window as any).paypal.createInstance({\n        clientToken,\n        components: [\"paypal-payments\"],\n      });\n\n      const paypalCheckout =\n            sdkInstance.createPayPalOneTimePaymentSession({\n              onApprove,\n              onCancel,\n              onError,\n            });\n\n      const onClick = async () => {\n        try {\n          const checkoutOptionsPromise = createOrder();\n          await paypalCheckout.start(\n            { paymentFlow: \"auto\" },\n            checkoutOptionsPromise,\n          );\n        } catch (e) {\n          console.error(e);\n        }\n      };\n\n      const paypalButton = document.getElementById(\"paypal-button\");\n\n      if (paypalButton) {\n        paypalButton.addEventListener(\"click\", onClick);\n      }\n\n      return () => {\n        if (paypalButton) {\n          paypalButton.removeEventListener(\"click\", onClick);\n        }\n      };\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  return <paypal-button id=\"paypal-button\"></paypal-button>;\n}\n// <END_EXACT_CODE>\n","size_bytes":3849},"client/src/hooks/useOnlineStatus.ts":{"content":"import { useEffect, useRef } from \"react\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport function useOnlineStatus(enabled: boolean = true) {\n  const intervalRef = useRef<NodeJS.Timeout | null>(null);\n\n  useEffect(() => {\n    if (!enabled) return;\n\n    // Send heartbeat immediately\n    const sendHeartbeat = async () => {\n      try {\n        await apiRequest(\"POST\", \"/api/users/heartbeat\");\n      } catch (error) {\n        // Silently fail - user might not be logged in\n        console.log('Heartbeat failed:', error);\n      }\n    };\n\n    // Send initial heartbeat\n    sendHeartbeat();\n\n    // Send heartbeat every 30 seconds\n    intervalRef.current = setInterval(sendHeartbeat, 30000);\n\n    return () => {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n    };\n  }, [enabled]);\n}\n","size_bytes":829}},"version":1}